{"version":3,"file":"AddAction.test.js","sourceRoot":"","sources":["../../../../src/cli/actions/test/AddAction.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport '../../test/mockRushCommandLineParser';\r\n\r\nimport * as path from 'path';\r\n\r\nimport { PackageJsonUpdater } from '../../../logic/PackageJsonUpdater';\r\nimport { RushCommandLineParser } from '../../RushCommandLineParser';\r\n\r\ndescribe('AddAction', () => {\r\n  describe(`basic \"rush add\" tests`, () => {\r\n    let doRushAddMock: jest.SpyInstance;\r\n    let oldExitCode: number | undefined;\r\n    let oldArgs: string[];\r\n\r\n    beforeEach(() => {\r\n      doRushAddMock = jest\r\n        .spyOn(PackageJsonUpdater.prototype, 'doRushAdd')\r\n        .mockImplementation(() => Promise.resolve());\r\n      jest.spyOn(process, 'exit').mockImplementation();\r\n      oldExitCode = process.exitCode;\r\n      oldArgs = process.argv;\r\n    });\r\n\r\n    afterEach(() => {\r\n      jest.clearAllMocks();\r\n      process.exitCode = oldExitCode;\r\n      process.argv = oldArgs;\r\n    });\r\n\r\n    describe(`'add' action`, () => {\r\n      it(`adds a dependency to just one repo in the workspace`, async () => {\r\n        const startPath: string = path.resolve(__dirname, 'addRepo');\r\n        const aPath: string = path.resolve(__dirname, 'addRepo', 'a');\r\n\r\n        // Create a Rush CLI instance. This instance is heavy-weight and relies on setting process.exit\r\n        // to exit and clear the Rush file lock. So running multiple `it` or `describe` test blocks over the same test\r\n        // repo will fail due to contention over the same lock which is kept until the test runner process\r\n        // ends.\r\n        const parser: RushCommandLineParser = new RushCommandLineParser({ cwd: startPath });\r\n\r\n        // Switching to the \"a\" package of addRepo\r\n        jest.spyOn(process, 'cwd').mockReturnValue(aPath);\r\n\r\n        // Mock the command\r\n        process.argv = ['pretend-this-is-node.exe', 'pretend-this-is-rush', 'add', '-p', 'assert'];\r\n\r\n        await expect(parser.execute()).resolves.toEqual(true);\r\n        expect(doRushAddMock).toHaveBeenCalledTimes(1);\r\n        expect(doRushAddMock.mock.calls[0][0].projects).toHaveLength(1);\r\n        expect(doRushAddMock.mock.calls[0][0].projects[0].packageName).toEqual('a');\r\n        expect(doRushAddMock.mock.calls[0][0].packageName).toEqual('assert');\r\n      });\r\n    });\r\n\r\n    describe(`'add' action with --all`, () => {\r\n      it(`adds a dependency to all repos in the workspace`, async () => {\r\n        const startPath: string = path.resolve(__dirname, 'addRepo');\r\n        const aPath: string = path.resolve(__dirname, 'addRepo', 'a');\r\n\r\n        // Create a Rush CLI instance. This instance is heavy-weight and relies on setting process.exit\r\n        // to exit and clear the Rush file lock. So running multiple `it` or `describe` test blocks over the same test\r\n        // repo will fail due to contention over the same lock which is kept until the test runner process\r\n        // ends.\r\n        const parser: RushCommandLineParser = new RushCommandLineParser({ cwd: startPath });\r\n\r\n        // Switching to the \"a\" package of addRepo\r\n        jest.spyOn(process, 'cwd').mockReturnValue(aPath);\r\n\r\n        // Mock the command\r\n        process.argv = ['pretend-this-is-node.exe', 'pretend-this-is-rush', 'add', '-p', 'assert', '--all'];\r\n\r\n        await expect(parser.execute()).resolves.toEqual(true);\r\n        expect(doRushAddMock).toHaveBeenCalledTimes(1);\r\n        expect(doRushAddMock.mock.calls[0][0].projects).toHaveLength(2);\r\n        expect(doRushAddMock.mock.calls[0][0].projects[0].packageName).toEqual('a');\r\n        expect(doRushAddMock.mock.calls[0][0].projects[1].packageName).toEqual('b');\r\n        expect(doRushAddMock.mock.calls[0][0].packageName).toEqual('assert');\r\n      });\r\n    });\r\n  });\r\n});\r\n"]}