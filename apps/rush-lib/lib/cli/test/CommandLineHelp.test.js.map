{"version":3,"file":"CommandLineHelp.test.js","sourceRoot":"","sources":["../../../src/cli/test/CommandLineHelp.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;AAE3D,oEAA0D;AAC1D,sDAAwC;AACxC,2CAA6B;AAE7B,oEAAiE;AAEjE,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,MAA0B,CAAC;IAC/B,IAAI,aAAsB,CAAC;IAE3B,IAAI,MAA6B,CAAC;IAElC,UAAU,CAAC,GAAG,EAAE;QACd,kEAAkE;QAClE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,CAAC,CAAC,IAAa,EAAE,EAAE;YAC/D,MAAM,IAAI,KAAK,CAAC,iCAAiC,IAAI,GAAG,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,QAAQ,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAEtD,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAExB,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,aAAa,EAAE;YAClB,aAAa,CAAC,MAAM,EAAE,CAAC;SACxB;QAED,gFAAgF;QAChF,2BAA2B;QAC3B,wEAAwE;QACxE,MAAM,GAAG,IAAI,6CAAqB,EAAE,CAAC;QACrC,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,MAAM,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SACvB;QAED,IAAI,CAAC,aAAa,EAAE;YAClB,aAAa,CAAC,OAAO,EAAE,CAAC;SACzB;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,QAAQ,GAAW,8BAAU,CAAC,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;QAC5E,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;YACnC,MAAM,QAAQ,GAAW,8BAAU,CAAC,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;YAC5E,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SACrD;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { AnsiEscape } from '@rushstack/node-core-library';\r\nimport * as colorsPackage from 'colors';\r\nimport * as path from 'path';\r\n\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\n\r\ndescribe('CommandLineHelp', () => {\r\n  let oldCwd: string | undefined;\r\n  let colorsEnabled: boolean;\r\n\r\n  let parser: RushCommandLineParser;\r\n\r\n  beforeEach(() => {\r\n    // ts-command-line calls process.exit() which interferes with Jest\r\n    jest.spyOn(process, 'exit').mockImplementation((code?: number) => {\r\n      throw new Error(`Test code called process.exit(${code})`);\r\n    });\r\n\r\n    oldCwd = process.cwd();\r\n    const localCwd: string = path.join(__dirname, 'repo');\r\n\r\n    process.chdir(localCwd);\r\n\r\n    colorsEnabled = colorsPackage.enabled;\r\n    if (!colorsEnabled) {\r\n      colorsPackage.enable();\r\n    }\r\n\r\n    // This call may terminate the entire test run because it invokes process.exit()\r\n    // if it encounters errors.\r\n    // TODO Remove the calls to process.exit() or override them for testing.\r\n    parser = new RushCommandLineParser();\r\n    parser.execute().catch(console.error);\r\n  });\r\n\r\n  afterEach(() => {\r\n    if (oldCwd) {\r\n      process.chdir(oldCwd);\r\n    }\r\n\r\n    if (!colorsEnabled) {\r\n      colorsPackage.disable();\r\n    }\r\n  });\r\n\r\n  it('prints the global help', () => {\r\n    const helpText: string = AnsiEscape.formatForTests(parser.renderHelpText());\r\n    expect(helpText).toMatchSnapshot();\r\n  });\r\n\r\n  it(`prints the help for each action`, () => {\r\n    for (const action of parser.actions) {\r\n      const helpText: string = AnsiEscape.formatForTests(action.renderHelpText());\r\n      expect(helpText).toMatchSnapshot(action.actionName);\r\n    }\r\n  });\r\n});\r\n"]}