{"version":3,"file":"RushCommandLineParser.test.js","sourceRoot":"","sources":["../../../src/cli/test/RushCommandLineParser.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport './mockRushCommandLineParser';\r\n\r\nimport * as path from 'path';\r\nimport { FileSystem } from '@rushstack/node-core-library';\r\nimport { RushCommandLineParser } from '../RushCommandLineParser';\r\nimport { LastLinkFlagFactory } from '../../api/LastLinkFlag';\r\n\r\n/**\r\n * See `__mocks__/child_process.js`.\r\n */\r\ninterface ISpawnMockConfig {\r\n  emitError: boolean;\r\n  returnCode: number;\r\n}\r\n\r\ninterface IChildProcessModuleMock {\r\n  /**\r\n   * Initialize the `spawn` mock behavior.\r\n   */\r\n  __setSpawnMockConfig(config?: ISpawnMockConfig): void;\r\n\r\n  spawn: jest.Mock;\r\n}\r\n\r\n/**\r\n * Interface definition for a test instance for the RushCommandLineParser.\r\n */\r\ninterface IParserTestInstance {\r\n  parser: RushCommandLineParser;\r\n  spawnMock: jest.Mock;\r\n}\r\n\r\n/**\r\n * Configure the `child_process` `spawn` mock for these tests. This relies on the mock implementation\r\n * in `__mocks__/child_process.js`.\r\n */\r\nfunction setSpawnMock(options?: ISpawnMockConfig): jest.Mock {\r\n  const cpMocked: IChildProcessModuleMock = require('child_process');\r\n  cpMocked.__setSpawnMockConfig(options);\r\n\r\n  const spawnMock: jest.Mock = cpMocked.spawn;\r\n  spawnMock.mockName('spawn');\r\n  return spawnMock;\r\n}\r\n\r\n/**\r\n * Helper to set up a test instance for RushCommandLineParser.\r\n */\r\nfunction getCommandLineParserInstance(repoName: string, taskName: string): IParserTestInstance {\r\n  // Point to the test repo folder\r\n  const startPath: string = path.resolve(__dirname, repoName);\r\n\r\n  // The `build` task is hard-coded to be incremental. So delete the package-deps file folder in\r\n  // the test repo to guarantee the test actually runs.\r\n  FileSystem.deleteFolder(path.resolve(__dirname, `${repoName}/a/.rush/temp`));\r\n  FileSystem.deleteFolder(path.resolve(__dirname, `${repoName}/b/.rush/temp`));\r\n\r\n  // Create a Rush CLI instance. This instance is heavy-weight and relies on setting process.exit\r\n  // to exit and clear the Rush file lock. So running multiple `it` or `describe` test blocks over the same test\r\n  // repo will fail due to contention over the same lock which is kept until the test runner process\r\n  // ends.\r\n  const parser: RushCommandLineParser = new RushCommandLineParser({ cwd: startPath });\r\n\r\n  // Bulk tasks are hard-coded to expect install to have been completed. So, ensure the last-link.flag\r\n  // file exists and is valid\r\n  LastLinkFlagFactory.getCommonTempFlag(parser.rushConfiguration).create();\r\n\r\n  // Mock the command\r\n  process.argv = ['pretend-this-is-node.exe', 'pretend-this-is-rush', taskName];\r\n  const spawnMock: jest.Mock = setSpawnMock();\r\n\r\n  return {\r\n    parser,\r\n    spawnMock\r\n  };\r\n}\r\n\r\n// Ordinals into the `mock.calls` array referencing each of the arguments to `spawn`\r\nconst SPAWN_ARG_ARGS: number = 1;\r\nconst SPAWN_ARG_OPTIONS: number = 2;\r\n\r\ndescribe('RushCommandLineParser', () => {\r\n  describe('execute', () => {\r\n    afterEach(() => {\r\n      jest.clearAllMocks();\r\n    });\r\n\r\n    describe('in basic repo', () => {\r\n      describe(`'build' action`, () => {\r\n        it(`executes the package's 'build' script`, async () => {\r\n          const repoName: string = 'basicAndRunBuildActionRepo';\r\n          const instance: IParserTestInstance = getCommandLineParserInstance(repoName, 'build');\r\n\r\n          await expect(instance.parser.execute()).resolves.toEqual(true);\r\n\r\n          // There should be 1 build per package\r\n          const packageCount: number = instance.spawnMock.mock.calls.length;\r\n          expect(packageCount).toEqual(2);\r\n\r\n          // Use regex for task name in case spaces were prepended or appended to spawned command\r\n          const expectedBuildTaskRegexp: RegExp = /fake_build_task_but_works_with_mock/;\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const firstSpawn: any[] = instance.spawnMock.mock.calls[0];\r\n          expect(firstSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/a`));\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const secondSpawn: any[] = instance.spawnMock.mock.calls[1];\r\n          expect(secondSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/b`));\r\n        });\r\n      });\r\n\r\n      describe(`'rebuild' action`, () => {\r\n        it(`executes the package's 'build' script`, async () => {\r\n          const repoName: string = 'basicAndRunRebuildActionRepo';\r\n          const instance: IParserTestInstance = getCommandLineParserInstance(repoName, 'rebuild');\r\n\r\n          await expect(instance.parser.execute()).resolves.toEqual(true);\r\n\r\n          // There should be 1 build per package\r\n          const packageCount: number = instance.spawnMock.mock.calls.length;\r\n          expect(packageCount).toEqual(2);\r\n\r\n          // Use regex for task name in case spaces were prepended or appended to spawned command\r\n          const expectedBuildTaskRegexp: RegExp = /fake_build_task_but_works_with_mock/;\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const firstSpawn: any[] = instance.spawnMock.mock.calls[0];\r\n          expect(firstSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/a`));\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const secondSpawn: any[] = instance.spawnMock.mock.calls[1];\r\n          expect(secondSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/b`));\r\n        });\r\n      });\r\n    });\r\n\r\n    describe(`in repo with 'rebuild' command overridden`, () => {\r\n      describe(`'build' action`, () => {\r\n        it(`executes the package's 'build' script`, async () => {\r\n          const repoName: string = 'overrideRebuildAndRunBuildActionRepo';\r\n          const instance: IParserTestInstance = getCommandLineParserInstance(repoName, 'build');\r\n\r\n          await expect(instance.parser.execute()).resolves.toEqual(true);\r\n\r\n          // There should be 1 build per package\r\n          const packageCount: number = instance.spawnMock.mock.calls.length;\r\n          expect(packageCount).toEqual(2);\r\n\r\n          // Use regex for task name in case spaces were prepended or appended to spawned command\r\n          const expectedBuildTaskRegexp: RegExp = /fake_build_task_but_works_with_mock/;\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const firstSpawn: any[] = instance.spawnMock.mock.calls[0];\r\n          expect(firstSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/a`));\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const secondSpawn: any[] = instance.spawnMock.mock.calls[1];\r\n          expect(secondSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/b`));\r\n        });\r\n      });\r\n\r\n      describe(`'rebuild' action`, () => {\r\n        it(`executes the package's 'rebuild' script`, async () => {\r\n          const repoName: string = 'overrideRebuildAndRunRebuildActionRepo';\r\n          const instance: IParserTestInstance = getCommandLineParserInstance(repoName, 'rebuild');\r\n\r\n          await expect(instance.parser.execute()).resolves.toEqual(true);\r\n\r\n          // There should be 1 build per package\r\n          const packageCount: number = instance.spawnMock.mock.calls.length;\r\n          expect(packageCount).toEqual(2);\r\n\r\n          // Use regex for task name in case spaces were prepended or appended to spawned command\r\n          const expectedBuildTaskRegexp: RegExp = /fake_REbuild_task_but_works_with_mock/;\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const firstSpawn: any[] = instance.spawnMock.mock.calls[0];\r\n          expect(firstSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/a`));\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const secondSpawn: any[] = instance.spawnMock.mock.calls[1];\r\n          expect(secondSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/b`));\r\n        });\r\n      });\r\n    });\r\n\r\n    describe(`in repo with 'rebuild' or 'build' partially set`, () => {\r\n      describe(`'build' action`, () => {\r\n        it(`executes the package's 'build' script`, async () => {\r\n          const repoName: string = 'overrideAndDefaultBuildActionRepo';\r\n          const instance: IParserTestInstance = getCommandLineParserInstance(repoName, 'build');\r\n          await expect(instance.parser.execute()).resolves.toEqual(true);\r\n\r\n          // There should be 1 build per package\r\n          const packageCount: number = instance.spawnMock.mock.calls.length;\r\n          expect(packageCount).toEqual(2);\r\n\r\n          // Use regex for task name in case spaces were prepended or appended to spawned command\r\n          const expectedBuildTaskRegexp: RegExp = /fake_build_task_but_works_with_mock/;\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const firstSpawn: any[] = instance.spawnMock.mock.calls[0];\r\n          expect(firstSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/a`));\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const secondSpawn: any[] = instance.spawnMock.mock.calls[1];\r\n          expect(secondSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/b`));\r\n        });\r\n      });\r\n\r\n      describe(`'rebuild' action`, () => {\r\n        it(`executes the package's 'build' script`, async () => {\r\n          // broken\r\n          const repoName: string = 'overrideAndDefaultRebuildActionRepo';\r\n          const instance: IParserTestInstance = getCommandLineParserInstance(repoName, 'rebuild');\r\n          await expect(instance.parser.execute()).resolves.toEqual(true);\r\n\r\n          // There should be 1 build per package\r\n          const packageCount: number = instance.spawnMock.mock.calls.length;\r\n          expect(packageCount).toEqual(2);\r\n\r\n          // Use regex for task name in case spaces were prepended or appended to spawned command\r\n          const expectedBuildTaskRegexp: RegExp = /fake_build_task_but_works_with_mock/;\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const firstSpawn: any[] = instance.spawnMock.mock.calls[0];\r\n          expect(firstSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(firstSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/a`));\r\n\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          const secondSpawn: any[] = instance.spawnMock.mock.calls[1];\r\n          expect(secondSpawn[SPAWN_ARG_ARGS]).toEqual(\r\n            expect.arrayContaining([expect.stringMatching(expectedBuildTaskRegexp)])\r\n          );\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS]).toEqual(expect.any(Object));\r\n          expect(secondSpawn[SPAWN_ARG_OPTIONS].cwd).toEqual(path.resolve(__dirname, `${repoName}/b`));\r\n        });\r\n      });\r\n    });\r\n\r\n    describe(`in repo with 'build' command overridden as a global command`, () => {\r\n      it(`throws an error when starting Rush`, async () => {\r\n        const repoName: string = 'overrideBuildAsGlobalCommandRepo';\r\n\r\n        await expect(() => {\r\n          getCommandLineParserInstance(repoName, 'doesnt-matter');\r\n        }).toThrowError('This command can only be designated as a command kind \"bulk\"');\r\n      });\r\n    });\r\n\r\n    describe(`in repo with 'rebuild' command overridden as a global command`, () => {\r\n      it(`throws an error when starting Rush`, async () => {\r\n        const repoName: string = 'overrideRebuildAsGlobalCommandRepo';\r\n\r\n        await expect(() => {\r\n          getCommandLineParserInstance(repoName, 'doesnt-matter');\r\n        }).toThrowError('This command can only be designated as a command kind \"bulk\"');\r\n      });\r\n    });\r\n\r\n    describe(`in repo with 'build' command overridden with 'safeForSimultaneousRushProcesses=true'`, () => {\r\n      it(`throws an error when starting Rush`, async () => {\r\n        const repoName: string = 'overrideBuildWithSimultaneousProcessesRepo';\r\n\r\n        await expect(() => {\r\n          getCommandLineParserInstance(repoName, 'doesnt-matter');\r\n        }).toThrowError('\"safeForSimultaneousRushProcesses=true\". This configuration is not supported');\r\n      });\r\n    });\r\n\r\n    describe(`in repo with 'rebuild' command overridden with 'safeForSimultaneousRushProcesses=true'`, () => {\r\n      it(`throws an error when starting Rush`, async () => {\r\n        const repoName: string = 'overrideRebuildWithSimultaneousProcessesRepo';\r\n\r\n        await expect(() => {\r\n          getCommandLineParserInstance(repoName, 'doesnt-matter');\r\n        }).toThrowError('\"safeForSimultaneousRushProcesses=true\". This configuration is not supported');\r\n      });\r\n    });\r\n  });\r\n});\r\n"]}