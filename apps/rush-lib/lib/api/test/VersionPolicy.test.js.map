{"version":3,"file":"VersionPolicy.test.js","sourceRoot":"","sources":["../../../src/api/test/VersionPolicy.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { IPackageJson } from '@rushstack/node-core-library';\r\n\r\nimport { VersionPolicyConfiguration } from '../VersionPolicyConfiguration';\r\nimport { VersionPolicy, LockStepVersionPolicy, IndividualVersionPolicy, BumpType } from '../VersionPolicy';\r\n\r\ndescribe('VersionPolicy', () => {\r\n  describe('LockStepVersion', () => {\r\n    const filename: string = path.resolve(__dirname, 'jsonFiles', 'rushWithLockVersion.json');\r\n    const versionPolicyConfig: VersionPolicyConfiguration = new VersionPolicyConfiguration(filename);\r\n    let versionPolicy: VersionPolicy;\r\n\r\n    beforeEach(() => {\r\n      versionPolicy = versionPolicyConfig.getVersionPolicy('testPolicy1');\r\n    });\r\n\r\n    it('loads configuration.', () => {\r\n      expect(versionPolicy).toBeInstanceOf(LockStepVersionPolicy);\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      expect(lockStepVersionPolicy.version).toEqual('1.1.0');\r\n      expect(lockStepVersionPolicy.nextBump).toEqual(BumpType.patch);\r\n    });\r\n\r\n    it('skips packageJson if version is already the locked step version', () => {\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      expect(\r\n        lockStepVersionPolicy.ensure({\r\n          name: 'a',\r\n          version: '1.1.0'\r\n        })\r\n      ).not.toBeDefined();\r\n    });\r\n\r\n    it('updates packageJson if version is lower than the locked step version', () => {\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      const expectedPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '1.1.0'\r\n      };\r\n      const originalPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '1.0.1'\r\n      };\r\n      expect(lockStepVersionPolicy.ensure(originalPackageJson)).toEqual(expectedPackageJson);\r\n    });\r\n\r\n    it('throws exception if version is higher than the locked step version', () => {\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      const originalPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '2.1.0'\r\n      };\r\n      expect(() => {\r\n        lockStepVersionPolicy.ensure(originalPackageJson);\r\n      }).toThrow();\r\n    });\r\n\r\n    it('update version with force if version is higher than the locked step version', () => {\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      const originalPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '2.1.0'\r\n      };\r\n      const expectedPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '1.1.0'\r\n      };\r\n      expect(lockStepVersionPolicy.ensure(originalPackageJson, true)).toEqual(expectedPackageJson);\r\n    });\r\n\r\n    it('bumps version for preminor release', () => {\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      lockStepVersionPolicy.bump(BumpType.preminor, 'pr');\r\n      expect(lockStepVersionPolicy.version).toEqual('1.2.0-pr.0');\r\n      expect(lockStepVersionPolicy.nextBump).toEqual(BumpType.patch);\r\n    });\r\n\r\n    it('bumps version for minor release', () => {\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      lockStepVersionPolicy.bump(BumpType.minor);\r\n      expect(lockStepVersionPolicy.version).toEqual('1.2.0');\r\n      expect(lockStepVersionPolicy.nextBump).toEqual(BumpType.patch);\r\n    });\r\n\r\n    it('can update version directly', () => {\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      const newVersion: string = '1.5.6-beta.0';\r\n      lockStepVersionPolicy.update(newVersion);\r\n      expect(lockStepVersionPolicy.version).toEqual(newVersion);\r\n    });\r\n  });\r\n\r\n  describe('IndividualVersionPolicy', () => {\r\n    const fileName: string = path.resolve(__dirname, 'jsonFiles', 'rushWithIndividualVersion.json');\r\n    const versionPolicyConfig: VersionPolicyConfiguration = new VersionPolicyConfiguration(fileName);\r\n    const versionPolicy: VersionPolicy = versionPolicyConfig.getVersionPolicy('testPolicy2');\r\n\r\n    it('loads configuration', () => {\r\n      expect(versionPolicy).toBeInstanceOf(IndividualVersionPolicy);\r\n      const individualVersionPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\r\n      expect(individualVersionPolicy.lockedMajor).toEqual(2);\r\n    });\r\n\r\n    it('skips packageJson if no need to change', () => {\r\n      const individualVersionPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\r\n      expect(\r\n        individualVersionPolicy.ensure({\r\n          name: 'a',\r\n          version: '2.1.0'\r\n        })\r\n      ).not.toBeDefined();\r\n    });\r\n\r\n    it('updates packageJson if version is lower than the locked major', () => {\r\n      const individualVersionPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\r\n      const expectedPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '2.0.0'\r\n      };\r\n      const originalPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '1.0.1'\r\n      };\r\n      expect(individualVersionPolicy.ensure(originalPackageJson)).toEqual(expectedPackageJson);\r\n    });\r\n\r\n    it('throws exception if version is higher than the locked step version', () => {\r\n      const individualVersionPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\r\n      const originalPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '3.1.0'\r\n      };\r\n      expect(() => {\r\n        individualVersionPolicy.ensure(originalPackageJson);\r\n      }).toThrow();\r\n    });\r\n  });\r\n});\r\n"]}