{"version":3,"file":"LastInstallFlag.test.js","sourceRoot":"","sources":["../../../src/api/test/LastInstallFlag.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\n\r\nimport { LastInstallFlag } from '../LastInstallFlag';\r\nimport { FileSystem } from '@rushstack/node-core-library';\r\n\r\nconst TEMP_DIR: string = path.join(__dirname, 'temp');\r\n\r\ndescribe('LastInstallFlag', () => {\r\n  beforeEach(() => {\r\n    FileSystem.ensureEmptyFolder(TEMP_DIR);\r\n  });\r\n\r\n  afterEach(() => {\r\n    FileSystem.ensureEmptyFolder(TEMP_DIR);\r\n  });\r\n\r\n  it('can create and remove a flag in an empty directory', () => {\r\n    // preparation\r\n    const flag: LastInstallFlag = new LastInstallFlag(TEMP_DIR);\r\n    FileSystem.deleteFile(flag.path);\r\n\r\n    // test state, should be invalid since the file doesn't exist\r\n    expect(flag.isValid()).toEqual(false);\r\n\r\n    // test creation\r\n    flag.create();\r\n    expect(FileSystem.exists(flag.path)).toEqual(true);\r\n    expect(flag.isValid()).toEqual(true);\r\n\r\n    // test deletion\r\n    flag.clear();\r\n    expect(FileSystem.exists(flag.path)).toEqual(false);\r\n    expect(flag.isValid()).toEqual(false);\r\n  });\r\n\r\n  it('can detect if the last flag was in a different state', () => {\r\n    // preparation\r\n    const flag1: LastInstallFlag = new LastInstallFlag(TEMP_DIR, { node: '5.0.0' });\r\n    const flag2: LastInstallFlag = new LastInstallFlag(TEMP_DIR, { node: '8.9.4' });\r\n    FileSystem.deleteFile(flag1.path);\r\n\r\n    // test state, should be invalid since the file doesn't exist\r\n    expect(flag1.isValid()).toEqual(false);\r\n    expect(flag2.isValid()).toEqual(false);\r\n\r\n    // test creation\r\n    flag1.create();\r\n    expect(FileSystem.exists(flag1.path)).toEqual(true);\r\n    expect(flag1.isValid()).toEqual(true);\r\n\r\n    // the second flag has different state and should be invalid\r\n    expect(flag2.isValid()).toEqual(false);\r\n\r\n    // test deletion\r\n    flag1.clear();\r\n    expect(FileSystem.exists(flag1.path)).toEqual(false);\r\n    expect(flag1.isValid()).toEqual(false);\r\n    expect(flag2.isValid()).toEqual(false);\r\n  });\r\n\r\n  it('can detect if the last flag was in a corrupted state', () => {\r\n    // preparation, write non-json into flag file\r\n    const flag: LastInstallFlag = new LastInstallFlag(TEMP_DIR);\r\n    FileSystem.writeFile(flag.path, 'sdfjkaklfjksldajgfkld');\r\n\r\n    // test state, should be invalid since the file is not JSON\r\n    expect(flag.isValid()).toEqual(false);\r\n    FileSystem.deleteFile(flag.path);\r\n  });\r\n\r\n  it(\"throws an error if new storePath doesn't match the old one\", () => {\r\n    const flag1: LastInstallFlag = new LastInstallFlag(TEMP_DIR, {\r\n      packageManager: 'pnpm',\r\n      storePath: path.join(TEMP_DIR, 'pnpm-store')\r\n    });\r\n    const flag2: LastInstallFlag = new LastInstallFlag(TEMP_DIR, {\r\n      packageManager: 'pnpm',\r\n      storePath: path.join(TEMP_DIR, 'temp-store')\r\n    });\r\n\r\n    flag1.create();\r\n    expect(() => {\r\n      flag2.checkValidAndReportStoreIssues();\r\n    }).toThrowError(/PNPM store path/);\r\n  });\r\n\r\n  it(\"doesn't throw an error if conditions for error aren't met\", () => {\r\n    const flag1: LastInstallFlag = new LastInstallFlag(TEMP_DIR, {\r\n      packageManager: 'pnpm',\r\n      storePath: path.join(TEMP_DIR, 'pnpm-store')\r\n    });\r\n    const flag2: LastInstallFlag = new LastInstallFlag(TEMP_DIR, {\r\n      packageManager: 'npm'\r\n    });\r\n\r\n    flag1.create();\r\n    expect(() => {\r\n      flag2.checkValidAndReportStoreIssues();\r\n    }).not.toThrow();\r\n    expect(flag2.checkValidAndReportStoreIssues()).toEqual(false);\r\n  });\r\n});\r\n"]}