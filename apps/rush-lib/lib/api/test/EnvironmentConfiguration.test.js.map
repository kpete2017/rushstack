{"version":3,"file":"EnvironmentConfiguration.test.js","sourceRoot":"","sources":["../../../src/api/test/EnvironmentConfiguration.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { EnvironmentConfiguration } from '../EnvironmentConfiguration';\r\n\r\ndescribe('EnvironmentConfiguration', () => {\r\n  let _oldEnv: typeof process.env;\r\n\r\n  beforeEach(() => {\r\n    EnvironmentConfiguration.reset();\r\n    _oldEnv = process.env;\r\n    process.env = {};\r\n  });\r\n\r\n  afterEach(() => {\r\n    process.env = _oldEnv;\r\n  });\r\n\r\n  describe('initialize', () => {\r\n    it('correctly allows no environment variables', () => {\r\n      expect(EnvironmentConfiguration.initialize).not.toThrow();\r\n    });\r\n\r\n    it('allows known environment variables', () => {\r\n      process.env['RUSH_TEMP_FOLDER'] = '/var/temp'; // eslint-disable-line dot-notation\r\n      expect(EnvironmentConfiguration.initialize).not.toThrow();\r\n    });\r\n\r\n    it('does not allow unknown environment variables', () => {\r\n      process.env['rush_foobar'] = 'asdf'; // eslint-disable-line dot-notation\r\n      expect(EnvironmentConfiguration.initialize).toThrow();\r\n    });\r\n\r\n    it('can be re-initialized', () => {\r\n      process.env['RUSH_TEMP_FOLDER'] = '/var/tempA'; // eslint-disable-line dot-notation\r\n      EnvironmentConfiguration.initialize({ doNotNormalizePaths: true });\r\n\r\n      expect(EnvironmentConfiguration.rushTempFolderOverride).toEqual('/var/tempA');\r\n\r\n      process.env['RUSH_TEMP_FOLDER'] = '/var/tempB'; // eslint-disable-line dot-notation\r\n      EnvironmentConfiguration.initialize({ doNotNormalizePaths: true });\r\n\r\n      expect(EnvironmentConfiguration.rushTempFolderOverride).toEqual('/var/tempB');\r\n    });\r\n  });\r\n\r\n  describe('rushTempDirOverride', () => {\r\n    it('throws if EnvironmentConfiguration is not initialized', () => {\r\n      expect(() => EnvironmentConfiguration.rushTempFolderOverride).toThrow();\r\n    });\r\n\r\n    it('returns undefined for unset environment variables', () => {\r\n      EnvironmentConfiguration.initialize();\r\n\r\n      expect(EnvironmentConfiguration.rushTempFolderOverride).not.toBeDefined();\r\n    });\r\n\r\n    it('returns the value for a set environment variable', () => {\r\n      const expectedValue: string = '/var/temp';\r\n      process.env['RUSH_TEMP_FOLDER'] = expectedValue; // eslint-disable-line dot-notation\r\n      EnvironmentConfiguration.initialize({ doNotNormalizePaths: true });\r\n\r\n      expect(EnvironmentConfiguration.rushTempFolderOverride).toEqual(expectedValue);\r\n    });\r\n  });\r\n\r\n  describe('pnpmStorePathOverride', () => {\r\n    const ENV_VAR: string = 'RUSH_PNPM_STORE_PATH';\r\n    it('throws if EnvironmentConfiguration is not initialized', () => {\r\n      expect(() => EnvironmentConfiguration.pnpmStorePathOverride).toThrow();\r\n    });\r\n\r\n    it('returns undefined for unset environment variable', () => {\r\n      EnvironmentConfiguration.initialize();\r\n\r\n      expect(EnvironmentConfiguration.pnpmStorePathOverride).not.toBeDefined();\r\n    });\r\n\r\n    it('returns the expected path from environment variable without normalization', () => {\r\n      const expectedValue: string = '/var/temp';\r\n      process.env[ENV_VAR] = expectedValue;\r\n      EnvironmentConfiguration.initialize({ doNotNormalizePaths: true });\r\n\r\n      expect(EnvironmentConfiguration.pnpmStorePathOverride).toEqual(expectedValue);\r\n    });\r\n\r\n    it('returns expected path from environment variable with normalization', () => {\r\n      const expectedValue: string = path.resolve(path.join(process.cwd(), 'temp'));\r\n      const envVar: string = './temp';\r\n      process.env[ENV_VAR] = envVar;\r\n\r\n      EnvironmentConfiguration.initialize();\r\n\r\n      expect(EnvironmentConfiguration.pnpmStorePathOverride).toEqual(expectedValue);\r\n    });\r\n  });\r\n});\r\n"]}