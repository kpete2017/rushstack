{"version":3,"file":"TarExecutable.js","sourceRoot":"","sources":["../../src/utilities/TarExecutable.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Executable, FileSystem, FileWriter, Terminal } from '@rushstack/node-core-library';\r\nimport { ChildProcess } from 'child_process';\r\nimport * as events from 'events';\r\n\r\nimport { RushConfigurationProject } from '../api/RushConfigurationProject';\r\n\r\nexport interface ITarOptionsBase {\r\n  logFilePath: string;\r\n}\r\n\r\nexport interface IUntarOptions extends ITarOptionsBase {\r\n  archivePath: string;\r\n  outputFolderPath: string;\r\n}\r\n\r\nexport interface ICreateArchiveOptions extends ITarOptionsBase {\r\n  archivePath: string;\r\n  paths: string[];\r\n  project: RushConfigurationProject;\r\n}\r\n\r\nexport class TarExecutable {\r\n  private _tarExecutablePath: string;\r\n\r\n  private constructor(tarExecutablePath: string) {\r\n    this._tarExecutablePath = tarExecutablePath;\r\n  }\r\n\r\n  public static tryInitialize(terminal: Terminal): TarExecutable | undefined {\r\n    terminal.writeVerboseLine('Trying to find \"tar\" binary');\r\n    const tarExecutablePath: string | undefined = Executable.tryResolve('tar');\r\n    if (!tarExecutablePath) {\r\n      terminal.writeVerboseLine('\"tar\" was not found on the PATH');\r\n      return undefined;\r\n    }\r\n\r\n    return new TarExecutable(tarExecutablePath);\r\n  }\r\n\r\n  /**\r\n   * @returns\r\n   * The \"tar\" exit code\r\n   */\r\n  public async tryUntarAsync(options: IUntarOptions): Promise<number> {\r\n    return await this._spawnTarWithLoggingAsync(\r\n      // These parameters are chosen for compatibility with the very primitive bsdtar 3.3.2 shipped with Windows 10.\r\n      [\r\n        // [Windows bsdtar 3.3.2] Extract: tar -x [options] [<patterns>]\r\n        '-x',\r\n        // [Windows bsdtar 3.3.2] -m    Don't restore modification times\r\n        '-m',\r\n        // [Windows bsdtar 3.3.2] -f <filename>  Location of archive (default \\\\.\\tape0)\r\n        '-f',\r\n        options.archivePath\r\n      ],\r\n      options.outputFolderPath,\r\n      options.logFilePath\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns\r\n   * The \"tar\" exit code\r\n   */\r\n  public async tryCreateArchiveFromProjectPathsAsync(options: ICreateArchiveOptions): Promise<number> {\r\n    const { project, archivePath, paths, logFilePath } = options;\r\n    const pathsListFilePath: string = `${project.projectRushTempFolder}/tarPaths_${Date.now()}`;\r\n    await FileSystem.writeFileAsync(pathsListFilePath, paths.join('\\n'));\r\n\r\n    // On Windows, tar.exe will report a \"Failed to clean up compressor\" error if the target folder\r\n    // does not exist (GitHub #2622)\r\n    await FileSystem.ensureFolderAsync(path.dirname(archivePath));\r\n\r\n    const projectFolderPath: string = project.projectFolder;\r\n    const tarExitCode: number = await this._spawnTarWithLoggingAsync(\r\n      // These parameters are chosen for compatibility with the very primitive bsdtar 3.3.2 shipped with Windows 10.\r\n      [\r\n        // [Windows bsdtar 3.3.2] -c Create\r\n        '-c',\r\n        // [Windows bsdtar 3.3.2] -f <filename>  Location of archive (default \\\\.\\tape0)\r\n        '-f',\r\n        archivePath,\r\n        // [Windows bsdtar 3.3.2] -z, -j, -J, --lzma  Compress archive with gzip/bzip2/xz/lzma\r\n        '-z',\r\n        // [Windows bsdtar 3.3.2] -C <dir>  Change to <dir> before processing remaining files\r\n        '-C',\r\n        projectFolderPath,\r\n        // [GNU tar 1.33] -T, --files-from=FILE      get names to extract or create from FILE\r\n        //\r\n        // Windows bsdtar does not document this parameter, but seems to accept it.\r\n        '--files-from',\r\n        pathsListFilePath\r\n      ],\r\n      projectFolderPath,\r\n      logFilePath\r\n    );\r\n    await FileSystem.deleteFileAsync(pathsListFilePath);\r\n\r\n    return tarExitCode;\r\n  }\r\n\r\n  private async _spawnTarWithLoggingAsync(\r\n    args: string[],\r\n    currentWorkingDirectory: string,\r\n    logFilePath: string\r\n  ): Promise<number> {\r\n    // Runs \"tar\" with the specified args and logs its output to the specified location.\r\n    // The log file looks like this:\r\n    //\r\n    // Windows:\r\n    // Start time: Mon Apr 19 2021 13:06:40 GMT-0700 (Pacific Daylight Time)\r\n    // Invoking \"C:\\WINDOWS\\system32\\tar.exe -x -f E:\\rush-cache\\d18105f7f83eb610b468be4e2421681f4a52e44d\"\r\n    //\r\n    // ======= BEGIN PROCESS OUTPUT =======\r\n    // [stdout] <tar stdout output>\r\n    // [stderr] <tar stderr output>\r\n    // ======== END PROCESS OUTPUT ========\r\n    //\r\n    // Exited with code \"0\"\r\n    //\r\n    // Linux:\r\n    // Start time: Mon Apr 19 2021 13:06:40 GMT-0700 (Pacific Daylight Time)\r\n    // Invoking \"/bin/tar -x -f /home/username/rush-cache/d18105f7f83eb610b468be4e2421681f4a52e44d\"\r\n    //\r\n    // ======= BEGIN PROCESS OUTPUT =======\r\n    // [stdout] <tar stdout output>\r\n    // [stderr] <tar stderr output>\r\n    // ======== END PROCESS OUTPUT ========\r\n    //\r\n    // Exited with code \"0\"\r\n\r\n    await FileSystem.ensureFolderAsync(path.dirname(logFilePath));\r\n    const fileWriter: FileWriter = FileWriter.open(logFilePath);\r\n    fileWriter.write(\r\n      [\r\n        `Start time: ${new Date().toString()}`,\r\n        `Invoking \"${this._tarExecutablePath} ${args.join(' ')}\"`,\r\n        '',\r\n        '======= BEGIN PROCESS OUTPUT =======',\r\n        ''\r\n      ].join('\\n')\r\n    );\r\n\r\n    const childProcess: ChildProcess = Executable.spawn(this._tarExecutablePath, args, {\r\n      currentWorkingDirectory: currentWorkingDirectory\r\n    });\r\n\r\n    childProcess.stdout.on('data', (chunk) => fileWriter.write(`[stdout] ${chunk}`));\r\n    childProcess.stderr.on('data', (chunk) => fileWriter.write(`[stderr] ${chunk}`));\r\n\r\n    const [tarExitCode] = await events.once(childProcess, 'exit');\r\n\r\n    fileWriter.write(\r\n      ['======== END PROCESS OUTPUT ========', '', `Exited with code \"${tarExitCode}\"`].join('\\n')\r\n    );\r\n    fileWriter.close();\r\n\r\n    return tarExitCode;\r\n  }\r\n}\r\n"]}