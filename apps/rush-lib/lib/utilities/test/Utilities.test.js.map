{"version":3,"file":"Utilities.test.js","sourceRoot":"","sources":["../../../src/utilities/test/Utilities.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,4CAAsD;AAEtD,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,IAAI,QAAiB,CAAC;QAEtB,UAAU,CAAC,GAAG,EAAE;YACd,QAAQ,GAAG,KAAK,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU;YACP,OAAO;gBACZ,QAAQ,GAAG,IAAI,CAAC;YAClB,CAAC;SACF;QAED,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,qBAAS,CAAC,UAAU,CACxB,GAAG,EAAE,CAAC,IAAI,UAAU,EAAE,EACtB,GAAG,EAAE;gBACH,WAAW;YACb,CAAC,CACF,CAAC;YAEF,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAM,MAAM,CACV,KAAK,IAAI,EAAE,CACT,MAAM,qBAAS,CAAC,UAAU,CACxB,GAAG,EAAE,CAAC,IAAI,UAAU,EAAE,EACtB,GAAG,EAAE;gBACH,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YACrC,CAAC,CACF,CACJ,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;YAE5B,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,MAAM,CACV,KAAK,IAAI,EAAE,CACT,MAAM,qBAAS,CAAC,UAAU,CACxB,KAAK,IAAI,EAAE;gBACT,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvC,CAAC,EACD,GAAG,EAAE;gBACH,WAAW;YACb,CAAC,CACF,CACJ,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;YAE5B,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IDisposable, Utilities } from '../Utilities';\r\n\r\ndescribe('Utilities', () => {\r\n  describe('usingAsync', () => {\r\n    let disposed: boolean;\r\n\r\n    beforeEach(() => {\r\n      disposed = false;\r\n    });\r\n\r\n    class Disposable implements IDisposable {\r\n      public dispose(): void {\r\n        disposed = true;\r\n      }\r\n    }\r\n\r\n    it('Disposes correctly in a simple case', async () => {\r\n      await Utilities.usingAsync(\r\n        () => new Disposable(),\r\n        () => {\r\n          /* no-op */\r\n        }\r\n      );\r\n\r\n      expect(disposed).toEqual(true);\r\n    });\r\n\r\n    it('Disposes correctly after the operation throws an exception', async () => {\r\n      await expect(\r\n        async () =>\r\n          await Utilities.usingAsync(\r\n            () => new Disposable(),\r\n            () => {\r\n              throw new Error('operation threw');\r\n            }\r\n          )\r\n      ).rejects.toMatchSnapshot();\r\n\r\n      expect(disposed).toEqual(true);\r\n    });\r\n\r\n    it('Does not dispose if the construction throws an exception', async () => {\r\n      await expect(\r\n        async () =>\r\n          await Utilities.usingAsync(\r\n            async () => {\r\n              throw new Error('constructor threw');\r\n            },\r\n            () => {\r\n              /* no-op */\r\n            }\r\n          )\r\n      ).rejects.toMatchSnapshot();\r\n\r\n      expect(disposed).toEqual(false);\r\n    });\r\n  });\r\n});\r\n"]}