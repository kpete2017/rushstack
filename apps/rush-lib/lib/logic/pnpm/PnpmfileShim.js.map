{"version":3,"file":"PnpmfileShim.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmfileShim.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n// The \"rush install\" or \"rush update\" commands will copy this template to\r\n// \"common/temp/<pnpmfile.js|.pnpmfile.cjs>\" so that it can implement Rush-specific features such as\r\n// implicitly preferred versions. It reads its input data from \"common/temp/pnpmfileSettings.json\",\r\n// which includes the path to the user's pnpmfile for the currently selected variant. The pnpmfile is\r\n// required directly by this shim and is called after Rush's transformations are applied.\r\n\r\n// This file can use \"import type\" but otherwise should not reference any other modules, since it will\r\n// be run from the \"common/temp\" directory\r\nimport type * as TSemver from 'semver';\r\nimport type { IPackageJson } from '@rushstack/node-core-library';\r\n\r\nimport type { IPnpmShrinkwrapYaml } from './PnpmShrinkwrapFile';\r\nimport type { IPnpmfile, IPnpmfileShimSettings, IPnpmfileContext } from './IPnpmfile';\r\n\r\nlet settings: IPnpmfileShimSettings;\r\nlet allPreferredVersions: Map<string, string>;\r\nlet allowedAlternativeVersions: Map<string, Set<string>> | undefined;\r\nlet userPnpmfile: IPnpmfile | undefined;\r\nlet semver: typeof TSemver | undefined;\r\n\r\n// Initialize all external aspects of the pnpmfile shim. When using the shim, settings\r\n// are always expected to be available. Init must be called before running any hook that\r\n// depends on a resource obtained from or related to the settings, and will require modules\r\n// once so they aren't repeatedly required in the hook functions.\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction init(context: IPnpmfileContext | any): IPnpmfileContext {\r\n  // Sometimes PNPM may provide us a context arg that doesn't fit spec, ex.:\r\n  // https://github.com/pnpm/pnpm/blob/97c64bae4d14a8c8f05803f1d94075ee29c2df2f/packages/get-context/src/index.ts#L134\r\n  // So we need to normalize the context format before we move on\r\n  if (typeof context !== 'object' || Array.isArray(context)) {\r\n    context = {\r\n      log: (message: string) => {},\r\n      originalContext: context\r\n    } as IPnpmfileContext;\r\n  }\r\n  if (!settings) {\r\n    // Initialize the settings from file\r\n    if (!context.pnpmfileShimSettings) {\r\n      context.pnpmfileShimSettings = require('./pnpmfileSettings.json');\r\n    }\r\n    settings = context.pnpmfileShimSettings!;\r\n  } else if (!context.pnpmfileShimSettings) {\r\n    // Reuse the already initialized settings\r\n    context.pnpmfileShimSettings = settings;\r\n  }\r\n  if (!allPreferredVersions && settings.allPreferredVersions) {\r\n    allPreferredVersions = new Map(Object.entries(settings.allPreferredVersions));\r\n  }\r\n  if (!allowedAlternativeVersions && settings.allowedAlternativeVersions) {\r\n    allowedAlternativeVersions = new Map(\r\n      Object.entries(settings.allowedAlternativeVersions).map(([packageName, versions]) => {\r\n        return [packageName, new Set(versions)];\r\n      })\r\n    );\r\n  }\r\n  // If a userPnpmfilePath is provided, we expect it to exist\r\n  if (!userPnpmfile && settings.userPnpmfilePath) {\r\n    userPnpmfile = require(settings.userPnpmfilePath);\r\n  }\r\n  // If a semverPath is provided, we expect it to exist\r\n  if (!semver && settings.semverPath) {\r\n    semver = require(settings.semverPath);\r\n  }\r\n  // Return the normalized context\r\n  return context as IPnpmfileContext;\r\n}\r\n\r\n// Set the preferred versions on the dependency map. If the version on the map is an allowedAlternativeVersion\r\n// then skip it. Otherwise, check to ensure that the common version is a subset of the specified version. If\r\n// it is, then replace the specified version with the preferredVersion\r\nfunction setPreferredVersions(dependencies: { [dependencyName: string]: string } | undefined): void {\r\n  for (const [name, version] of Object.entries(dependencies || {})) {\r\n    const preferredVersion: string | undefined = allPreferredVersions?.get(name);\r\n    if (preferredVersion && !allowedAlternativeVersions?.get(name)?.has(version)) {\r\n      let preferredVersionRange: TSemver.Range | undefined;\r\n      let versionRange: TSemver.Range | undefined;\r\n      try {\r\n        preferredVersionRange = new semver!.Range(preferredVersion);\r\n        versionRange = new semver!.Range(version);\r\n      } catch {\r\n        // Swallow invalid range errors\r\n      }\r\n      if (\r\n        preferredVersionRange &&\r\n        versionRange &&\r\n        semver!.subset(preferredVersionRange, versionRange, { includePrerelease: true })\r\n      ) {\r\n        dependencies![name] = preferredVersion;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst pnpmfileShim: IPnpmfile = {\r\n  hooks: {\r\n    // Call the original pnpmfile (if it exists)\r\n    afterAllResolved: (lockfile: IPnpmShrinkwrapYaml, context: IPnpmfileContext) => {\r\n      context = init(context);\r\n      return userPnpmfile?.hooks?.afterAllResolved\r\n        ? userPnpmfile.hooks.afterAllResolved(lockfile, context)\r\n        : lockfile;\r\n    },\r\n\r\n    // Set the preferred versions in the package, then call the original pnpmfile (if it exists)\r\n    readPackage: (pkg: IPackageJson, context: IPnpmfileContext) => {\r\n      context = init(context);\r\n      setPreferredVersions(pkg.dependencies);\r\n      setPreferredVersions(pkg.devDependencies);\r\n      setPreferredVersions(pkg.optionalDependencies);\r\n      return userPnpmfile?.hooks?.readPackage ? userPnpmfile.hooks.readPackage(pkg, context) : pkg;\r\n    }\r\n  }\r\n};\r\n\r\nexport = pnpmfileShim;\r\n"]}