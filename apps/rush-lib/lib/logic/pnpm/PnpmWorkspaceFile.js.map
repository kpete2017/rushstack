{"version":3,"file":"PnpmWorkspaceFile.js","sourceRoot":"","sources":["../../../src/logic/pnpm/PnpmWorkspaceFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,oEAAkE;AAElE,iEAA8D;AAC9D,qDAA+D;AAE/D,MAAM,UAAU,GAA6B,0BAAM,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAE7E,MAAM,UAAU,GAAkC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,uCAAuC;AAgBjH,MAAa,iBAAkB,SAAQ,qCAAiB;IAQtD;;;OAGG;IACH,YAAmB,qBAA6B;QAC9C,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,iBAAiB,GAAG,qBAAqB,CAAC;QAC/C,gGAAgG;QAChG,qGAAqG;QACrG,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,EAAU,CAAC;IAC9C,CAAC;IAED,gBAAgB;IACT,UAAU,CAAC,WAAmB;QACnC,8DAA8D;QAC9D,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;YAChC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,WAAW,CAAC,CAAC;SAChF;QAED,kCAAkC;QAClC,MAAM,QAAQ,GAAW,wBAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC5D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,gBAAgB;IACN,SAAS;QACjB,4CAA4C;QAC5C,wBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAEtC,MAAM,aAAa,GAAuB;YACxC,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC;SAC9C,CAAC;QACF,OAAO,UAAU,CAAC,QAAQ,CAAC,aAAa,EAAE,4CAA2B,CAAC,CAAC;IACzE,CAAC;CACF;AA3CD,8CA2CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Sort, Import, Path } from '@rushstack/node-core-library';\r\n\r\nimport { BaseWorkspaceFile } from '../base/BaseWorkspaceFile';\r\nimport { PNPM_SHRINKWRAP_YAML_FORMAT } from './PnpmYamlCommon';\r\n\r\nconst yamlModule: typeof import('js-yaml') = Import.lazy('js-yaml', require);\r\n\r\nconst globEscape: (unescaped: string) => string = require('glob-escape'); // No @types/glob-escape package exists\r\n\r\n/**\r\n * This interface represents the raw pnpm-workspace.YAML file\r\n * Example:\r\n *  {\r\n *    \"packages\": [\r\n *      \"../../apps/project1\"\r\n *    ]\r\n *  }\r\n */\r\ninterface IPnpmWorkspaceYaml {\r\n  /** The list of local package directories */\r\n  packages: string[];\r\n}\r\n\r\nexport class PnpmWorkspaceFile extends BaseWorkspaceFile {\r\n  /**\r\n   * The filename of the workspace file.\r\n   */\r\n  public readonly workspaceFilename: string;\r\n\r\n  private _workspacePackages: Set<string>;\r\n\r\n  /**\r\n   * The PNPM workspace file is used to specify the location of workspaces relative to the root\r\n   * of your PNPM install.\r\n   */\r\n  public constructor(workspaceYamlFilename: string) {\r\n    super();\r\n\r\n    this.workspaceFilename = workspaceYamlFilename;\r\n    // Ignore any existing file since this file is generated and we need to handle deleting packages\r\n    // If we need to support manual customization, that should be an additional parameter for \"base file\"\r\n    this._workspacePackages = new Set<string>();\r\n  }\r\n\r\n  /** @override */\r\n  public addPackage(packagePath: string): void {\r\n    // Ensure the path is relative to the pnpm-workspace.yaml file\r\n    if (path.isAbsolute(packagePath)) {\r\n      packagePath = path.relative(path.dirname(this.workspaceFilename), packagePath);\r\n    }\r\n\r\n    // Glob can't handle Windows paths\r\n    const globPath: string = Path.convertToSlashes(packagePath);\r\n    this._workspacePackages.add(globEscape(globPath));\r\n  }\r\n\r\n  /** @override */\r\n  protected serialize(): string {\r\n    // Ensure stable sort order when serializing\r\n    Sort.sortSet(this._workspacePackages);\r\n\r\n    const workspaceYaml: IPnpmWorkspaceYaml = {\r\n      packages: Array.from(this._workspacePackages)\r\n    };\r\n    return yamlModule.safeDump(workspaceYaml, PNPM_SHRINKWRAP_YAML_FORMAT);\r\n  }\r\n}\r\n"]}