{"version":3,"file":"WorkspaceInstallManager.js","sourceRoot":"","sources":["../../../src/logic/installManager/WorkspaceInstallManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors/safe';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport { FileSystem, FileConstants, AlreadyReportedError } from '@rushstack/node-core-library';\r\n\r\nimport { BaseInstallManager, IInstallManagerOptions } from '../base/BaseInstallManager';\r\nimport { BaseShrinkwrapFile } from '../../logic/base/BaseShrinkwrapFile';\r\nimport { DependencySpecifier, DependencySpecifierType } from '../DependencySpecifier';\r\nimport { PackageJsonEditor, DependencyType } from '../../api/PackageJsonEditor';\r\nimport { PnpmWorkspaceFile } from '../pnpm/PnpmWorkspaceFile';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { RushConstants } from '../../logic/RushConstants';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { InstallHelpers } from './InstallHelpers';\r\nimport { CommonVersionsConfiguration } from '../../api/CommonVersionsConfiguration';\r\nimport { RepoStateFile } from '../RepoStateFile';\r\nimport { LastLinkFlagFactory } from '../../api/LastLinkFlag';\r\nimport { EnvironmentConfiguration } from '../../api/EnvironmentConfiguration';\r\nimport { ShrinkwrapFileFactory } from '../ShrinkwrapFileFactory';\r\n\r\n/**\r\n * This class implements common logic between \"rush install\" and \"rush update\".\r\n */\r\nexport class WorkspaceInstallManager extends BaseInstallManager {\r\n  /**\r\n   * @override\r\n   */\r\n  public async doInstallAsync(): Promise<void> {\r\n    // TODO: Remove when \"rush link\" and \"rush unlink\" are deprecated\r\n    if (this.options.noLink) {\r\n      console.log(\r\n        colors.red(\r\n          'The \"--no-link\" option was provided but is not supported when using workspaces. Run the command again ' +\r\n            'without specifying this argument.'\r\n        )\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n\r\n    await super.doInstallAsync();\r\n  }\r\n\r\n  /**\r\n   * Regenerates the common/temp/package.json and related workspace files.\r\n   * If shrinkwrapFile is provided, this function also validates whether it contains\r\n   * everything we need to install and returns true if so; in all other cases,\r\n   * the return value is false.\r\n   *\r\n   * @override\r\n   */\r\n  protected async prepareCommonTempAsync(\r\n    shrinkwrapFile: BaseShrinkwrapFile | undefined\r\n  ): Promise<{ shrinkwrapIsUpToDate: boolean; shrinkwrapWarnings: string[] }> {\r\n    // Block use of the RUSH_TEMP_FOLDER environment variable\r\n    if (EnvironmentConfiguration.rushTempFolderOverride !== undefined) {\r\n      throw new Error(\r\n        'The RUSH_TEMP_FOLDER environment variable is not compatible with workspace installs. If attempting ' +\r\n          'to move the PNPM store path, see the `RUSH_PNPM_STORE_PATH` environment variable.'\r\n      );\r\n    }\r\n\r\n    console.log(\r\n      os.EOL + colors.bold('Updating workspace files in ' + this.rushConfiguration.commonTempFolder)\r\n    );\r\n\r\n    const shrinkwrapWarnings: string[] = [];\r\n\r\n    // We will start with the assumption that it's valid, and then set it to false if\r\n    // any of the checks fail\r\n    let shrinkwrapIsUpToDate: boolean = true;\r\n\r\n    if (!shrinkwrapFile) {\r\n      shrinkwrapIsUpToDate = false;\r\n    } else {\r\n      if (!shrinkwrapFile.isWorkspaceCompatible && !this.options.fullUpgrade) {\r\n        console.log();\r\n        console.log(\r\n          colors.red(\r\n            'The shrinkwrap file has not been updated to support workspaces. Run \"rush update --full\" to update ' +\r\n              'the shrinkwrap file.'\r\n          )\r\n        );\r\n        throw new AlreadyReportedError();\r\n      }\r\n\r\n      // If there are orphaned projects, we need to update\r\n      const orphanedProjects: ReadonlyArray<string> = shrinkwrapFile.findOrphanedProjects(\r\n        this.rushConfiguration\r\n      );\r\n      if (orphanedProjects.length > 0) {\r\n        for (const orhpanedProject of orphanedProjects) {\r\n          shrinkwrapWarnings.push(\r\n            `Your ${this.rushConfiguration.shrinkwrapFilePhrase} references \"${orhpanedProject}\" ` +\r\n              'which was not found in rush.json'\r\n          );\r\n        }\r\n        shrinkwrapIsUpToDate = false;\r\n      }\r\n    }\r\n\r\n    // If preferred versions have been updated, or if the repo-state.json is invalid,\r\n    // we can't be certain of the state of the shrinkwrap\r\n    const repoState: RepoStateFile = this.rushConfiguration.getRepoState(this.options.variant);\r\n    if (!repoState.isValid) {\r\n      shrinkwrapWarnings.push(\r\n        `The ${RushConstants.repoStateFilename} file is invalid. There may be a merge conflict marker in the file.`\r\n      );\r\n      shrinkwrapIsUpToDate = false;\r\n    } else {\r\n      const commonVersions: CommonVersionsConfiguration = this.rushConfiguration.getCommonVersions(\r\n        this.options.variant\r\n      );\r\n      if (repoState.preferredVersionsHash !== commonVersions.getPreferredVersionsHash()) {\r\n        shrinkwrapWarnings.push(\r\n          `Preferred versions from ${RushConstants.commonVersionsFilename} have been modified.`\r\n        );\r\n        shrinkwrapIsUpToDate = false;\r\n      }\r\n    }\r\n\r\n    // To generate the workspace file, we will add each project to the file as we loop through and validate\r\n    const workspaceFile: PnpmWorkspaceFile = new PnpmWorkspaceFile(\r\n      path.join(this.rushConfiguration.commonTempFolder, 'pnpm-workspace.yaml')\r\n    );\r\n\r\n    // Loop through the projects and add them to the workspace file. While we're at it, also validate that\r\n    // referenced workspace projects are valid, and check if the shrinkwrap file is already up-to-date.\r\n    for (const rushProject of this.rushConfiguration.projects) {\r\n      const packageJson: PackageJsonEditor = rushProject.packageJsonEditor;\r\n      workspaceFile.addPackage(rushProject.projectFolder);\r\n\r\n      for (const { name, version, dependencyType } of [\r\n        ...packageJson.dependencyList,\r\n        ...packageJson.devDependencyList\r\n      ]) {\r\n        // Allow the package manager to handle peer dependency resolution, since this is simply a constraint\r\n        // enforced by the package manager. Additionally, peer dependencies are simply a version constraint\r\n        // and do not need to be converted to workspaces protocol.\r\n        if (dependencyType === DependencyType.Peer) {\r\n          continue;\r\n        }\r\n\r\n        const dependencySpecifier: DependencySpecifier = new DependencySpecifier(name, version);\r\n\r\n        // Is there a locally built Rush project that could satisfy this dependency?\r\n        const referencedLocalProject: RushConfigurationProject | undefined =\r\n          this.rushConfiguration.getProjectByName(name);\r\n\r\n        // Validate that local projects are referenced with workspace notation. If not, and it is not a\r\n        // cyclic dependency, then it needs to be updated to specify `workspace:*` explicitly. Currently only\r\n        // supporting versions and version ranges for specifying a local project.\r\n        if (\r\n          (dependencySpecifier.specifierType === DependencySpecifierType.Version ||\r\n            dependencySpecifier.specifierType === DependencySpecifierType.Range) &&\r\n          referencedLocalProject &&\r\n          !rushProject.cyclicDependencyProjects.has(name)\r\n        ) {\r\n          // Make sure that this version is intended to target a local package. If not, then we will fail since it\r\n          // is not explicitly specified as a cyclic dependency.\r\n          if (\r\n            !semver.satisfies(\r\n              referencedLocalProject.packageJsonEditor.version,\r\n              dependencySpecifier.versionSpecifier\r\n            )\r\n          ) {\r\n            console.log();\r\n            console.log(\r\n              colors.red(\r\n                `\"${rushProject.packageName}\" depends on package \"${name}\" (${version}) which exists ` +\r\n                  'within the workspace but cannot be fulfilled with the specified version range. Either ' +\r\n                  'specify a valid version range, or add the package as a cyclic dependency.'\r\n              )\r\n            );\r\n            throw new AlreadyReportedError();\r\n          }\r\n\r\n          if (!this.options.allowShrinkwrapUpdates) {\r\n            console.log();\r\n            console.log(\r\n              colors.red(\r\n                `\"${rushProject.packageName}\" depends on package \"${name}\" (${version}) which exists within ` +\r\n                  'the workspace. Run \"rush update\" to update workspace references for this package.'\r\n              )\r\n            );\r\n            throw new AlreadyReportedError();\r\n          }\r\n\r\n          if (this.options.fullUpgrade) {\r\n            // We will update to `workspace` notation. If the version specified is a range, then use the provided range.\r\n            // Otherwise, use `workspace:*` to ensure we're always using the workspace package.\r\n            const workspaceRange: string =\r\n              !!semver.validRange(dependencySpecifier.versionSpecifier) &&\r\n              !semver.valid(dependencySpecifier.versionSpecifier)\r\n                ? dependencySpecifier.versionSpecifier\r\n                : '*';\r\n            packageJson.addOrUpdateDependency(name, `workspace:${workspaceRange}`, dependencyType);\r\n            shrinkwrapIsUpToDate = false;\r\n            continue;\r\n          }\r\n        } else if (dependencySpecifier.specifierType === DependencySpecifierType.Workspace) {\r\n          // Already specified as a local project. Allow the package manager to validate this\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Save the package.json if we modified the version references and warn that the package.json was modified\r\n      if (packageJson.saveIfModified()) {\r\n        console.log(\r\n          colors.yellow(\r\n            `\"${rushProject.packageName}\" depends on one or more workspace packages which did not use \"workspace:\" ` +\r\n              'notation. The package.json has been modified and must be committed to source control.'\r\n          )\r\n        );\r\n      }\r\n\r\n      // Now validate that the shrinkwrap file matches what is in the package.json\r\n      if (shrinkwrapFile?.isWorkspaceProjectModified(rushProject, this.options.variant)) {\r\n        shrinkwrapWarnings.push(\r\n          `Dependencies of project \"${rushProject.packageName}\" do not match the current shinkwrap.`\r\n        );\r\n        shrinkwrapIsUpToDate = false;\r\n      }\r\n    }\r\n\r\n    // Write the common package.json\r\n    InstallHelpers.generateCommonPackageJson(this.rushConfiguration);\r\n\r\n    // Save the generated workspace file. Don't update the file timestamp unless the content has changed,\r\n    // since \"rush install\" will consider this timestamp\r\n    workspaceFile.save(workspaceFile.workspaceFilename, { onlyIfChanged: true });\r\n\r\n    return { shrinkwrapIsUpToDate, shrinkwrapWarnings };\r\n  }\r\n\r\n  protected canSkipInstall(lastModifiedDate: Date): boolean {\r\n    if (!super.canSkipInstall(lastModifiedDate)) {\r\n      return false;\r\n    }\r\n\r\n    const potentiallyChangedFiles: string[] = [];\r\n\r\n    if (this.rushConfiguration.packageManager === 'pnpm') {\r\n      // Add workspace file. This file is only modified when workspace packages change.\r\n      const pnpmWorkspaceFilename: string = path.join(\r\n        this.rushConfiguration.commonTempFolder,\r\n        'pnpm-workspace.yaml'\r\n      );\r\n\r\n      if (FileSystem.exists(pnpmWorkspaceFilename)) {\r\n        potentiallyChangedFiles.push(pnpmWorkspaceFilename);\r\n      }\r\n    }\r\n\r\n    // Also consider timestamps for all the project node_modules folders, as well as the package.json\r\n    // files\r\n    // Example: [ \"C:\\MyRepo\\projects\\projectA\\node_modules\", \"C:\\MyRepo\\projects\\projectA\\package.json\" ]\r\n    potentiallyChangedFiles.push(\r\n      ...this.rushConfiguration.projects.map((x) => {\r\n        return path.join(x.projectFolder, RushConstants.nodeModulesFolderName);\r\n      }),\r\n      ...this.rushConfiguration.projects.map((x) => {\r\n        return path.join(x.projectFolder, FileConstants.PackageJson);\r\n      })\r\n    );\r\n\r\n    // NOTE: If any of the potentiallyChangedFiles does not exist, then isFileTimestampCurrent()\r\n    // returns false.\r\n    return Utilities.isFileTimestampCurrent(lastModifiedDate, potentiallyChangedFiles);\r\n  }\r\n\r\n  /**\r\n   * Runs \"npm install\" in the common folder.\r\n   */\r\n  protected async installAsync(cleanInstall: boolean): Promise<void> {\r\n    // Example: \"C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm\"\r\n    const packageManagerFilename: string = this.rushConfiguration.packageManagerToolFilename;\r\n\r\n    const packageManagerEnv: NodeJS.ProcessEnv = InstallHelpers.getPackageManagerEnvironment(\r\n      this.rushConfiguration,\r\n      this.options\r\n    );\r\n\r\n    const commonNodeModulesFolder: string = path.join(\r\n      this.rushConfiguration.commonTempFolder,\r\n      RushConstants.nodeModulesFolderName\r\n    );\r\n\r\n    // Is there an existing \"node_modules\" folder to consider?\r\n    if (FileSystem.exists(commonNodeModulesFolder)) {\r\n      // Should we delete the entire \"node_modules\" folder?\r\n      if (cleanInstall) {\r\n        // YES: Delete \"node_modules\"\r\n\r\n        // Explain to the user why we are hosing their node_modules folder\r\n        console.log('Deleting files from ' + commonNodeModulesFolder);\r\n\r\n        this.installRecycler.moveFolder(commonNodeModulesFolder);\r\n\r\n        Utilities.createFolderWithRetry(commonNodeModulesFolder);\r\n      }\r\n    }\r\n\r\n    // Run \"npm install\" in the common folder\r\n    const installArgs: string[] = ['install'];\r\n    this.pushConfigurationArgs(installArgs, this.options);\r\n\r\n    console.log(\r\n      os.EOL +\r\n        colors.bold(\r\n          `Running \"${this.rushConfiguration.packageManager} install\" in` +\r\n            ` ${this.rushConfiguration.commonTempFolder}`\r\n        ) +\r\n        os.EOL\r\n    );\r\n\r\n    // If any diagnostic options were specified, then show the full command-line\r\n    if (this.options.debug || this.options.collectLogFile || this.options.networkConcurrency) {\r\n      console.log(\r\n        os.EOL +\r\n          colors.green('Invoking package manager: ') +\r\n          FileSystem.getRealPath(packageManagerFilename) +\r\n          ' ' +\r\n          installArgs.join(' ') +\r\n          os.EOL\r\n      );\r\n    }\r\n\r\n    try {\r\n      Utilities.executeCommandWithRetry(\r\n        {\r\n          command: packageManagerFilename,\r\n          args: installArgs,\r\n          workingDirectory: this.rushConfiguration.commonTempFolder,\r\n          environment: packageManagerEnv,\r\n          suppressOutput: false\r\n        },\r\n        this.options.maxInstallAttempts,\r\n        () => {\r\n          if (this.rushConfiguration.packageManager === 'pnpm') {\r\n            console.log(colors.yellow(`Deleting the \"node_modules\" folder`));\r\n            this.installRecycler.moveFolder(commonNodeModulesFolder);\r\n\r\n            // Leave the pnpm-store as is for the retry. This ensures that packages that have already\r\n            // been downloaded need not be downloaded again, thereby potentially increasing the chances\r\n            // of a subsequent successful install.\r\n\r\n            Utilities.createFolderWithRetry(commonNodeModulesFolder);\r\n          }\r\n        }\r\n      );\r\n\r\n      // Ensure that node_modules folders exist after install, since the timestamps on these folders are used\r\n      // to determine if the install can be skipped\r\n      const projectNodeModulesFolders: string[] = [\r\n        path.join(this.rushConfiguration.commonTempFolder, RushConstants.nodeModulesFolderName),\r\n        ...this.rushConfiguration.projects.map((x) => {\r\n          return path.join(x.projectFolder, RushConstants.nodeModulesFolderName);\r\n        })\r\n      ];\r\n\r\n      for (const nodeModulesFolder of projectNodeModulesFolders) {\r\n        FileSystem.ensureFolder(nodeModulesFolder);\r\n      }\r\n    } catch (error) {\r\n      // All the install attempts failed.\r\n\r\n      if (\r\n        this.rushConfiguration.packageManager === 'pnpm' &&\r\n        this.rushConfiguration.pnpmOptions.pnpmStore === 'local'\r\n      ) {\r\n        // If the installation has failed even after the retries, then pnpm store may\r\n        // have got into a corrupted, irrecoverable state. Delete the store so that a\r\n        // future install can create the store afresh.\r\n        console.log(colors.yellow(`Deleting the \"pnpm-store\" folder`));\r\n        this.installRecycler.moveFolder(this.rushConfiguration.pnpmOptions.pnpmStorePath);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n\r\n    console.log('');\r\n  }\r\n\r\n  protected async postInstallAsync(): Promise<void> {\r\n    // Grab the temp shrinkwrap, as this was the most recently completed install. It may also be\r\n    // more up-to-date than the checked-in shrinkwrap since filtered installs are not written back.\r\n    const tempShrinkwrapFile: BaseShrinkwrapFile = ShrinkwrapFileFactory.getShrinkwrapFile(\r\n      this.rushConfiguration.packageManager,\r\n      this.rushConfiguration.pnpmOptions,\r\n      this.rushConfiguration.tempShrinkwrapFilename\r\n    )!;\r\n\r\n    // Write or delete all project shrinkwraps related to the install\r\n    await Promise.all(\r\n      this.rushConfiguration.projects.map(async (x) => {\r\n        await tempShrinkwrapFile.getProjectShrinkwrap(x)?.updateProjectShrinkwrapAsync();\r\n      })\r\n    );\r\n\r\n    // TODO: Remove when \"rush link\" and \"rush unlink\" are deprecated\r\n    LastLinkFlagFactory.getCommonTempFlag(this.rushConfiguration).create();\r\n  }\r\n\r\n  /**\r\n   * Used when invoking the NPM tool.  Appends the common configuration options\r\n   * to the command-line.\r\n   */\r\n  protected pushConfigurationArgs(args: string[], options: IInstallManagerOptions): void {\r\n    super.pushConfigurationArgs(args, options);\r\n\r\n    // Add workspace-specific args\r\n    if (this.rushConfiguration.packageManager === 'pnpm') {\r\n      args.push('--recursive');\r\n      args.push('--link-workspace-packages', 'false');\r\n\r\n      for (const arg of this.options.pnpmFilterArguments) {\r\n        args.push(arg);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}