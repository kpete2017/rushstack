{"version":3,"file":"TaskCollection.test.js","sourceRoot":"","sources":["../../../../src/logic/taskRunner/test/TaskCollection.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TaskCollection } from '../TaskCollection';\r\nimport { Task } from '../Task';\r\nimport { StringBufferTerminalProvider } from '@rushstack/node-core-library';\r\nimport { MockBuilder } from './MockBuilder';\r\nimport { TaskStatus } from '../TaskStatus';\r\n\r\nfunction checkConsoleOutput(terminalProvider: StringBufferTerminalProvider): void {\r\n  expect(terminalProvider.getOutput()).toMatchSnapshot();\r\n  expect(terminalProvider.getVerbose()).toMatchSnapshot();\r\n  expect(terminalProvider.getWarningOutput()).toMatchSnapshot();\r\n  expect(terminalProvider.getErrorOutput()).toMatchSnapshot();\r\n}\r\n\r\ndescribe('TaskCollection', () => {\r\n  let terminalProvider: StringBufferTerminalProvider;\r\n  let taskCollection: TaskCollection;\r\n\r\n  beforeEach(() => {\r\n    terminalProvider = new StringBufferTerminalProvider(true);\r\n  });\r\n\r\n  describe('Dependencies', () => {\r\n    beforeEach(() => {\r\n      taskCollection = new TaskCollection();\r\n    });\r\n\r\n    it('throwsErrorOnNonExistentTask', () => {\r\n      expect(() => taskCollection.addDependencies('foo', [])).toThrowErrorMatchingSnapshot();\r\n    });\r\n\r\n    it('throwsErrorOnNonExistentDependency', () => {\r\n      taskCollection.addTask(new MockBuilder('foo'));\r\n      expect(() => taskCollection.addDependencies('foo', ['bar'])).toThrowErrorMatchingSnapshot();\r\n    });\r\n\r\n    it('detectsDependencyCycle', () => {\r\n      taskCollection.addTask(new MockBuilder('foo'));\r\n      taskCollection.addTask(new MockBuilder('bar'));\r\n      taskCollection.addDependencies('foo', ['bar']);\r\n      taskCollection.addDependencies('bar', ['foo']);\r\n      expect(() => taskCollection.getOrderedTasks()).toThrowErrorMatchingSnapshot();\r\n    });\r\n\r\n    it('respectsDependencyOrder', () => {\r\n      const result: string[] = [];\r\n      taskCollection.addTask(\r\n        new MockBuilder('two', async () => {\r\n          result.push('2');\r\n          return TaskStatus.Success;\r\n        })\r\n      );\r\n      taskCollection.addTask(\r\n        new MockBuilder('one', async () => {\r\n          result.push('1');\r\n          return TaskStatus.Success;\r\n        })\r\n      );\r\n      taskCollection.addDependencies('two', ['one']);\r\n\r\n      const tasks: Task[] = taskCollection.getOrderedTasks();\r\n      expect(tasks.map((t) => t.name).join(',')).toEqual('one,two');\r\n      checkConsoleOutput(terminalProvider);\r\n    });\r\n  });\r\n\r\n  describe('Error logging', () => {\r\n    beforeEach(() => {\r\n      taskCollection = new TaskCollection();\r\n    });\r\n  });\r\n});\r\n"]}