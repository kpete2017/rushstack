{"version":3,"file":"TaskRunner.test.js","sourceRoot":"","sources":["../../../../src/logic/taskRunner/test/TaskRunner.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n// The TaskRunner prints \"x.xx seconds\" in TestRunner.test.ts.snap; ensure that the Stopwatch timing is deterministic\r\njest.mock('../../../utilities/Utilities');\r\n\r\nimport colors from 'colors/safe';\r\nimport { EOL } from 'os';\r\nimport { CollatedTerminal } from '@rushstack/stream-collator';\r\nimport { MockWritable } from '@rushstack/terminal';\r\n\r\nimport { TaskRunner, ITaskRunnerOptions } from '../TaskRunner';\r\nimport { TaskStatus } from '../TaskStatus';\r\nimport { Task } from '../Task';\r\nimport { Utilities } from '../../../utilities/Utilities';\r\nimport { BaseBuilder } from '../BaseBuilder';\r\nimport { MockBuilder } from './MockBuilder';\r\n\r\nconst mockGetTimeInMs: jest.Mock = jest.fn();\r\nUtilities.getTimeInMs = mockGetTimeInMs;\r\n\r\nlet mockTimeInMs: number = 0;\r\nmockGetTimeInMs.mockImplementation(() => {\r\n  console.log('CALLED mockGetTimeInMs');\r\n  mockTimeInMs += 100;\r\n  return mockTimeInMs;\r\n});\r\n\r\nconst mockWritable: MockWritable = new MockWritable();\r\n\r\nfunction createTaskRunner(taskRunnerOptions: ITaskRunnerOptions, builder: BaseBuilder): TaskRunner {\r\n  const task: Task = new Task(builder, TaskStatus.Ready);\r\n\r\n  return new TaskRunner([task], taskRunnerOptions);\r\n}\r\n\r\nconst EXPECTED_FAIL: string = `Promise returned by ${TaskRunner.prototype.executeAsync.name}() resolved but was expected to fail`;\r\n\r\ndescribe('TaskRunner', () => {\r\n  let taskRunner: TaskRunner;\r\n  let taskRunnerOptions: ITaskRunnerOptions;\r\n\r\n  let initialColorsEnabled: boolean;\r\n\r\n  beforeAll(() => {\r\n    initialColorsEnabled = colors.enabled;\r\n    colors.enable();\r\n  });\r\n\r\n  afterAll(() => {\r\n    if (!initialColorsEnabled) {\r\n      colors.disable();\r\n    }\r\n  });\r\n\r\n  beforeEach(() => {\r\n    mockWritable.reset();\r\n  });\r\n\r\n  describe('Constructor', () => {\r\n    it('throwsErrorOnInvalidParallelism', () => {\r\n      expect(\r\n        () =>\r\n          new TaskRunner([], {\r\n            quietMode: false,\r\n            parallelism: 'tequila',\r\n            changedProjectsOnly: false,\r\n            destination: mockWritable,\r\n            allowWarningsInSuccessfulBuild: false,\r\n            repoCommandLineConfiguration: undefined\r\n          })\r\n      ).toThrowErrorMatchingSnapshot();\r\n    });\r\n  });\r\n\r\n  describe('Error logging', () => {\r\n    beforeEach(() => {\r\n      taskRunnerOptions = {\r\n        quietMode: false,\r\n        parallelism: '1',\r\n        changedProjectsOnly: false,\r\n        destination: mockWritable,\r\n        allowWarningsInSuccessfulBuild: false,\r\n        repoCommandLineConfiguration: undefined\r\n      };\r\n    });\r\n\r\n    it('printedStderrAfterError', async () => {\r\n      taskRunner = createTaskRunner(\r\n        taskRunnerOptions,\r\n        new MockBuilder('stdout+stderr', async (terminal: CollatedTerminal) => {\r\n          terminal.writeStdoutLine('Build step 1' + EOL);\r\n          terminal.writeStderrLine('Error: step 1 failed' + EOL);\r\n          return TaskStatus.Failure;\r\n        })\r\n      );\r\n\r\n      try {\r\n        await taskRunner.executeAsync();\r\n        fail(EXPECTED_FAIL);\r\n      } catch (err) {\r\n        expect(err.message).toMatchSnapshot();\r\n        const allMessages: string = mockWritable.getAllOutput();\r\n        expect(allMessages).toContain('Error: step 1 failed');\r\n        expect(mockWritable.getFormattedChunks()).toMatchSnapshot();\r\n      }\r\n    });\r\n\r\n    it('printedStdoutAfterErrorWithEmptyStderr', async () => {\r\n      taskRunner = createTaskRunner(\r\n        taskRunnerOptions,\r\n        new MockBuilder('stdout only', async (terminal: CollatedTerminal) => {\r\n          terminal.writeStdoutLine('Build step 1' + EOL);\r\n          terminal.writeStdoutLine('Error: step 1 failed' + EOL);\r\n          return TaskStatus.Failure;\r\n        })\r\n      );\r\n\r\n      try {\r\n        await taskRunner.executeAsync();\r\n        fail(EXPECTED_FAIL);\r\n      } catch (err) {\r\n        expect(err.message).toMatchSnapshot();\r\n        const allOutput: string = mockWritable.getAllOutput();\r\n        expect(allOutput).toMatch(/Build step 1/);\r\n        expect(allOutput).toMatch(/Error: step 1 failed/);\r\n        expect(mockWritable.getFormattedChunks()).toMatchSnapshot();\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Warning logging', () => {\r\n    describe('Fail on warning', () => {\r\n      beforeEach(() => {\r\n        taskRunnerOptions = {\r\n          quietMode: false,\r\n          parallelism: '1',\r\n          changedProjectsOnly: false,\r\n          destination: mockWritable,\r\n          allowWarningsInSuccessfulBuild: false,\r\n          repoCommandLineConfiguration: undefined\r\n        };\r\n      });\r\n\r\n      it('Logs warnings correctly', async () => {\r\n        taskRunner = createTaskRunner(\r\n          taskRunnerOptions,\r\n          new MockBuilder('success with warnings (failure)', async (terminal: CollatedTerminal) => {\r\n            terminal.writeStdoutLine('Build step 1' + EOL);\r\n            terminal.writeStdoutLine('Warning: step 1 succeeded with warnings' + EOL);\r\n            return TaskStatus.SuccessWithWarning;\r\n          })\r\n        );\r\n\r\n        try {\r\n          await taskRunner.executeAsync();\r\n          fail(EXPECTED_FAIL);\r\n        } catch (err) {\r\n          expect(err.message).toMatchSnapshot();\r\n          const allMessages: string = mockWritable.getAllOutput();\r\n          expect(allMessages).toContain('Build step 1');\r\n          expect(allMessages).toContain('step 1 succeeded with warnings');\r\n          expect(mockWritable.getFormattedChunks()).toMatchSnapshot();\r\n        }\r\n      });\r\n    });\r\n\r\n    describe('Success on warning', () => {\r\n      beforeEach(() => {\r\n        taskRunnerOptions = {\r\n          quietMode: false,\r\n          parallelism: '1',\r\n          changedProjectsOnly: false,\r\n          destination: mockWritable,\r\n          allowWarningsInSuccessfulBuild: true,\r\n          repoCommandLineConfiguration: undefined\r\n        };\r\n      });\r\n\r\n      it('Logs warnings correctly', async () => {\r\n        taskRunner = createTaskRunner(\r\n          taskRunnerOptions,\r\n          new MockBuilder('success with warnings (success)', async (terminal: CollatedTerminal) => {\r\n            terminal.writeStdoutLine('Build step 1' + EOL);\r\n            terminal.writeStdoutLine('Warning: step 1 succeeded with warnings' + EOL);\r\n            return TaskStatus.SuccessWithWarning;\r\n          })\r\n        );\r\n\r\n        await taskRunner.executeAsync();\r\n        const allMessages: string = mockWritable.getAllOutput();\r\n        expect(allMessages).toContain('Build step 1');\r\n        expect(allMessages).toContain('Warning: step 1 succeeded with warnings');\r\n        expect(mockWritable.getFormattedChunks()).toMatchSnapshot();\r\n      });\r\n    });\r\n  });\r\n});\r\n"]}