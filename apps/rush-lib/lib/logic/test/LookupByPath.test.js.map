{"version":3,"file":"LookupByPath.test.js","sourceRoot":"","sources":["../../../src/logic/test/LookupByPath.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { LookupByPath } from '../LookupByPath';\r\n\r\ndescribe('iteratePathSegments', () => {\r\n  it('returns empty for an empty string', () => {\r\n    const result = [...LookupByPath.iteratePathSegments('')];\r\n    expect(result.length).toEqual(0);\r\n  });\r\n  it('returns the only segment of a trival string', () => {\r\n    const result = [...LookupByPath.iteratePathSegments('foo')];\r\n    expect(result).toEqual(['foo']);\r\n  });\r\n  it('treats backslashes as ordinary characters, per POSIX', () => {\r\n    const result = [...LookupByPath.iteratePathSegments('foo\\\\bar\\\\baz')];\r\n    expect(result).toEqual(['foo\\\\bar\\\\baz']);\r\n  });\r\n  it('iterates segments', () => {\r\n    const result = [...LookupByPath.iteratePathSegments('foo/bar/baz')];\r\n    expect(result).toEqual(['foo', 'bar', 'baz']);\r\n  });\r\n});\r\n\r\ndescribe('findChildPath', () => {\r\n  it('returns empty for an empty tree', () => {\r\n    expect(new LookupByPath().findChildPath('foo')).toEqual(undefined);\r\n  });\r\n  it('returns the matching node for a trivial tree', () => {\r\n    expect(new LookupByPath([['foo', 1]]).findChildPath('foo')).toEqual(1);\r\n  });\r\n  it('returns the matching node for a single-layer tree', () => {\r\n    const tree: LookupByPath<number> = new LookupByPath([\r\n      ['foo', 1],\r\n      ['bar', 2],\r\n      ['baz', 3]\r\n    ]);\r\n\r\n    expect(tree.findChildPath('foo')).toEqual(1);\r\n    expect(tree.findChildPath('bar')).toEqual(2);\r\n    expect(tree.findChildPath('baz')).toEqual(3);\r\n    expect(tree.findChildPath('buzz')).toEqual(undefined);\r\n  });\r\n  it('returns the matching parent for multi-layer queries', () => {\r\n    const tree: LookupByPath<number> = new LookupByPath([\r\n      ['foo', 1],\r\n      ['bar', 2],\r\n      ['baz', 3]\r\n    ]);\r\n\r\n    expect(tree.findChildPath('foo/bar')).toEqual(1);\r\n    expect(tree.findChildPath('bar/baz')).toEqual(2);\r\n    expect(tree.findChildPath('baz/foo')).toEqual(3);\r\n    expect(tree.findChildPath('foo/foo')).toEqual(1);\r\n  });\r\n  it('returns the matching parent for multi-layer queries in multi-layer trees', () => {\r\n    const tree: LookupByPath<number> = new LookupByPath([\r\n      ['foo', 1],\r\n      ['bar', 2],\r\n      ['baz', 3],\r\n      ['foo/bar', 4],\r\n      ['foo/bar/baz', 5],\r\n      ['baz/foo', 6],\r\n      ['baz/baz/baz/baz', 7]\r\n    ]);\r\n\r\n    expect(tree.findChildPath('foo/foo')).toEqual(1);\r\n    expect(tree.findChildPath('foo/bar\\\\baz')).toEqual(1);\r\n\r\n    expect(tree.findChildPath('bar/baz')).toEqual(2);\r\n\r\n    expect(tree.findChildPath('baz/bar')).toEqual(3);\r\n    expect(tree.findChildPath('baz/baz')).toEqual(3);\r\n    expect(tree.findChildPath('baz/baz/baz')).toEqual(3);\r\n\r\n    expect(tree.findChildPath('foo/bar')).toEqual(4);\r\n    expect(tree.findChildPath('foo/bar/foo')).toEqual(4);\r\n\r\n    expect(tree.findChildPath('foo/bar/baz')).toEqual(5);\r\n    expect(tree.findChildPath('foo/bar/baz/baz/baz/baz/baz')).toEqual(5);\r\n\r\n    expect(tree.findChildPath('baz/foo/')).toEqual(6);\r\n\r\n    expect(tree.findChildPath('baz/baz/baz/baz')).toEqual(7);\r\n\r\n    expect(tree.findChildPath('')).toEqual(undefined);\r\n    expect(tree.findChildPath('foofoo')).toEqual(undefined);\r\n    expect(tree.findChildPath('foo\\\\bar\\\\baz')).toEqual(undefined);\r\n  });\r\n  it('handles custom delimiters', () => {\r\n    const tree: LookupByPath<number> = new LookupByPath(\r\n      [\r\n        ['foo,bar', 1],\r\n        ['foo/bar', 2]\r\n      ],\r\n      ','\r\n    );\r\n\r\n    expect(tree.findChildPath('foo/bar,baz')).toEqual(2);\r\n    expect(tree.findChildPath('foo,bar/baz')).toEqual(undefined);\r\n    expect(tree.findChildPathFromSegments(['foo', 'bar', 'baz'])).toEqual(1);\r\n  });\r\n});\r\n"]}