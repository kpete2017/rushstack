{"version":3,"file":"Selection.test.js","sourceRoot":"","sources":["../../../src/logic/test/Selection.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IPartialProject, Selection } from '../Selection';\r\n\r\nconst { union, intersection, expandAllDependencies, expandAllConsumers } = Selection;\r\n\r\ninterface ISimpleGraphable extends IPartialProject<ISimpleGraphable> {\r\n  consumingProjects: Set<ISimpleGraphable>;\r\n  toString(): string;\r\n}\r\n\r\nconst projectA: ISimpleGraphable = {\r\n  dependencyProjects: new Set(),\r\n  consumingProjects: new Set(),\r\n  toString() {\r\n    return 'A';\r\n  }\r\n};\r\nconst projectB: ISimpleGraphable = {\r\n  dependencyProjects: new Set(),\r\n  consumingProjects: new Set(),\r\n  toString() {\r\n    return 'B';\r\n  }\r\n};\r\nconst projectC: ISimpleGraphable = {\r\n  dependencyProjects: new Set(),\r\n  consumingProjects: new Set(),\r\n  toString() {\r\n    return 'C';\r\n  }\r\n};\r\nconst projectD: ISimpleGraphable = {\r\n  dependencyProjects: new Set([projectA, projectB]),\r\n  consumingProjects: new Set(),\r\n  toString() {\r\n    return 'D';\r\n  }\r\n};\r\nconst projectE: ISimpleGraphable = {\r\n  dependencyProjects: new Set([projectC, projectD]),\r\n  consumingProjects: new Set(),\r\n  toString() {\r\n    return 'E';\r\n  }\r\n};\r\nconst projectF: ISimpleGraphable = {\r\n  dependencyProjects: new Set([projectE]),\r\n  consumingProjects: new Set(),\r\n  toString() {\r\n    return 'F';\r\n  }\r\n};\r\nconst projectG: ISimpleGraphable = {\r\n  dependencyProjects: new Set(),\r\n  consumingProjects: new Set(),\r\n  toString() {\r\n    return 'G';\r\n  }\r\n};\r\nconst projectH: ISimpleGraphable = {\r\n  dependencyProjects: new Set([projectF, projectG]),\r\n  consumingProjects: new Set(),\r\n  toString() {\r\n    return 'H';\r\n  }\r\n};\r\n\r\nconst nodes: Set<ISimpleGraphable> = new Set([\r\n  projectA,\r\n  projectB,\r\n  projectC,\r\n  projectD,\r\n  projectE,\r\n  projectF,\r\n  projectG,\r\n  projectH\r\n]);\r\n\r\n// Populate the bidirectional graph\r\nfor (const node of nodes) {\r\n  for (const dep of node.dependencyProjects) {\r\n    dep.consumingProjects.add(node);\r\n  }\r\n}\r\n\r\nexpect.extend({\r\n  toMatchSet<T>(received: ReadonlySet<T>, expected: ReadonlySet<T>): jest.CustomMatcherResult {\r\n    for (const element of expected) {\r\n      if (!received.has(element)) {\r\n        return {\r\n          pass: false,\r\n          message: () => `Expected [${[...received].join(', ')}] to contain ${element}`\r\n        };\r\n      }\r\n    }\r\n    for (const element of received) {\r\n      if (!expected.has(element)) {\r\n        return {\r\n          pass: false,\r\n          message: () => `Expected [${[...received].join(', ')}] to not contain ${element}`\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      pass: true,\r\n      message: () => `Expected [${[...received].join(', ')}] to not match [${[...expected].join(', ')}]`\r\n    };\r\n  }\r\n});\r\n\r\ndeclare global {\r\n  // Disabling eslint here because it is needed for module augmentation\r\n  // eslint-disable-next-line @typescript-eslint/no-namespace\r\n  namespace jest {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface Matchers<R, T = {}> {\r\n      toMatchSet(expected: T): R;\r\n    }\r\n  }\r\n}\r\n\r\ndescribe('union', () => {\r\n  it('combines sets', () => {\r\n    const result: ReadonlySet<ISimpleGraphable> = union(\r\n      [projectA, projectB],\r\n      [projectC],\r\n      [projectA],\r\n      [projectB]\r\n    );\r\n\r\n    expect(result).toMatchSet(new Set([projectA, projectB, projectC]));\r\n  });\r\n});\r\n\r\ndescribe('intersection', () => {\r\n  it('intersects sets', () => {\r\n    const result: ReadonlySet<ISimpleGraphable> = intersection(\r\n      [projectC, projectD],\r\n      new Set([projectD, projectE, projectG, projectA]),\r\n      new Set([projectD])\r\n    );\r\n\r\n    expect(result).toMatchSet(new Set([projectD]));\r\n  });\r\n\r\n  it('will produce the empty set in nothing matches', () => {\r\n    const result: ReadonlySet<ISimpleGraphable> = intersection(\r\n      [projectC, projectD],\r\n      new Set([projectE, projectG, projectA]),\r\n      new Set([projectD])\r\n    );\r\n\r\n    expect(result).toMatchSet(new Set());\r\n  });\r\n\r\n  it('handles identical inputs', () => {\r\n    const result: ReadonlySet<ISimpleGraphable> = intersection(nodes, nodes, nodes);\r\n\r\n    expect(result).toMatchSet(nodes);\r\n  });\r\n});\r\n\r\ndescribe('expandAllDependencies', () => {\r\n  it('expands at least one level of dependencies', () => {\r\n    const result: ReadonlySet<ISimpleGraphable> = expandAllDependencies([projectD]);\r\n\r\n    expect(result).toMatchSet(new Set([projectA, projectB, projectD]));\r\n  });\r\n  it('expands all levels of dependencies', () => {\r\n    const result: ReadonlySet<ISimpleGraphable> = expandAllDependencies([projectF]);\r\n\r\n    expect(result).toMatchSet(new Set([projectA, projectB, projectC, projectD, projectE, projectF]));\r\n  });\r\n  it('handles multiple inputs', () => {\r\n    const result: ReadonlySet<ISimpleGraphable> = expandAllDependencies([projectC, projectD]);\r\n\r\n    expect(result).toMatchSet(new Set([projectA, projectB, projectC, projectD]));\r\n  });\r\n});\r\n\r\ndescribe('expandAllConsumers', () => {\r\n  it('expands at least one level of dependents', () => {\r\n    const result: ReadonlySet<ISimpleGraphable> = expandAllConsumers([projectF]);\r\n\r\n    expect(result).toMatchSet(new Set([projectF, projectH]));\r\n  });\r\n  it('expands all levels of dependents', () => {\r\n    const result: ReadonlySet<ISimpleGraphable> = expandAllConsumers([projectC]);\r\n\r\n    expect(result).toMatchSet(new Set([projectC, projectE, projectF, projectH]));\r\n  });\r\n  it('handles multiple inputs', () => {\r\n    const result: ReadonlySet<ISimpleGraphable> = expandAllConsumers([projectC, projectB]);\r\n\r\n    expect(result).toMatchSet(new Set([projectB, projectC, projectD, projectE, projectF, projectH]));\r\n  });\r\n});\r\n"]}