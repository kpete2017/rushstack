{"version":3,"file":"AzureStorageBuildCacheProvider.js","sourceRoot":"","sources":["../../../src/logic/buildCache/AzureStorageBuildCacheProvider.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Terminal } from '@rushstack/node-core-library';\r\nimport { PrintUtilities } from '@rushstack/terminal';\r\nimport {\r\n  BlobClient,\r\n  BlobServiceClient,\r\n  BlockBlobClient,\r\n  ContainerClient,\r\n  ContainerSASPermissions,\r\n  generateBlobSASQueryParameters,\r\n  SASQueryParameters,\r\n  ServiceGetUserDelegationKeyResponse\r\n} from '@azure/storage-blob';\r\nimport { DeviceCodeCredential, DeviceCodeInfo } from '@azure/identity';\r\n\r\nimport { EnvironmentConfiguration, EnvironmentVariableNames } from '../../api/EnvironmentConfiguration';\r\nimport { CredentialCache, ICredentialCacheEntry } from '../CredentialCache';\r\nimport { RushConstants } from '../RushConstants';\r\nimport { CloudBuildCacheProviderBase } from './CloudBuildCacheProviderBase';\r\n\r\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n// TODO: This is a temporary workaround; it should be reverted when we upgrade to \"@azure/identity\" version 2.x\r\n// import { AzureAuthorityHosts } from '@azure/identity';\r\nexport enum AzureAuthorityHosts {\r\n  AzureChina = 'https://login.chinacloudapi.cn',\r\n  AzureGermany = 'https://login.microsoftonline.de',\r\n  AzureGovernment = 'https://login.microsoftonline.us',\r\n  AzurePublicCloud = 'https://login.microsoftonline.com'\r\n}\r\n// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n\r\nexport type AzureEnvironmentNames = keyof typeof AzureAuthorityHosts;\r\n\r\nexport interface IAzureStorageBuildCacheProviderOptions {\r\n  storageContainerName: string;\r\n  storageAccountName: string;\r\n  azureEnvironment?: AzureEnvironmentNames;\r\n  blobPrefix?: string;\r\n  isCacheWriteAllowed: boolean;\r\n}\r\n\r\nconst SAS_TTL_MILLISECONDS: number = 7 * 24 * 60 * 60 * 1000; // Seven days\r\n\r\nexport class AzureStorageBuildCacheProvider extends CloudBuildCacheProviderBase {\r\n  private readonly _storageAccountName: string;\r\n  private readonly _storageContainerName: string;\r\n  private readonly _azureEnvironment: AzureEnvironmentNames;\r\n  private readonly _blobPrefix: string | undefined;\r\n  private readonly _environmentCredential: string | undefined;\r\n  private readonly _isCacheWriteAllowedByConfiguration: boolean;\r\n  private __credentialCacheId: string | undefined;\r\n\r\n  public get isCacheWriteAllowed(): boolean {\r\n    return EnvironmentConfiguration.buildCacheWriteAllowed ?? this._isCacheWriteAllowedByConfiguration;\r\n  }\r\n\r\n  private _containerClient: ContainerClient | undefined;\r\n\r\n  public constructor(options: IAzureStorageBuildCacheProviderOptions) {\r\n    super();\r\n    this._storageAccountName = options.storageAccountName;\r\n    this._storageContainerName = options.storageContainerName;\r\n    this._azureEnvironment = options.azureEnvironment || 'AzurePublicCloud';\r\n    this._blobPrefix = options.blobPrefix;\r\n    this._environmentCredential = EnvironmentConfiguration.buildCacheCredential;\r\n    this._isCacheWriteAllowedByConfiguration = options.isCacheWriteAllowed;\r\n\r\n    if (!(this._azureEnvironment in AzureAuthorityHosts)) {\r\n      throw new Error(\r\n        `The specified Azure Environment (\"${this._azureEnvironment}\") is invalid. If it is specified, it must ` +\r\n          `be one of: ${Object.keys(AzureAuthorityHosts).join(', ')}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private get _credentialCacheId(): string {\r\n    if (!this.__credentialCacheId) {\r\n      const cacheIdParts: string[] = [\r\n        'azure-blob-storage',\r\n        this._azureEnvironment,\r\n        this._storageAccountName,\r\n        this._storageContainerName\r\n      ];\r\n\r\n      if (this._isCacheWriteAllowedByConfiguration) {\r\n        cacheIdParts.push('cacheWriteAllowed');\r\n      }\r\n\r\n      this.__credentialCacheId = cacheIdParts.join('|');\r\n    }\r\n\r\n    return this.__credentialCacheId;\r\n  }\r\n\r\n  private get _storageAccountUrl(): string {\r\n    return `https://${this._storageAccountName}.blob.core.windows.net/`;\r\n  }\r\n\r\n  public async tryGetCacheEntryBufferByIdAsync(\r\n    terminal: Terminal,\r\n    cacheId: string\r\n  ): Promise<Buffer | undefined> {\r\n    const blobClient: BlobClient = await this._getBlobClientForCacheIdAsync(cacheId);\r\n    try {\r\n      const blobExists: boolean = await blobClient.exists();\r\n      if (blobExists) {\r\n        return await blobClient.downloadToBuffer();\r\n      } else {\r\n        return undefined;\r\n      }\r\n    } catch (e) {\r\n      const errorMessage: string =\r\n        'Error getting cache entry from Azure Storage: ' +\r\n        [e.name, e.message, e.response?.status, e.response?.parsedHeaders?.errorCode]\r\n          .filter((piece: string | undefined) => piece)\r\n          .join(' ');\r\n\r\n      if (e.response?.parsedHeaders?.errorCode === 'PublicAccessNotPermitted') {\r\n        // This error means we tried to read the cache with no credentials, but credentials are required.\r\n        // We'll assume that the configuration of the cache is correct and the user has to take action.\r\n        terminal.writeWarningLine(\r\n          `${errorMessage}\\n\\n` +\r\n            `You need to configure Azure Storage SAS credentials to access the build cache.\\n` +\r\n            `Update the credentials by running \"rush ${RushConstants.updateCloudCredentialsCommandName}\", \\n` +\r\n            `or provide a SAS in the ` +\r\n            `${EnvironmentVariableNames.RUSH_BUILD_CACHE_CREDENTIAL} environment variable.`\r\n        );\r\n      } else if (e.response?.parsedHeaders?.errorCode === 'AuthenticationFailed') {\r\n        // This error means the user's credentials are incorrect, but not expired normally. They might have\r\n        // gotten corrupted somehow, or revoked manually in Azure Portal.\r\n        terminal.writeWarningLine(\r\n          `${errorMessage}\\n\\n` +\r\n            `Your Azure Storage SAS credentials are not valid.\\n` +\r\n            `Update the credentials by running \"rush ${RushConstants.updateCloudCredentialsCommandName}\", \\n` +\r\n            `or provide a SAS in the ` +\r\n            `${EnvironmentVariableNames.RUSH_BUILD_CACHE_CREDENTIAL} environment variable.`\r\n        );\r\n      } else if (e.response?.parsedHeaders?.errorCode === 'AuthorizationPermissionMismatch') {\r\n        // This error is not solvable by the user, so we'll assume it is a configuration error, and revert\r\n        // to providing likely next steps on configuration. (Hopefully this error is rare for a regular\r\n        // developer, more likely this error will appear while someone is configuring the cache for the\r\n        // first time.)\r\n        terminal.writeWarningLine(\r\n          `${errorMessage}\\n\\n` +\r\n            `Your Azure Storage SAS credentials are valid, but do not have permission to read the build cache.\\n` +\r\n            `Make sure you have added the role 'Storage Blob Data Reader' to the appropriate user(s) or group(s)\\n` +\r\n            `on your storage account in the Azure Portal.`\r\n        );\r\n      } else {\r\n        // We don't know what went wrong, hopefully we'll print something useful.\r\n        terminal.writeWarningLine(errorMessage);\r\n      }\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public async trySetCacheEntryBufferAsync(\r\n    terminal: Terminal,\r\n    cacheId: string,\r\n    entryStream: Buffer\r\n  ): Promise<boolean> {\r\n    if (!this.isCacheWriteAllowed) {\r\n      terminal.writeErrorLine(\r\n        'Writing to Azure Blob Storage cache is not allowed in the current configuration.'\r\n      );\r\n      return false;\r\n    }\r\n\r\n    const blobClient: BlobClient = await this._getBlobClientForCacheIdAsync(cacheId);\r\n    const blockBlobClient: BlockBlobClient = blobClient.getBlockBlobClient();\r\n    let blobAlreadyExists: boolean = false;\r\n\r\n    try {\r\n      blobAlreadyExists = await blockBlobClient.exists();\r\n    } catch (e) {\r\n      // If RUSH_BUILD_CACHE_CREDENTIAL is set but is corrupted or has been rotated\r\n      // in Azure Portal, or the user's own cached credentials have been corrupted or\r\n      // invalidated, we'll print the error and continue (this way we don't fail the\r\n      // actual rush build).\r\n      const errorMessage: string =\r\n        'Error checking if cache entry exists in Azure Storage: ' +\r\n        [e.name, e.message, e.response?.status, e.response?.parsedHeaders?.errorCode]\r\n          .filter((piece: string | undefined) => piece)\r\n          .join(' ');\r\n\r\n      terminal.writeWarningLine(errorMessage);\r\n    }\r\n\r\n    if (blobAlreadyExists) {\r\n      terminal.writeVerboseLine('Build cache entry blob already exists.');\r\n      return true;\r\n    } else {\r\n      try {\r\n        await blockBlobClient.upload(entryStream, entryStream.length);\r\n        return true;\r\n      } catch (e) {\r\n        if (e.statusCode === 409 /* conflict */) {\r\n          // If something else has written to the blob at the same time,\r\n          // it's probably a concurrent process that is attempting to write\r\n          // the same cache entry. That is an effective success.\r\n          terminal.writeVerboseLine(\r\n            'Azure Storage returned status 409 (conflict). The cache entry has ' +\r\n              `probably already been set by another builder. Code: \"${e.code}\".`\r\n          );\r\n          return true;\r\n        } else {\r\n          terminal.writeWarningLine(`Error uploading cache entry to Azure Storage: ${e}`);\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public async updateCachedCredentialAsync(terminal: Terminal, credential: string): Promise<void> {\r\n    await CredentialCache.usingAsync(\r\n      {\r\n        supportEditing: true\r\n      },\r\n      async (credentialsCache: CredentialCache) => {\r\n        credentialsCache.setCacheEntry(this._credentialCacheId, credential);\r\n        await credentialsCache.saveIfModifiedAsync();\r\n      }\r\n    );\r\n  }\r\n\r\n  public async updateCachedCredentialInteractiveAsync(terminal: Terminal): Promise<void> {\r\n    const sasQueryParameters: SASQueryParameters = await this._getSasQueryParametersAsync(terminal);\r\n    const sasString: string = sasQueryParameters.toString();\r\n\r\n    await CredentialCache.usingAsync(\r\n      {\r\n        supportEditing: true\r\n      },\r\n      async (credentialsCache: CredentialCache) => {\r\n        credentialsCache.setCacheEntry(this._credentialCacheId, sasString, sasQueryParameters.expiresOn);\r\n        await credentialsCache.saveIfModifiedAsync();\r\n      }\r\n    );\r\n  }\r\n\r\n  public async deleteCachedCredentialsAsync(terminal: Terminal): Promise<void> {\r\n    await CredentialCache.usingAsync(\r\n      {\r\n        supportEditing: true\r\n      },\r\n      async (credentialsCache: CredentialCache) => {\r\n        credentialsCache.deleteCacheEntry(this._credentialCacheId);\r\n        await credentialsCache.saveIfModifiedAsync();\r\n      }\r\n    );\r\n  }\r\n\r\n  private async _getBlobClientForCacheIdAsync(cacheId: string): Promise<BlobClient> {\r\n    const client: ContainerClient = await this._getContainerClientAsync();\r\n    const blobName: string = this._blobPrefix ? `${this._blobPrefix}/${cacheId}` : cacheId;\r\n    return client.getBlobClient(blobName);\r\n  }\r\n\r\n  private async _getContainerClientAsync(): Promise<ContainerClient> {\r\n    if (!this._containerClient) {\r\n      let sasString: string | undefined = this._environmentCredential;\r\n      if (!sasString) {\r\n        let cacheEntry: ICredentialCacheEntry | undefined;\r\n        await CredentialCache.usingAsync(\r\n          {\r\n            supportEditing: false\r\n          },\r\n          (credentialsCache: CredentialCache) => {\r\n            cacheEntry = credentialsCache.tryGetCacheEntry(this._credentialCacheId);\r\n          }\r\n        );\r\n\r\n        const expirationTime: number | undefined = cacheEntry?.expires?.getTime();\r\n        if (expirationTime && expirationTime < Date.now()) {\r\n          throw new Error(\r\n            'Cached Azure Storage credentials have expired. ' +\r\n              `Update the credentials by running \"rush ${RushConstants.updateCloudCredentialsCommandName}\".`\r\n          );\r\n        } else {\r\n          sasString = cacheEntry?.credential;\r\n        }\r\n      }\r\n\r\n      let blobServiceClient: BlobServiceClient;\r\n      if (sasString) {\r\n        const connectionString: string = this._getConnectionString(sasString);\r\n        blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\r\n      } else if (!this._isCacheWriteAllowedByConfiguration) {\r\n        // If cache write isn't allowed and we don't have a credential, assume the blob supports anonymous read\r\n        blobServiceClient = new BlobServiceClient(this._storageAccountUrl);\r\n      } else {\r\n        throw new Error(\r\n          \"An Azure Storage SAS credential hasn't been provided, or has expired. \" +\r\n            `Update the credentials by running \"rush ${RushConstants.updateCloudCredentialsCommandName}\", ` +\r\n            `or provide a SAS in the ` +\r\n            `${EnvironmentVariableNames.RUSH_BUILD_CACHE_CREDENTIAL} environment variable`\r\n        );\r\n      }\r\n\r\n      this._containerClient = blobServiceClient.getContainerClient(this._storageContainerName);\r\n    }\r\n\r\n    return this._containerClient;\r\n  }\r\n\r\n  private async _getSasQueryParametersAsync(terminal: Terminal): Promise<SASQueryParameters> {\r\n    const authorityHost: string | undefined = AzureAuthorityHosts[this._azureEnvironment];\r\n    if (!authorityHost) {\r\n      throw new Error(`Unexpected Azure environment: ${this._azureEnvironment}`);\r\n    }\r\n\r\n    const DeveloperSignOnClientId: string = '04b07795-8ddb-461a-bbee-02f9e1bf7b46';\r\n    const deviceCodeCredential: DeviceCodeCredential = new DeviceCodeCredential(\r\n      'organizations',\r\n      DeveloperSignOnClientId,\r\n      (deviceCodeInfo: DeviceCodeInfo) => {\r\n        PrintUtilities.printMessageInBox(deviceCodeInfo.message, terminal);\r\n      },\r\n      { authorityHost: authorityHost }\r\n    );\r\n    const blobServiceClient: BlobServiceClient = new BlobServiceClient(\r\n      this._storageAccountUrl,\r\n      deviceCodeCredential\r\n    );\r\n\r\n    const startsOn: Date = new Date();\r\n    const expires: Date = new Date(Date.now() + SAS_TTL_MILLISECONDS);\r\n    const key: ServiceGetUserDelegationKeyResponse = await blobServiceClient.getUserDelegationKey(\r\n      startsOn,\r\n      expires\r\n    );\r\n\r\n    const containerSasPermissions: ContainerSASPermissions = new ContainerSASPermissions();\r\n    containerSasPermissions.read = true;\r\n    containerSasPermissions.write = this._isCacheWriteAllowedByConfiguration;\r\n\r\n    const queryParameters: SASQueryParameters = generateBlobSASQueryParameters(\r\n      {\r\n        startsOn: startsOn,\r\n        expiresOn: expires,\r\n        permissions: containerSasPermissions,\r\n        containerName: this._storageContainerName\r\n      },\r\n      key,\r\n      this._storageAccountName\r\n    );\r\n\r\n    return queryParameters;\r\n  }\r\n\r\n  private _getConnectionString(sasString: string | undefined): string {\r\n    const blobEndpoint: string = `BlobEndpoint=${this._storageAccountUrl}`;\r\n    if (sasString) {\r\n      const connectionString: string = `${blobEndpoint};SharedAccessSignature=${sasString}`;\r\n      return connectionString;\r\n    } else {\r\n      return blobEndpoint;\r\n    }\r\n  }\r\n}\r\n"]}