{"version":3,"file":"ProjectBuildCache.test.js","sourceRoot":"","sources":["../../../../src/logic/buildCache/test/ProjectBuildCache.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,oEAAsF;AAOtF,4DAAyD;AAQzD,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,KAAK,UAAU,cAAc,CAAC,OAA8B;QAC1D,MAAM,QAAQ,GAAa,IAAI,4BAAQ,CAAC,IAAI,gDAA4B,EAAE,CAAC,CAAC;QAC5E,MAAM,qBAAqB,GAAG;YAC5B,mBAAmB,EAAE,GAAG,EAAE;gBACxB,OAAO,YAAY,CAAC;YACtB,CAAC;SACkC,CAAC;QAEtC,MAAM,OAAO,GAAkC,MAAM,qCAAiB,CAAC,uBAAuB,CAAC;YAC7F,uBAAuB,EAAE;gBACvB,iBAAiB,EAAE,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBAC7E,eAAe,EAAE,CAAC,OAAqC,EAAE,EAAE,CACzD,GAAG,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,gBAAgB,EAAE;gBACtD,kBAAkB,EAAE,SAAoD;gBACxE,kBAAkB,EAAE;oBAClB,mBAAmB,EAAE,OAAO,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK;iBAC3F;aACoC;YACvC,oBAAoB,EAAE;gBACpB,wBAAwB,EAAE,CAAC,MAAM,CAAC;gBAClC,OAAO,EAAE;oBACP,WAAW,EAAE,aAAa;oBAC1B,qBAAqB,EAAE,kBAAkB;oBACzC,kBAAkB,EAAE,EAAE;iBACvB;aACqC;YACxC,OAAO,EAAE,OAAO;YAChB,mBAAmB,EAAE,OAAO,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE;YACrG,qBAAqB;YACrB,QAAQ;SACT,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,OAAO,GAAsB,CAAC,MAAM,cAAc,CAAC,EAAE,CAAC,CAAE,CAAC;YAC/D,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,qBAAqB,CAC/C,wDAAwD,CACzD,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,CACJ,MAAM,cAAc,CAAC;gBACnB,mBAAmB,EAAE,SAAS;aAC/B,CAAC,CACH,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { StringBufferTerminalProvider, Terminal } from '@rushstack/node-core-library';\r\nimport { BuildCacheConfiguration } from '../../../api/BuildCacheConfiguration';\r\nimport { RushProjectConfiguration } from '../../../api/RushProjectConfiguration';\r\nimport { PackageChangeAnalyzer } from '../../../logic/PackageChangeAnalyzer';\r\nimport { IGenerateCacheEntryIdOptions } from '../CacheEntryId';\r\nimport { FileSystemBuildCacheProvider } from '../FileSystemBuildCacheProvider';\r\n\r\nimport { ProjectBuildCache } from '../ProjectBuildCache';\r\n\r\ninterface ITestOptions {\r\n  enabled: boolean;\r\n  writeAllowed: boolean;\r\n  trackedProjectFiles: string[] | undefined;\r\n}\r\n\r\ndescribe('ProjectBuildCache', () => {\r\n  async function prepareSubject(options: Partial<ITestOptions>): Promise<ProjectBuildCache | undefined> {\r\n    const terminal: Terminal = new Terminal(new StringBufferTerminalProvider());\r\n    const packageChangeAnalyzer = {\r\n      getProjectStateHash: () => {\r\n        return 'state_hash';\r\n      }\r\n    } as unknown as PackageChangeAnalyzer;\r\n\r\n    const subject: ProjectBuildCache | undefined = await ProjectBuildCache.tryGetProjectBuildCache({\r\n      buildCacheConfiguration: {\r\n        buildCacheEnabled: options.hasOwnProperty('enabled') ? options.enabled : true,\r\n        getCacheEntryId: (options: IGenerateCacheEntryIdOptions) =>\r\n          `${options.projectName}/${options.projectStateHash}`,\r\n        localCacheProvider: undefined as unknown as FileSystemBuildCacheProvider,\r\n        cloudCacheProvider: {\r\n          isCacheWriteAllowed: options.hasOwnProperty('writeAllowed') ? options.writeAllowed : false\r\n        }\r\n      } as unknown as BuildCacheConfiguration,\r\n      projectConfiguration: {\r\n        projectOutputFolderNames: ['dist'],\r\n        project: {\r\n          packageName: 'acme-wizard',\r\n          projectRelativeFolder: 'apps/acme-wizard',\r\n          dependencyProjects: []\r\n        }\r\n      } as unknown as RushProjectConfiguration,\r\n      command: 'build',\r\n      trackedProjectFiles: options.hasOwnProperty('trackedProjectFiles') ? options.trackedProjectFiles : [],\r\n      packageChangeAnalyzer,\r\n      terminal\r\n    });\r\n\r\n    return subject;\r\n  }\r\n\r\n  describe('tryGetProjectBuildCache', () => {\r\n    it('returns a ProjectBuildCache with a calculated cacheId value', async () => {\r\n      const subject: ProjectBuildCache = (await prepareSubject({}))!;\r\n      expect(subject['_cacheId']).toMatchInlineSnapshot(\r\n        `\"acme-wizard/e229f8765b7d450a8a84f711a81c21e37935d661\"`\r\n      );\r\n    });\r\n\r\n    it('returns undefined if the tracked file list is undefined', async () => {\r\n      expect(\r\n        await prepareSubject({\r\n          trackedProjectFiles: undefined\r\n        })\r\n      ).toBe(undefined);\r\n    });\r\n  });\r\n});\r\n"]}