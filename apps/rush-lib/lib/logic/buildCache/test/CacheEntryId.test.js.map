{"version":3,"file":"CacheEntryId.test.js","sourceRoot":"","sources":["../../../../src/logic/buildCache/test/CacheEntryId.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,kDAAwE;AAExE,QAAQ,CAAC,2BAAY,CAAC,IAAI,EAAE,GAAG,EAAE;IAC/B,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,SAAS,8BAA8B,CAAC,WAAmB,EAAE,OAAgB;YAC3E,MAAM,eAAe,GAA4B,2BAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YACpF,MAAM,CACJ,eAAe,CAAC;gBACd,WAAW;gBACX,gBAAgB,EAAE,0CAA0C;aAC7D,CAAC,CACH,CAAC,eAAe,EAAE,CAAC;QACtB,CAAC;QAED,EAAE,CAAC,+DAA+D,EAAE,GAAG,EAAE;YACvE,MAAM,WAAW,GAAW,cAAc,CAAC;YAC3C,8BAA8B,CAAC,WAAW,CAAC,CAAC;YAC5C,8BAA8B,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YACtD,8BAA8B,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAAC;YACpE,8BAA8B,CAAC,WAAW,EAAE,gCAAgC,CAAC,CAAC;YAC9E,8BAA8B,CAAC,WAAW,EAAE,uCAAuC,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,MAAM,WAAW,GAAW,qBAAqB,CAAC;YAClD,8BAA8B,CAAC,WAAW,CAAC,CAAC;YAC5C,8BAA8B,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YACtD,8BAA8B,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAAC;YACpE,8BAA8B,CAAC,WAAW,EAAE,gCAAgC,CAAC,CAAC;YAC9E,8BAA8B,CAAC,WAAW,EAAE,uCAAuC,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,KAAK,UAAU,+CAA+C,CAAC,OAAe;YAC5E,MAAM,MAAM,CAAC,GAAG,EAAE,CAAC,2BAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,4BAA4B,EAAE,CAAC;QACxF,CAAC;QAED,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,+CAA+C,CAAC,GAAG,CAAC,CAAC;YAC3D,MAAM,+CAA+C,CAAC,cAAc,CAAC,CAAC;YACtE,MAAM,+CAA+C,CAAC,eAAe,CAAC,CAAC;YACvE,MAAM,+CAA+C,CAAC,gBAAgB,CAAC,CAAC;YACxE,MAAM,+CAA+C,CAAC,qBAAqB,CAAC,CAAC;YAC7E,MAAM,+CAA+C,CAAC,2BAA2B,CAAC,CAAC;YACnF,MAAM,+CAA+C,CAAC,4BAA4B,CAAC,CAAC;YACpF,MAAM,+CAA+C,CAAC,gBAAgB,CAAC,CAAC;YACxE,MAAM,+CAA+C,CAAC,UAAU,CAAC,CAAC;YAClE,MAAM,+CAA+C,CAAC,2BAA2B,CAAC,CAAC;YACnF,MAAM,+CAA+C,CAAC,SAAS,CAAC,CAAC;YACjE,MAAM,+CAA+C,CAAC,GAAG,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { CacheEntryId, GetCacheEntryIdFunction } from '../CacheEntryId';\r\n\r\ndescribe(CacheEntryId.name, () => {\r\n  describe('Valid pattern names', () => {\r\n    function validatePatternMatchesSnapshot(projectName: string, pattern?: string): void {\r\n      const getCacheEntryId: GetCacheEntryIdFunction = CacheEntryId.parsePattern(pattern);\r\n      expect(\r\n        getCacheEntryId({\r\n          projectName,\r\n          projectStateHash: '09d1ecee6d5f888fa6c35ca804b5dac7c3735ce3'\r\n        })\r\n      ).toMatchSnapshot();\r\n    }\r\n\r\n    it('Handles a cache entry name for a project name without a scope', () => {\r\n      const projectName: string = 'project+name';\r\n      validatePatternMatchesSnapshot(projectName);\r\n      validatePatternMatchesSnapshot(projectName, '[hash]');\r\n      validatePatternMatchesSnapshot(projectName, '[projectName]_[hash]');\r\n      validatePatternMatchesSnapshot(projectName, '[projectName:normalize]_[hash]');\r\n      validatePatternMatchesSnapshot(projectName, 'prefix/[projectName:normalize]_[hash]');\r\n    });\r\n\r\n    it('Handles a cache entry name for a project name with a scope', () => {\r\n      const projectName: string = '@scope/project+name';\r\n      validatePatternMatchesSnapshot(projectName);\r\n      validatePatternMatchesSnapshot(projectName, '[hash]');\r\n      validatePatternMatchesSnapshot(projectName, '[projectName]_[hash]');\r\n      validatePatternMatchesSnapshot(projectName, '[projectName:normalize]_[hash]');\r\n      validatePatternMatchesSnapshot(projectName, 'prefix/[projectName:normalize]_[hash]');\r\n    });\r\n  });\r\n\r\n  describe('Invalid pattern names', () => {\r\n    async function validateInvalidPatternErrorMatchesSnapshotAsync(pattern: string): Promise<void> {\r\n      await expect(() => CacheEntryId.parsePattern(pattern)).toThrowErrorMatchingSnapshot();\r\n    }\r\n\r\n    it('Throws an exception for an invalid pattern', async () => {\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('x');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('[invalidTag]');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('unstartedTag]');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('[incompleteTag');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('[hash:badAttribute]');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('[hash:badAttribute:attr2]');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('[projectName:badAttribute]');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('[projectName:]');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('[:attr1]');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('[projectName:attr1:attr2]');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('/[hash]');\r\n      await validateInvalidPatternErrorMatchesSnapshotAsync('~');\r\n    });\r\n  });\r\n});\r\n"]}