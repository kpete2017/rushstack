{"version":3,"file":"AmazonS3BuildCacheProvider.test.js","sourceRoot":"","sources":["../../../../../src/logic/buildCache/AmazonS3/test/AmazonS3BuildCacheProvider.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { StringBufferTerminalProvider, Terminal } from '@rushstack/node-core-library';\r\n\r\nimport { EnvironmentConfiguration } from '../../../../api/EnvironmentConfiguration';\r\nimport { AmazonS3BuildCacheProvider } from '../AmazonS3BuildCacheProvider';\r\nimport { RushUserConfiguration } from '../../../../api/RushUserConfiguration';\r\nimport { CredentialCache } from '../../../CredentialCache';\r\n\r\ndescribe('AmazonS3BuildCacheProvider', () => {\r\n  beforeEach(() => {\r\n    jest.spyOn(EnvironmentConfiguration, 'buildCacheCredential', 'get').mockReturnValue(undefined);\r\n    jest.spyOn(EnvironmentConfiguration, 'buildCacheEnabled', 'get').mockReturnValue(undefined);\r\n    jest.spyOn(EnvironmentConfiguration, 'buildCacheWriteAllowed', 'get').mockReturnValue(undefined);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.resetAllMocks();\r\n  });\r\n\r\n  describe('isCacheWriteAllowed', () => {\r\n    function prepareSubject(\r\n      optionValue: boolean,\r\n      envVarValue: boolean | undefined\r\n    ): AmazonS3BuildCacheProvider {\r\n      jest.spyOn(EnvironmentConfiguration, 'buildCacheWriteAllowed', 'get').mockReturnValue(envVarValue);\r\n      return new AmazonS3BuildCacheProvider({\r\n        s3Region: 'region-name',\r\n        s3Bucket: 'bucket-name',\r\n        isCacheWriteAllowed: optionValue\r\n      });\r\n    }\r\n\r\n    it('is false if isCacheWriteAllowed is false', () => {\r\n      const subject: AmazonS3BuildCacheProvider = prepareSubject(false, undefined);\r\n      expect(subject.isCacheWriteAllowed).toBe(false);\r\n    });\r\n\r\n    it('is true if isCacheWriteAllowed is true', () => {\r\n      const subject: AmazonS3BuildCacheProvider = prepareSubject(true, undefined);\r\n      expect(subject.isCacheWriteAllowed).toBe(true);\r\n    });\r\n\r\n    it('is false if isCacheWriteAllowed is true but the env var is false', () => {\r\n      const subject: AmazonS3BuildCacheProvider = prepareSubject(true, false);\r\n      expect(subject.isCacheWriteAllowed).toBe(false);\r\n    });\r\n\r\n    it('is true if the env var is true', () => {\r\n      const subject: AmazonS3BuildCacheProvider = prepareSubject(false, true);\r\n      expect(subject.isCacheWriteAllowed).toBe(true);\r\n    });\r\n  });\r\n\r\n  async function testCredentialCache(isCacheWriteAllowed: boolean): Promise<void> {\r\n    const cacheProvider: AmazonS3BuildCacheProvider = new AmazonS3BuildCacheProvider({\r\n      s3Region: 'region-name',\r\n      s3Bucket: 'bucket-name',\r\n      isCacheWriteAllowed\r\n    });\r\n\r\n    // Mock the user folder to the current folder so a real .rush-user folder doesn't interfere with the test\r\n    jest.spyOn(RushUserConfiguration, 'getRushUserFolderPath').mockReturnValue(__dirname);\r\n    let setCacheEntryArgs: unknown[] = [];\r\n    const credentialsCacheSetCacheEntrySpy: jest.SpyInstance = jest\r\n      .spyOn(CredentialCache.prototype, 'setCacheEntry')\r\n      .mockImplementation((...args) => {\r\n        setCacheEntryArgs = args;\r\n      });\r\n    const credentialsCacheSaveSpy: jest.SpyInstance = jest\r\n      .spyOn(CredentialCache.prototype, 'saveIfModifiedAsync')\r\n      .mockImplementation(() => Promise.resolve());\r\n\r\n    const terminal: Terminal = new Terminal(new StringBufferTerminalProvider());\r\n    await cacheProvider.updateCachedCredentialAsync(terminal, 'credential');\r\n\r\n    expect(credentialsCacheSetCacheEntrySpy).toHaveBeenCalledTimes(1);\r\n    expect(setCacheEntryArgs).toMatchSnapshot();\r\n    expect(credentialsCacheSaveSpy).toHaveBeenCalledTimes(1);\r\n  }\r\n\r\n  it('Has an expected cached credential name (write not allowed)', async () => {\r\n    await testCredentialCache(false);\r\n  });\r\n\r\n  it('Has an expected cached credential name (write allowed)', async () => {\r\n    await testCredentialCache(true);\r\n  });\r\n});\r\n"]}