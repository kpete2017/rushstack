{"version":3,"file":"AmazonS3Client.test.js","sourceRoot":"","sources":["../../../../../src/logic/buildCache/AmazonS3/test/AmazonS3Client.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Response, ResponseInit } from 'node-fetch';\r\n\r\nimport { IAmazonS3BuildCacheProviderOptions } from '../AmazonS3BuildCacheProvider';\r\nimport { AmazonS3Client, IAmazonS3Credentials } from '../AmazonS3Client';\r\nimport { WebClient } from '../../../../utilities/WebClient';\r\n\r\nconst DUMMY_OPTIONS_WITHOUT_BUCKET: Omit<IAmazonS3BuildCacheProviderOptions, 's3Bucket'> = {\r\n  s3Region: 'us-east-1',\r\n  isCacheWriteAllowed: true\r\n};\r\n\r\nconst DUMMY_OPTIONS: IAmazonS3BuildCacheProviderOptions = {\r\n  ...DUMMY_OPTIONS_WITHOUT_BUCKET,\r\n  s3Bucket: 'test-s3-bucket'\r\n};\r\n\r\nclass MockedDate extends Date {\r\n  public constructor() {\r\n    super(2020, 3, 18, 12, 32, 42, 493);\r\n  }\r\n\r\n  public toISOString(): string {\r\n    return '2020-04-18T12:32:42.493Z';\r\n  }\r\n}\r\n\r\ndescribe('AmazonS3Client', () => {\r\n  it('Rejects invalid S3 bucket names', () => {\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: undefined!, ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).toThrowErrorMatchingSnapshot();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: '-abc', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).toThrowErrorMatchingSnapshot();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: 'a!bc', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).toThrowErrorMatchingSnapshot();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: 'a', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).toThrowErrorMatchingSnapshot();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: '10.10.10.10', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).toThrowErrorMatchingSnapshot();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: 'abc..d', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).toThrowErrorMatchingSnapshot();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: 'abc.-d', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).toThrowErrorMatchingSnapshot();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: 'abc-.d', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).toThrowErrorMatchingSnapshot();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: 'abc-', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).toThrowErrorMatchingSnapshot();\r\n  });\r\n\r\n  it('Accepts valid S3 bucket names', () => {\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: 'abc123', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).not.toThrow();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: 'abc', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).not.toThrow();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: 'foo-bar-baz', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).not.toThrow();\r\n\r\n    expect(\r\n      () => new AmazonS3Client(undefined, { s3Bucket: 'foo.bar.baz', ...DUMMY_OPTIONS_WITHOUT_BUCKET })\r\n    ).not.toThrow();\r\n  });\r\n\r\n  it('Does not allow upload without credentials', async () => {\r\n    const client: AmazonS3Client = new AmazonS3Client(undefined, {\r\n      s3Bucket: 'foo.bar.baz',\r\n      ...DUMMY_OPTIONS_WITHOUT_BUCKET\r\n    });\r\n    try {\r\n      await client.uploadObjectAsync('temp', undefined!);\r\n      fail('Expected an exception to be thrown');\r\n    } catch (e) {\r\n      expect(e).toMatchSnapshot();\r\n    }\r\n  });\r\n\r\n  describe('Making requests', () => {\r\n    interface IResponseOptions {\r\n      body?: string;\r\n      responseInit: ResponseInit;\r\n    }\r\n\r\n    let realDate: typeof Date;\r\n    beforeEach(() => {\r\n      realDate = global.Date;\r\n      global.Date = MockedDate as typeof Date;\r\n    });\r\n\r\n    afterEach(() => {\r\n      jest.restoreAllMocks();\r\n      global.Date = realDate;\r\n    });\r\n\r\n    async function makeS3ClientRequestAsync<TResponse>(\r\n      credentials: IAmazonS3Credentials | undefined,\r\n      options: IAmazonS3BuildCacheProviderOptions,\r\n      request: (s3Client: AmazonS3Client) => Promise<TResponse>,\r\n      response: IResponseOptions\r\n    ): Promise<TResponse> {\r\n      const spy: jest.SpyInstance = jest\r\n        .spyOn(WebClient.prototype, 'fetchAsync')\r\n        .mockReturnValue(Promise.resolve(new Response(response.body, response.responseInit)));\r\n\r\n      const s3Client: AmazonS3Client = new AmazonS3Client(credentials, options);\r\n      let result: TResponse;\r\n      let error: Error | undefined;\r\n      try {\r\n        result = await request(s3Client);\r\n      } catch (e) {\r\n        error = e;\r\n      }\r\n\r\n      expect(spy).toHaveBeenCalledTimes(1);\r\n      expect(spy.mock.calls[0]).toMatchSnapshot();\r\n\r\n      if (error) {\r\n        throw error;\r\n      } else {\r\n        return result!;\r\n      }\r\n    }\r\n\r\n    async function runAndExpectErrorAsync(fnAsync: () => Promise<unknown>): Promise<void> {\r\n      try {\r\n        await fnAsync();\r\n        fail('Expected an error to be thrown');\r\n      } catch (e) {\r\n        expect(e).toMatchSnapshot();\r\n      }\r\n    }\r\n\r\n    describe('Getting an object', () => {\r\n      async function makeGetRequestAsync(\r\n        credentials: IAmazonS3Credentials | undefined,\r\n        options: IAmazonS3BuildCacheProviderOptions,\r\n        objectName: string,\r\n        response: IResponseOptions\r\n      ): Promise<Buffer | undefined> {\r\n        return await makeS3ClientRequestAsync(\r\n          credentials,\r\n          options,\r\n          async (s3Client) => {\r\n            return await s3Client.getObjectAsync(objectName);\r\n          },\r\n          response\r\n        );\r\n      }\r\n\r\n      function registerGetTests(credentials: IAmazonS3Credentials | undefined): void {\r\n        it('Can get an object', async () => {\r\n          const expectedContents: string = 'abc123-contents';\r\n\r\n          const result: Buffer | undefined = await makeGetRequestAsync(credentials, DUMMY_OPTIONS, 'abc123', {\r\n            body: expectedContents,\r\n            responseInit: {\r\n              status: 200\r\n            }\r\n          });\r\n          expect(result).toBeDefined();\r\n          expect(result?.toString()).toBe(expectedContents);\r\n        });\r\n\r\n        it('Can get an object from a different region', async () => {\r\n          const expectedContents: string = 'abc123-contents';\r\n\r\n          const result: Buffer | undefined = await makeGetRequestAsync(\r\n            credentials,\r\n            { ...DUMMY_OPTIONS, s3Region: 'us-west-1' },\r\n            'abc123',\r\n            {\r\n              body: expectedContents,\r\n              responseInit: {\r\n                status: 200\r\n              }\r\n            }\r\n          );\r\n          expect(result).toBeDefined();\r\n          expect(result?.toString()).toBe(expectedContents);\r\n        });\r\n\r\n        it('Handles a missing object', async () => {\r\n          const result: Buffer | undefined = await makeGetRequestAsync(credentials, DUMMY_OPTIONS, 'abc123', {\r\n            responseInit: {\r\n              status: 404,\r\n              statusText: 'Not Found'\r\n            }\r\n          });\r\n          expect(result).toBeUndefined();\r\n        });\r\n\r\n        it('Handles an unexpected error', async () => {\r\n          await runAndExpectErrorAsync(\r\n            async () =>\r\n              await makeGetRequestAsync(credentials, DUMMY_OPTIONS, 'abc123', {\r\n                responseInit: {\r\n                  status: 500,\r\n                  statusText: 'Server Error'\r\n                }\r\n              })\r\n          );\r\n        });\r\n      }\r\n\r\n      describe('Without credentials', () => {\r\n        registerGetTests(undefined);\r\n\r\n        it('Handles missing credentials object', async () => {\r\n          const result: Buffer | undefined = await makeGetRequestAsync(undefined, DUMMY_OPTIONS, 'abc123', {\r\n            responseInit: {\r\n              status: 403,\r\n              statusText: 'Unauthorized'\r\n            }\r\n          });\r\n          expect(result).toBeUndefined();\r\n        });\r\n      });\r\n\r\n      function registerGetWithCredentialsTests(credentials: IAmazonS3Credentials): void {\r\n        registerGetTests(credentials);\r\n\r\n        it('Handles a 403 error', async () => {\r\n          await runAndExpectErrorAsync(\r\n            async () =>\r\n              await makeGetRequestAsync(credentials, DUMMY_OPTIONS, 'abc123', {\r\n                responseInit: {\r\n                  status: 403,\r\n                  statusText: 'Unauthorized'\r\n                }\r\n              })\r\n          );\r\n        });\r\n      }\r\n\r\n      describe('With credentials', () => {\r\n        registerGetWithCredentialsTests({\r\n          accessKeyId: 'accessKeyId',\r\n          secretAccessKey: 'secretAccessKey',\r\n          sessionToken: undefined\r\n        });\r\n      });\r\n\r\n      describe('With credentials including a session token', () => {\r\n        registerGetWithCredentialsTests({\r\n          accessKeyId: 'accessKeyId',\r\n          secretAccessKey: 'secretAccessKey',\r\n          sessionToken: 'sessionToken'\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('Uploading an object', () => {\r\n      async function makeUploadRequestAsync(\r\n        credentials: IAmazonS3Credentials | undefined,\r\n        options: IAmazonS3BuildCacheProviderOptions,\r\n        objectName: string,\r\n        objectContents: string,\r\n        response: IResponseOptions\r\n      ): Promise<void> {\r\n        return await makeS3ClientRequestAsync(\r\n          credentials,\r\n          options,\r\n          async (s3Client) => {\r\n            return await s3Client.uploadObjectAsync(objectName, Buffer.from(objectContents));\r\n          },\r\n          response\r\n        );\r\n      }\r\n\r\n      it('Throws an error if credentials are not provided', async () => {\r\n        await runAndExpectErrorAsync(\r\n          async () =>\r\n            await makeUploadRequestAsync(undefined, DUMMY_OPTIONS, 'abc123', 'abc123-contents', undefined!)\r\n        );\r\n      });\r\n\r\n      function registerUploadTests(credentials: IAmazonS3Credentials): void {\r\n        it('Uploads an object', async () => {\r\n          await makeUploadRequestAsync(credentials, DUMMY_OPTIONS, 'abc123', 'abc123-contents', {\r\n            responseInit: {\r\n              status: 200\r\n            }\r\n          });\r\n        });\r\n\r\n        it('Uploads an object to a different region', async () => {\r\n          await makeUploadRequestAsync(\r\n            credentials,\r\n            { ...DUMMY_OPTIONS, s3Region: 'us-west-1' },\r\n            'abc123',\r\n            'abc123-contents',\r\n            {\r\n              responseInit: {\r\n                status: 200\r\n              }\r\n            }\r\n          );\r\n        });\r\n\r\n        it('Handles an unexpected error code', async () => {\r\n          await runAndExpectErrorAsync(\r\n            async () =>\r\n              await makeUploadRequestAsync(credentials, DUMMY_OPTIONS, 'abc123', 'abc123-contents', {\r\n                responseInit: {\r\n                  status: 500,\r\n                  statusText: 'Server Error'\r\n                }\r\n              })\r\n          );\r\n        });\r\n      }\r\n\r\n      describe('With credentials', () => {\r\n        registerUploadTests({\r\n          accessKeyId: 'accessKeyId',\r\n          secretAccessKey: 'secretAccessKey',\r\n          sessionToken: undefined\r\n        });\r\n      });\r\n\r\n      describe('With credentials including a session token', () => {\r\n        registerUploadTests({\r\n          accessKeyId: 'accessKeyId',\r\n          secretAccessKey: 'secretAccessKey',\r\n          sessionToken: 'sessionToken'\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n"]}