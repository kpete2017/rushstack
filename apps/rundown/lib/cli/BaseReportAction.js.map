{"version":3,"file":"BaseReportAction.js","sourceRoot":"","sources":["../../src/cli/BaseReportAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,4FAA4F;AAC5F,2DAA2D;AAE3D,gEAKoC;AAEpC,MAAsB,gBAAiB,SAAQ,mCAAiB;IAM9D,YAAmB,OAAkC;QACnD,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAED,WAAW;IACD,kBAAkB;QAC1B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAChD,iBAAiB,EAAE,UAAU;YAC7B,kBAAkB,EAAE,IAAI;YACxB,YAAY,EAAE,MAAM;YACpB,WAAW,EAAE,oFAAoF;YACjG,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAC9C,iBAAiB,EAAE,QAAQ;YAC3B,kBAAkB,EAAE,IAAI;YACxB,YAAY,EAAE,QAAQ;YACtB,WAAW,EACT,yFAAyF;gBACzF,sDAAsD;gBACtD,+EAA+E;SAClF,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC7C,iBAAiB,EAAE,SAAS;YAC5B,kBAAkB,EAAE,IAAI;YACxB,WAAW,EAAE,uDAAuD;SACrE,CAAC,CAAC;QACH,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACtD,iBAAiB,EAAE,oBAAoB;YACvC,kBAAkB,EAAE,IAAI;YACxB,WAAW,EAAE,kFAAkF;SAChG,CAAC,CAAC;IACL,CAAC;CACF;AAvCD,4CAuCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  CommandLineAction,\r\n  ICommandLineActionOptions,\r\n  CommandLineStringParameter,\r\n  CommandLineFlagParameter\r\n} from '@rushstack/ts-command-line';\r\n\r\nexport abstract class BaseReportAction extends CommandLineAction {\r\n  protected scriptParameter!: CommandLineStringParameter;\r\n  protected argsParameter!: CommandLineStringParameter;\r\n  protected quietParameter!: CommandLineFlagParameter;\r\n  protected ignoreExitCodeParameter!: CommandLineFlagParameter;\r\n\r\n  public constructor(options: ICommandLineActionOptions) {\r\n    super(options);\r\n  }\r\n\r\n  // abstract\r\n  protected onDefineParameters(): void {\r\n    this.scriptParameter = this.defineStringParameter({\r\n      parameterLongName: '--script',\r\n      parameterShortName: '-s',\r\n      argumentName: 'PATH',\r\n      description: 'The path to a .js file that will be the entry point for the target Node.js process',\r\n      required: true\r\n    });\r\n    this.argsParameter = this.defineStringParameter({\r\n      parameterLongName: '--args',\r\n      parameterShortName: '-a',\r\n      argumentName: 'STRING',\r\n      description:\r\n        'Specifies command-line arguments to be passed to the target Node.js process.  The value' +\r\n        ' should be a single text string delimited by spaces.' +\r\n        ' Example: rundown inspect --scripts ./example.js --args=\"--flag --option=123\"'\r\n    });\r\n    this.quietParameter = this.defineFlagParameter({\r\n      parameterLongName: '--quiet',\r\n      parameterShortName: '-q',\r\n      description: 'Suppress STDOUT/STDERR for the target Node.js process'\r\n    });\r\n    this.ignoreExitCodeParameter = this.defineFlagParameter({\r\n      parameterLongName: '--ignore-exit-code',\r\n      parameterShortName: '-i',\r\n      description: 'Do not report an error if the target Node.js process returns a nonzero exit code'\r\n    });\r\n  }\r\n}\r\n"]}