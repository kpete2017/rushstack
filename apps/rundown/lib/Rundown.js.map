{"version":3,"file":"Rundown.js","sourceRoot":"","sources":["../src/Rundown.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { FileSystem, PackageJsonLookup, Sort, Text } from '@rushstack/node-core-library';\r\nimport * as child_process from 'child_process';\r\nimport * as path from 'path';\r\nimport stringArgv from 'string-argv';\r\n\r\nimport { IpcMessage } from './LauncherTypes';\r\n\r\nexport class Rundown {\r\n  // Map from required path --> caller path\r\n  private _importedModuleMap: Map<string, string> = new Map();\r\n\r\n  public async invokeAsync(\r\n    scriptPath: string,\r\n    args: string | undefined,\r\n    quiet: boolean,\r\n    ignoreExitCode: boolean\r\n  ): Promise<void> {\r\n    if (!FileSystem.exists(scriptPath)) {\r\n      throw new Error('The specified script path does not exist: ' + scriptPath);\r\n    }\r\n    const absoluteScriptPath: string = path.resolve(scriptPath);\r\n\r\n    const expandedArgs: string[] = args === undefined ? [] : stringArgv(args);\r\n\r\n    console.log('Starting process: ' + [absoluteScriptPath, ...expandedArgs].join(' '));\r\n    console.log();\r\n\r\n    // Example process.argv:\r\n    // [\"path/to/launcher.js\", \"path/to/target-script.js\", \"first-target-arg\"]\r\n    const nodeArgs: string[] = [path.join(__dirname, 'launcher.js'), absoluteScriptPath, ...expandedArgs];\r\n\r\n    await this._spawnLauncherAsync(nodeArgs, quiet, ignoreExitCode);\r\n\r\n    if (!quiet) {\r\n      console.log();\r\n    }\r\n  }\r\n\r\n  public writeSnapshotReport(): void {\r\n    const reportPath: string = 'rundown-snapshot.log';\r\n    console.log('Writing report file: ' + reportPath);\r\n\r\n    const packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n    const importedPaths: string[] = [...this._importedModuleMap.keys()];\r\n    const importedPackageFolders: Set<string> = new Set();\r\n\r\n    for (const importedPath of importedPaths) {\r\n      const importedPackageFolder: string | undefined =\r\n        packageJsonLookup.tryGetPackageFolderFor(importedPath);\r\n      if (importedPackageFolder) {\r\n        if (/[\\\\/]node_modules[\\\\/]/i.test(importedPackageFolder)) {\r\n          importedPackageFolders.add(path.basename(importedPackageFolder));\r\n        } else {\r\n          const relativePath: string = path.relative(process.cwd(), importedPackageFolder);\r\n          importedPackageFolders.add(Text.replaceAll(relativePath, '\\\\', '/'));\r\n        }\r\n      } else {\r\n        // If the importedPath does not belong to an NPM package, then rundown-snapshot.log can ignore it.\r\n        // In other words, treat it the same way as the local project's source files.\r\n      }\r\n    }\r\n\r\n    Sort.sortSet(importedPackageFolders);\r\n    const data: string = [...importedPackageFolders].join('\\n') + '\\n';\r\n\r\n    FileSystem.writeFile(reportPath, data);\r\n  }\r\n\r\n  public writeInspectReport(traceImports: boolean): void {\r\n    const reportPath: string = 'rundown-inspect.log';\r\n    console.log('Writing report file: ' + reportPath);\r\n\r\n    const importedPaths: string[] = [...this._importedModuleMap.keys()];\r\n    importedPaths.sort();\r\n\r\n    let data: string = '';\r\n\r\n    if (traceImports) {\r\n      for (const importedPath of importedPaths) {\r\n        data += importedPath + '\\n';\r\n\r\n        let current: string = importedPath;\r\n        const visited: Set<string> = new Set();\r\n        for (;;) {\r\n          const callerPath: string | undefined = this._importedModuleMap.get(current);\r\n          if (!callerPath) {\r\n            break;\r\n          }\r\n          if (visited.has(callerPath)) {\r\n            break;\r\n          }\r\n          visited.add(callerPath);\r\n          data += '  imported by ' + callerPath + '\\n';\r\n          current = callerPath;\r\n        }\r\n        data += '\\n';\r\n      }\r\n    } else {\r\n      data = importedPaths.join('\\n') + '\\n';\r\n    }\r\n\r\n    FileSystem.writeFile(reportPath, data);\r\n  }\r\n\r\n  private async _spawnLauncherAsync(\r\n    nodeArgs: string[],\r\n    quiet: boolean,\r\n    ignoreExitCode: boolean\r\n  ): Promise<void> {\r\n    const childProcess: child_process.ChildProcess = child_process.spawn(process.execPath, nodeArgs, {\r\n      stdio: quiet ? ['inherit', 'ignore', 'ignore', 'ipc'] : ['inherit', 'inherit', 'inherit', 'ipc']\r\n    });\r\n\r\n    let completedNormally: boolean = false;\r\n\r\n    childProcess.on('message', (message: IpcMessage): void => {\r\n      switch (message.id) {\r\n        case 'trace':\r\n          for (const record of message.records) {\r\n            this._importedModuleMap.set(record.importedModule, record.callingModule);\r\n          }\r\n          break;\r\n        case 'done':\r\n          completedNormally = true;\r\n          break;\r\n        default:\r\n          throw new Error('Unknown IPC message: ' + JSON.stringify(message));\r\n      }\r\n    });\r\n\r\n    await new Promise<void>((resolve, reject) => {\r\n      childProcess.on('exit', (code: number | null, signal: string | null): void => {\r\n        if (code !== 0 && !ignoreExitCode) {\r\n          reject(new Error('Child process terminated with exit code ' + code));\r\n        } else if (!completedNormally) {\r\n          reject(new Error('Child process terminated without completing IPC handshake'));\r\n        } else {\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n"]}