{"version":3,"file":"launcher.js","sourceRoot":"","sources":["../src/launcher.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;AAE3D,oCAAqC;AACrC,sDAA8B;AAK9B,sFAAsF;AACtF,MAAM,cAAc,GAAW,GAAG,CAAC;AAEnC,MAAM,QAAQ;IAAd;QACS,WAAM,2BAA0C;QAChD,wBAAmB,GAAW,EAAE,CAAC;QACjC,eAAU,GAAW,EAAE,CAAC;QACvB,qBAAgB,GAAiB,IAAI,GAAG,EAAE,CAAC;QAC3C,yBAAoB,GAAgB,IAAI,GAAG,EAAE,CAAC;QAC9C,0BAAqB,GAAsB,EAAE,CAAC;IA8GxD,CAAC;IA5GQ,aAAa,CAAC,IAA2B;QAC9C,IAAI,OAAe,CAAC;QACpB,IAAI,aAAuB,CAAC;QAE5B,wBAAwB;QACxB,8FAA8F;QAC9F,CAAC,OAAO,EAAE,AAAD,EAAG,IAAI,CAAC,mBAAmB,EAAE,GAAG,aAAa,CAAC,GAAG,IAAI,CAAC;QAE/D,wBAAwB;QACxB,uEAAuE;QACvE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,EAAE,GAAG,aAAa,CAAC,CAAC;IAC/D,CAAC;IAED,8DAA8D;IACtD,MAAM,CAAC,eAAe,CAAC,GAAQ,EAAE,GAAQ;QAC/C,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACnC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;SACvB;IACH,CAAC;IAEO,kBAAkB;QACxB,IAAI,IAAI,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC,EAAE;YACzC,MAAM,KAAK,GAAsB,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACjE,IAAI,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC;YAEtC,iBAAO,CAAC,IAAK,CAAC;gBACZ,EAAE,EAAE,OAAO;gBACX,OAAO,EAAE,KAAK;aACF,CAAC,CAAC;SACjB;IACH,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,QAAQ,CAAC,YAAoB;QAC1C,OAAO,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;IAC7E,CAAC;IAEM,WAAW;QAChB,MAAM,WAAW,GAAwB,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC;QAE5E,MAAM,eAAe,GAAiB,IAAI,CAAC,gBAAgB,CAAC,CAAC,cAAc;QAC3E,MAAM,mBAAmB,GAAgB,IAAI,CAAC,oBAAoB,CAAC,CAAC,cAAc;QAClF,MAAM,oBAAoB,GAAsB,IAAI,CAAC,qBAAqB,CAAC,CAAC,cAAc;QAC1F,MAAM,iBAAiB,GAAe,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc;QAExF,SAAS,aAAa,CAAmB,UAAkB;YACzD,4EAA4E;YAC5E,iBAAiB;YACjB,MAAM,iBAAiB,GAAe,IAAI,CAAC;YAE3C,+FAA+F;YAC/F,8DAA8D;YAC9D,MAAM,cAAc,GAAa,WAAmB,CAAC,KAAK,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;YAEzF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;gBACxC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAEpC,wCAAwC;gBACxC,IAAI,kBAAkB,GAA2B,SAAS,CAAC;gBAC3D,MAAM,QAAQ,GAAiB,iBAAiB,CAAC,QAAQ,IAAI,EAAE,CAAC;gBAChE,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE;oBAC5B,IAAI,KAAK,CAAC,OAAO,KAAK,cAAc,EAAE;wBACpC,kBAAkB,GAAG,KAAK,CAAC;wBAC3B,MAAM;qBACP;iBACF;gBAED,IAAI,kBAAkB,KAAK,SAAS,EAAE;oBACpC,mCAAmC;iBACpC;qBAAM;oBACL,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE;wBAChC,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,UAAU,CAAC,CAAC;qBACvD;oBAED,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;wBACzD,mBAAmB,CAAC,GAAG,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;wBACrD,oBAAoB,CAAC,IAAI,CAAC;4BACxB,cAAc,EAAE,kBAAkB,CAAC,QAAQ;4BAC3C,aAAa,EAAE,iBAAiB,CAAC,QAAQ;yBAC1C,CAAC,CAAC;wBACH,IAAI,oBAAoB,CAAC,MAAM,IAAI,cAAc,EAAE;4BACjD,iBAAiB,EAAE,CAAC;yBACrB;qBACF;iBACF;aACF;YAED,OAAO,cAAc,CAAC;QACxB,CAAC;QAED,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,aAAa,CAAC;QACnD,QAAQ,CAAC,eAAe,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAErD,iBAAO,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;YACtB,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,iBAAO,CAAC,IAAK,CAAC;gBACZ,EAAE,EAAE,MAAM;aACC,CAAC,CAAC;YAEf,4GAA4G;YAC5G,uGAAuG;YACvG,wGAAwG;YACxG,4DAA4D;YAC5D,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,IAAI,CAAC,iBAAO,CAAC,IAAI,EAAE;IACjB,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;CACxD;AAED,MAAM,QAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;AAE1C,MAAM,YAAY,GAA0B,CAAC,GAAG,iBAAO,CAAC,IAAI,CAAC,CAAC;AAC9D,iBAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AACxB,iBAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC;AAE3D,QAAQ,CAAC,WAAW,EAAE,CAAC;AAEvB,gBAAgB;AAChB,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport moduleApi = require('module');\r\nimport process from 'process';\r\n\r\nimport { LauncherAction } from './LauncherTypes'; // \"import type\" doesn't work with const enums\r\nimport type { IIpcTrace, IIpcDone, IIpcTraceRecord } from './LauncherTypes';\r\n\r\n// The _ipcTraceRecordsBatch will get transmitted when this many items are accumulated\r\nconst IPC_BATCH_SIZE: number = 300;\r\n\r\nclass Launcher {\r\n  public action: LauncherAction = LauncherAction.Inspect;\r\n  public targetScriptPathArg: string = '';\r\n  public reportPath: string = '';\r\n  private _importedModules: Set<unknown> = new Set();\r\n  private _importedModulePaths: Set<string> = new Set();\r\n  private _ipcTraceRecordsBatch: IIpcTraceRecord[] = [];\r\n\r\n  public transformArgs(argv: ReadonlyArray<string>): string[] {\r\n    let nodeArg: string;\r\n    let remainderArgs: string[];\r\n\r\n    // Example process.argv:\r\n    // [\"path/to/node.exe\", \"path/to/launcher.js\", \"path/to/target-script.js\", \"first-target-arg\"]\r\n    [nodeArg, , this.targetScriptPathArg, ...remainderArgs] = argv;\r\n\r\n    // Example process.argv:\r\n    // [\"path/to/node.exe\", \"path/to/target-script.js\", \"first-target-arg\"]\r\n    return [nodeArg, this.targetScriptPathArg, ...remainderArgs];\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  private static _copyProperties(dst: any, src: any): void {\r\n    for (const prop of Object.keys(src)) {\r\n      dst[prop] = src[prop];\r\n    }\r\n  }\r\n\r\n  private _sendIpcTraceBatch(): void {\r\n    if (this._ipcTraceRecordsBatch.length > 0) {\r\n      const batch: IIpcTraceRecord[] = [...this._ipcTraceRecordsBatch];\r\n      this._ipcTraceRecordsBatch.length = 0;\r\n\r\n      process.send!({\r\n        id: 'trace',\r\n        records: batch\r\n      } as IIpcTrace);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Synchronously delay for the specified time interval.\r\n   */\r\n  private static _delayMs(milliseconds: number): void {\r\n    Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, milliseconds);\r\n  }\r\n\r\n  public installHook(): void {\r\n    const realRequire: NodeRequireFunction = moduleApi.Module.prototype.require;\r\n\r\n    const importedModules: Set<unknown> = this._importedModules; // for closure\r\n    const importedModulePaths: Set<string> = this._importedModulePaths; // for closure\r\n    const ipcTraceRecordsBatch: IIpcTraceRecord[] = this._ipcTraceRecordsBatch; // for closure\r\n    const sendIpcTraceBatch: () => void = this._sendIpcTraceBatch.bind(this); // for closure\r\n\r\n    function hookedRequire(this: NodeModule, moduleName: string): unknown {\r\n      // NOTE: The \"this\" pointer is the calling NodeModule, so we rely on closure\r\n      // variable here.\r\n      const callingModuleInfo: NodeModule = this;\r\n\r\n      // Paranoidly use \"arguments\" in case some implementor passes additional undocumented arguments\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      const importedModule: unknown = (realRequire as any).apply(callingModuleInfo, arguments);\r\n\r\n      if (!importedModules.has(importedModule)) {\r\n        importedModules.add(importedModule);\r\n\r\n        // Find the info for the imported module\r\n        let importedModuleInfo: NodeModule | undefined = undefined;\r\n        const children: NodeModule[] = callingModuleInfo.children || [];\r\n        for (const child of children) {\r\n          if (child.exports === importedModule) {\r\n            importedModuleInfo = child;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (importedModuleInfo === undefined) {\r\n          // It's a built-in module like \"os\"\r\n        } else {\r\n          if (!importedModuleInfo.filename) {\r\n            throw new Error('Missing filename for ' + moduleName);\r\n          }\r\n\r\n          if (!importedModulePaths.has(importedModuleInfo.filename)) {\r\n            importedModulePaths.add(importedModuleInfo.filename);\r\n            ipcTraceRecordsBatch.push({\r\n              importedModule: importedModuleInfo.filename,\r\n              callingModule: callingModuleInfo.filename\r\n            });\r\n            if (ipcTraceRecordsBatch.length >= IPC_BATCH_SIZE) {\r\n              sendIpcTraceBatch();\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return importedModule;\r\n    }\r\n\r\n    moduleApi.Module.prototype.require = hookedRequire;\r\n    Launcher._copyProperties(hookedRequire, realRequire);\r\n\r\n    process.on('exit', () => {\r\n      this._sendIpcTraceBatch();\r\n      process.send!({\r\n        id: 'done'\r\n      } as IIpcDone);\r\n\r\n      // The Node.js \"exit\" event is synchronous, and the process will terminate as soon as this function returns.\r\n      // To avoid a race condition, allow some time for IPC messages to be transmitted to the parent process.\r\n      // TODO: There should be a way to eliminate this delay by intercepting earlier in the shutdown sequence,\r\n      // but it needs to consider every way that Node.js can exit.\r\n      Launcher._delayMs(500);\r\n    });\r\n  }\r\n}\r\n\r\nif (!process.send) {\r\n  throw new Error('launcher.js must be invoked via IPC');\r\n}\r\n\r\nconst launcher: Launcher = new Launcher();\r\n\r\nconst originalArgv: ReadonlyArray<string> = [...process.argv];\r\nprocess.argv.length = 0;\r\nprocess.argv.push(...launcher.transformArgs(originalArgv));\r\n\r\nlauncher.installHook();\r\n\r\n// Start the app\r\nrequire(launcher.targetScriptPathArg);\r\n"]}