{"version":3,"file":"ToolPackageResolver.js","sourceRoot":"","sources":["../../src/utilities/ToolPackageResolver.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Terminal, PackageJsonLookup, INodePackageJson, Import } from '@rushstack/node-core-library';\r\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\r\nimport { RigConfig } from '@rushstack/rig-package';\r\n\r\nexport interface IToolPackageResolution {\r\n  typeScriptPackagePath: string | undefined;\r\n  tslintPackagePath: string | undefined;\r\n  eslintPackagePath: string | undefined;\r\n  apiExtractorPackagePath: string | undefined;\r\n}\r\n\r\nexport class ToolPackageResolver {\r\n  private _packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n  private _resolverCache: Map<string, Promise<IToolPackageResolution>> = new Map<\r\n    string,\r\n    Promise<IToolPackageResolution>\r\n  >();\r\n\r\n  public async resolveToolPackagesAsync(\r\n    heftConfiguration: HeftConfiguration,\r\n    terminal: Terminal\r\n  ): Promise<IToolPackageResolution> {\r\n    const buildFolder: string = heftConfiguration.buildFolder;\r\n    const projectFolder: string | undefined = this._packageJsonLookup.tryGetPackageFolderFor(buildFolder);\r\n    if (!projectFolder) {\r\n      throw new Error(`Unable to find a package.json file for \"${buildFolder}\" `);\r\n    }\r\n\r\n    let resolutionPromise: Promise<IToolPackageResolution> | undefined =\r\n      this._resolverCache.get(projectFolder);\r\n    if (!resolutionPromise) {\r\n      resolutionPromise = this._resolveToolPackagesInnerAsync(heftConfiguration, terminal);\r\n      this._resolverCache.set(projectFolder, resolutionPromise);\r\n    }\r\n\r\n    return await resolutionPromise;\r\n  }\r\n\r\n  private async _resolveToolPackagesInnerAsync(\r\n    heftConfiguration: HeftConfiguration,\r\n    terminal: Terminal\r\n  ): Promise<IToolPackageResolution> {\r\n    // The following rules will apply independently to each tool (TypeScript, AE, ESLint, TSLint)\r\n    // - If the local project has a devDependency (not regular or peer dependency) on the tool,\r\n    // that has highest precedence.\r\n    // - OTHERWISE if there is a rig.json file, then look at the rig's package.json. Does it have a\r\n    // regular dependency (not dev or peer dependency) on the tool? If yes, then\r\n    // resolve the tool from the rig package folder.\r\n    // - OTHERWISE try to resolve it from the current project.\r\n\r\n    const typeScriptPackageResolvePromise: Promise<string | undefined> = this._tryResolveToolPackageAsync(\r\n      'typescript',\r\n      heftConfiguration,\r\n      terminal\r\n    );\r\n    const tslintPackageResolvePromise: Promise<string | undefined> = this._tryResolveToolPackageAsync(\r\n      'tslint',\r\n      heftConfiguration,\r\n      terminal\r\n    );\r\n    const eslintPackageResolvePromise: Promise<string | undefined> = this._tryResolveToolPackageAsync(\r\n      'eslint',\r\n      heftConfiguration,\r\n      terminal\r\n    );\r\n    const apiExtractorPackageResolvePromise: Promise<string | undefined> = this._tryResolveToolPackageAsync(\r\n      '@microsoft/api-extractor',\r\n      heftConfiguration,\r\n      terminal\r\n    );\r\n\r\n    const [typeScriptPackagePath, tslintPackagePath, eslintPackagePath, apiExtractorPackagePath] =\r\n      await Promise.all([\r\n        typeScriptPackageResolvePromise,\r\n        tslintPackageResolvePromise,\r\n        eslintPackageResolvePromise,\r\n        apiExtractorPackageResolvePromise\r\n      ]);\r\n    return {\r\n      apiExtractorPackagePath,\r\n      typeScriptPackagePath,\r\n      tslintPackagePath,\r\n      eslintPackagePath\r\n    };\r\n  }\r\n\r\n  private async _tryResolveToolPackageAsync(\r\n    toolPackageName: string,\r\n    heftConfiguration: HeftConfiguration,\r\n    terminal: Terminal\r\n  ): Promise<string | undefined> {\r\n    // See if the project has a devDependency on the package\r\n    if (\r\n      heftConfiguration.projectPackageJson.devDependencies &&\r\n      heftConfiguration.projectPackageJson.devDependencies[toolPackageName]\r\n    ) {\r\n      try {\r\n        const resolvedPackageFolder: string = Import.resolvePackage({\r\n          packageName: toolPackageName,\r\n          baseFolderPath: heftConfiguration.buildFolder\r\n        });\r\n        terminal.writeVerboseLine(`Resolved \"${toolPackageName}\" as a direct devDependency of the project.`);\r\n        return resolvedPackageFolder;\r\n      } catch (e) {\r\n        terminal.writeWarningLine(\r\n          `\"${toolPackageName}\" is listed as a direct devDependency of the project, but could not be resolved. ` +\r\n            'Have dependencies been installed?'\r\n        );\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    const rigConfiguration: RigConfig = heftConfiguration.rigConfig;\r\n    if (rigConfiguration.rigFound) {\r\n      const rigFolder: string = rigConfiguration.getResolvedProfileFolder();\r\n      const rigPackageJsonPath: string | undefined =\r\n        this._packageJsonLookup.tryGetPackageJsonFilePathFor(rigFolder);\r\n      if (!rigPackageJsonPath) {\r\n        throw new Error(\r\n          `Unable to resolve the package.json file for the \"${rigConfiguration.rigPackageName}\" rig package.`\r\n        );\r\n      }\r\n      const rigPackageJson: INodePackageJson =\r\n        this._packageJsonLookup.loadNodePackageJson(rigPackageJsonPath);\r\n      if (rigPackageJson.dependencies && rigPackageJson.dependencies[toolPackageName]) {\r\n        try {\r\n          const resolvedPackageFolder: string = Import.resolvePackage({\r\n            packageName: toolPackageName,\r\n            baseFolderPath: path.dirname(rigPackageJsonPath)\r\n          });\r\n          terminal.writeVerboseLine(\r\n            `Resolved \"${toolPackageName}\" as a dependency of the \"${rigConfiguration.rigPackageName}\" rig package.`\r\n          );\r\n          return resolvedPackageFolder;\r\n        } catch (e) {\r\n          terminal.writeWarningLine(\r\n            `\"${toolPackageName}\" is listed as a dependency of the \"${rigConfiguration.rigPackageName}\" rig package, ` +\r\n              'but could not be resolved. Have dependencies been installed?'\r\n          );\r\n          return undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    try {\r\n      const resolvedPackageFolder: string = Import.resolvePackage({\r\n        packageName: toolPackageName,\r\n        baseFolderPath: heftConfiguration.buildFolder\r\n      });\r\n      terminal.writeVerboseLine(`Resolved \"${toolPackageName}\" from ${resolvedPackageFolder}.`);\r\n      return resolvedPackageFolder;\r\n    } catch (e) {\r\n      // Ignore\r\n      return undefined;\r\n    }\r\n  }\r\n}\r\n"]}