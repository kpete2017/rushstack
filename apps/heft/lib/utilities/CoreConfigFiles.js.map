{"version":3,"file":"CoreConfigFiles.js","sourceRoot":"","sources":["../../src/utilities/CoreConfigFiles.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport {\r\n  ConfigurationFile,\r\n  IConfigurationFileOptions,\r\n  InheritanceType,\r\n  PathResolutionMethod\r\n} from '@rushstack/heft-config-file';\r\n\r\nimport { IApiExtractorPluginConfiguration } from '../plugins/ApiExtractorPlugin/ApiExtractorPlugin';\r\nimport { ITypeScriptConfigurationJson } from '../plugins/TypeScriptPlugin/TypeScriptPlugin';\r\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\r\nimport { Terminal } from '@rushstack/node-core-library';\r\nimport { ISassConfigurationJson } from '../plugins/SassTypingsPlugin/SassTypingsPlugin';\r\nimport { INodeServicePluginConfiguration } from '../plugins/NodeServicePlugin';\r\n\r\nexport enum HeftEvent {\r\n  // Part of the 'clean' stage\r\n  clean = 'clean',\r\n\r\n  // Part of the 'build' stage\r\n  preCompile = 'pre-compile',\r\n  compile = 'compile',\r\n  bundle = 'bundle',\r\n  postBuild = 'post-build',\r\n\r\n  // Part of the 'test' stage\r\n  test = 'test'\r\n}\r\n\r\nexport interface IHeftConfigurationJsonEventActionBase {\r\n  actionKind: string;\r\n  heftEvent: 'clean' | 'pre-compile' | 'compile' | 'bundle' | 'post-build' | 'test';\r\n  actionId: string;\r\n}\r\n\r\nexport interface IHeftConfigurationDeleteGlobsEventAction extends IHeftConfigurationJsonEventActionBase {\r\n  actionKind: 'deleteGlobs';\r\n  globsToDelete: string[];\r\n}\r\n\r\nexport interface IHeftConfigurationRunScriptEventAction extends IHeftConfigurationJsonEventActionBase {\r\n  actionKind: 'runScript';\r\n  scriptPath: string;\r\n  scriptOptions: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n}\r\n\r\nexport interface ISharedCopyConfiguration {\r\n  /**\r\n   * File extensions that should be copied from the source folder to the destination folder(s)\r\n   */\r\n  fileExtensions?: string[];\r\n\r\n  /**\r\n   * Globs that should be explicitly excluded. This takes precedence over globs listed in \"includeGlobs\" and\r\n   * files that match the file extensions provided in \"fileExtensions\".\r\n   */\r\n  excludeGlobs?: string[];\r\n\r\n  /**\r\n   * Globs that should be explicitly included.\r\n   */\r\n  includeGlobs?: string[];\r\n\r\n  /**\r\n   * Copy only the file and discard the relative path from the source folder.\r\n   */\r\n  flatten?: boolean;\r\n\r\n  /**\r\n   * Hardlink files instead of copying.\r\n   */\r\n  hardlink?: boolean;\r\n}\r\n\r\nexport interface IExtendedSharedCopyConfiguration extends ISharedCopyConfiguration {\r\n  /**\r\n   * The folder from which files should be copied, relative to the project root. For example, \"src\".\r\n   */\r\n  sourceFolder: string;\r\n\r\n  /**\r\n   * Folder(s) to which files should be copied, relative to the project root. For example [\"lib\", \"lib-cjs\"].\r\n   */\r\n  destinationFolders: string[];\r\n}\r\n\r\nexport interface IHeftConfigurationCopyFilesEventAction extends IHeftConfigurationJsonEventActionBase {\r\n  actionKind: 'copyFiles';\r\n  copyOperations: IExtendedSharedCopyConfiguration[];\r\n}\r\n\r\nexport interface IHeftConfigurationJsonPluginSpecifier {\r\n  plugin: string;\r\n  options?: object;\r\n}\r\n\r\nexport interface IHeftConfigurationJson {\r\n  eventActions?: IHeftConfigurationJsonEventActionBase[];\r\n  heftPlugins?: IHeftConfigurationJsonPluginSpecifier[];\r\n}\r\n\r\nexport interface IHeftEventActions {\r\n  copyFiles: Map<HeftEvent, IHeftConfigurationCopyFilesEventAction[]>;\r\n  deleteGlobs: Map<HeftEvent, IHeftConfigurationDeleteGlobsEventAction[]>;\r\n  runScript: Map<HeftEvent, IHeftConfigurationRunScriptEventAction[]>;\r\n}\r\n\r\nexport class CoreConfigFiles {\r\n  private static _heftConfigFileLoader: ConfigurationFile<IHeftConfigurationJson> | undefined;\r\n\r\n  private static _heftConfigFileEventActionsCache: Map<HeftConfiguration, IHeftEventActions> = new Map<\r\n    HeftConfiguration,\r\n    IHeftEventActions\r\n  >();\r\n\r\n  private static _apiExtractorTaskConfigurationLoader:\r\n    | ConfigurationFile<IApiExtractorPluginConfiguration>\r\n    | undefined;\r\n  private static _typeScriptConfigurationFileLoader:\r\n    | ConfigurationFile<ITypeScriptConfigurationJson>\r\n    | undefined;\r\n  private static _nodeServiceConfigurationLoader:\r\n    | ConfigurationFile<INodeServicePluginConfiguration>\r\n    | undefined;\r\n  private static _sassConfigurationFileLoader: ConfigurationFile<ISassConfigurationJson> | undefined;\r\n\r\n  /**\r\n   * Returns the loader for the `config/heft.json` config file.\r\n   */\r\n  public static get heftConfigFileLoader(): ConfigurationFile<IHeftConfigurationJson> {\r\n    if (!CoreConfigFiles._heftConfigFileLoader) {\r\n      const schemaPath: string = path.join(__dirname, '..', 'schemas', 'heft.schema.json');\r\n      CoreConfigFiles._heftConfigFileLoader = new ConfigurationFile<IHeftConfigurationJson>({\r\n        projectRelativeFilePath: 'config/heft.json',\r\n        jsonSchemaPath: schemaPath,\r\n        propertyInheritance: {\r\n          heftPlugins: {\r\n            inheritanceType: InheritanceType.append\r\n          }\r\n        },\r\n        jsonPathMetadata: {\r\n          '$.heftPlugins.*.plugin': {\r\n            pathResolutionMethod: PathResolutionMethod.NodeResolve\r\n          },\r\n          '$.eventActions.[?(@.actionKind===\"runScript\")].scriptPath': {\r\n            pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToProjectRoot\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return CoreConfigFiles._heftConfigFileLoader;\r\n  }\r\n\r\n  /**\r\n   * Gets the eventActions from config/heft.json\r\n   */\r\n  public static async getConfigConfigFileEventActionsAsync(\r\n    terminal: Terminal,\r\n    heftConfiguration: HeftConfiguration\r\n  ): Promise<IHeftEventActions> {\r\n    let result: IHeftEventActions | undefined =\r\n      CoreConfigFiles._heftConfigFileEventActionsCache.get(heftConfiguration);\r\n    if (!result) {\r\n      const heftConfigJson: IHeftConfigurationJson | undefined =\r\n        await CoreConfigFiles.heftConfigFileLoader.tryLoadConfigurationFileForProjectAsync(\r\n          terminal,\r\n          heftConfiguration.buildFolder,\r\n          heftConfiguration.rigConfig\r\n        );\r\n\r\n      result = {\r\n        copyFiles: new Map<HeftEvent, IHeftConfigurationCopyFilesEventAction[]>(),\r\n        deleteGlobs: new Map<HeftEvent, IHeftConfigurationDeleteGlobsEventAction[]>(),\r\n        runScript: new Map<HeftEvent, IHeftConfigurationRunScriptEventAction[]>()\r\n      };\r\n      CoreConfigFiles._heftConfigFileEventActionsCache.set(heftConfiguration, result);\r\n\r\n      for (const eventAction of heftConfigJson?.eventActions || []) {\r\n        switch (eventAction.actionKind) {\r\n          case 'copyFiles': {\r\n            CoreConfigFiles._addEventActionToMap(\r\n              eventAction as IHeftConfigurationCopyFilesEventAction,\r\n              result.copyFiles\r\n            );\r\n            break;\r\n          }\r\n\r\n          case 'deleteGlobs': {\r\n            CoreConfigFiles._addEventActionToMap(\r\n              eventAction as IHeftConfigurationDeleteGlobsEventAction,\r\n              result.deleteGlobs\r\n            );\r\n            break;\r\n          }\r\n\r\n          case 'runScript': {\r\n            CoreConfigFiles._addEventActionToMap(\r\n              eventAction as IHeftConfigurationRunScriptEventAction,\r\n              result.runScript\r\n            );\r\n            break;\r\n          }\r\n\r\n          default: {\r\n            throw new Error(\r\n              `Unknown heft eventAction actionKind \"${eventAction.actionKind}\" in ` +\r\n                `\"${CoreConfigFiles.heftConfigFileLoader.getObjectSourceFilePath(eventAction)}\" `\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns the loader for the `config/api-extractor-task.json` config file.\r\n   */\r\n  public static get apiExtractorTaskConfigurationLoader(): ConfigurationFile<IApiExtractorPluginConfiguration> {\r\n    if (!CoreConfigFiles._apiExtractorTaskConfigurationLoader) {\r\n      const schemaPath: string = path.resolve(__dirname, '..', 'schemas', 'api-extractor-task.schema.json');\r\n      CoreConfigFiles._apiExtractorTaskConfigurationLoader =\r\n        new ConfigurationFile<IApiExtractorPluginConfiguration>({\r\n          projectRelativeFilePath: 'config/api-extractor-task.json',\r\n          jsonSchemaPath: schemaPath\r\n        });\r\n    }\r\n\r\n    return CoreConfigFiles._apiExtractorTaskConfigurationLoader;\r\n  }\r\n\r\n  /**\r\n   * Returns the loader for the `config/typescript.json` config file.\r\n   */\r\n  public static get typeScriptConfigurationFileLoader(): ConfigurationFile<ITypeScriptConfigurationJson> {\r\n    if (!CoreConfigFiles._typeScriptConfigurationFileLoader) {\r\n      const schemaPath: string = path.resolve(__dirname, '..', 'schemas', 'typescript.schema.json');\r\n      CoreConfigFiles._typeScriptConfigurationFileLoader =\r\n        new ConfigurationFile<ITypeScriptConfigurationJson>({\r\n          projectRelativeFilePath: 'config/typescript.json',\r\n          jsonSchemaPath: schemaPath,\r\n          propertyInheritance: {\r\n            staticAssetsToCopy: {\r\n              inheritanceType: InheritanceType.custom,\r\n              inheritanceFunction: (\r\n                currentObject: ISharedCopyConfiguration,\r\n                parentObject: ISharedCopyConfiguration\r\n              ): ISharedCopyConfiguration => {\r\n                const result: ISharedCopyConfiguration = {};\r\n\r\n                CoreConfigFiles._inheritArray(result, 'fileExtensions', currentObject, parentObject);\r\n                CoreConfigFiles._inheritArray(result, 'includeGlobs', currentObject, parentObject);\r\n                CoreConfigFiles._inheritArray(result, 'excludeGlobs', currentObject, parentObject);\r\n\r\n                return result;\r\n              }\r\n            }\r\n          }\r\n        } as IConfigurationFileOptions<ITypeScriptConfigurationJson>);\r\n    }\r\n\r\n    return CoreConfigFiles._typeScriptConfigurationFileLoader;\r\n  }\r\n\r\n  /**\r\n   * Returns the loader for the `config/api-extractor-task.json` config file.\r\n   */\r\n  public static get nodeServiceConfigurationLoader(): ConfigurationFile<INodeServicePluginConfiguration> {\r\n    if (!CoreConfigFiles._nodeServiceConfigurationLoader) {\r\n      const schemaPath: string = path.resolve(__dirname, '..', 'schemas', 'node-service.schema.json');\r\n      CoreConfigFiles._nodeServiceConfigurationLoader =\r\n        new ConfigurationFile<INodeServicePluginConfiguration>({\r\n          projectRelativeFilePath: 'config/node-service.json',\r\n          jsonSchemaPath: schemaPath\r\n        });\r\n    }\r\n\r\n    return CoreConfigFiles._nodeServiceConfigurationLoader;\r\n  }\r\n\r\n  public static get sassConfigurationFileLoader(): ConfigurationFile<ISassConfigurationJson> {\r\n    const schemaPath: string = path.resolve(__dirname, '..', 'schemas', 'sass.schema.json');\r\n    CoreConfigFiles._sassConfigurationFileLoader = new ConfigurationFile<ISassConfigurationJson>({\r\n      projectRelativeFilePath: 'config/sass.json',\r\n      jsonSchemaPath: schemaPath,\r\n      jsonPathMetadata: {\r\n        '$.importIncludePaths.*': {\r\n          pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToProjectRoot\r\n        },\r\n        '$.generatedTsFolder.*': {\r\n          pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToProjectRoot\r\n        },\r\n        '$.srcFolder.*': {\r\n          pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToProjectRoot\r\n        }\r\n      }\r\n    });\r\n\r\n    return CoreConfigFiles._sassConfigurationFileLoader;\r\n  }\r\n\r\n  private static _addEventActionToMap<TEventAction extends IHeftConfigurationJsonEventActionBase>(\r\n    eventAction: TEventAction,\r\n    map: Map<HeftEvent, TEventAction[]>\r\n  ): void {\r\n    const heftEvent: HeftEvent = CoreConfigFiles._parseHeftEvent(eventAction);\r\n    let eventArray: TEventAction[] | undefined = map.get(heftEvent);\r\n    if (!eventArray) {\r\n      eventArray = [];\r\n      map.set(heftEvent, eventArray);\r\n    }\r\n\r\n    eventArray.push(eventAction);\r\n  }\r\n\r\n  private static _parseHeftEvent(eventAction: IHeftConfigurationJsonEventActionBase): HeftEvent {\r\n    switch (eventAction.heftEvent) {\r\n      case 'clean':\r\n        return HeftEvent.clean;\r\n\r\n      case 'pre-compile':\r\n        return HeftEvent.preCompile;\r\n\r\n      case 'compile':\r\n        return HeftEvent.compile;\r\n\r\n      case 'bundle':\r\n        return HeftEvent.bundle;\r\n\r\n      case 'post-build':\r\n        return HeftEvent.postBuild;\r\n\r\n      case 'test':\r\n        return HeftEvent.test;\r\n\r\n      default:\r\n        throw new Error(\r\n          `Unknown heft event \"${eventAction.heftEvent}\" in ` +\r\n            ` \"${CoreConfigFiles.heftConfigFileLoader.getObjectSourceFilePath(eventAction)}\".`\r\n        );\r\n    }\r\n  }\r\n\r\n  private static _inheritArray<\r\n    TResultObject extends { [P in TArrayKeys]?: unknown[] },\r\n    TArrayKeys extends keyof TResultObject\r\n  >(\r\n    resultObject: TResultObject,\r\n    propertyName: TArrayKeys,\r\n    currentObject: TResultObject,\r\n    parentObject: TResultObject\r\n  ): void {\r\n    let newValue: unknown[] | undefined;\r\n    if (currentObject[propertyName] && parentObject[propertyName]) {\r\n      newValue = [\r\n        ...(currentObject[propertyName] as unknown[]),\r\n        ...(parentObject[propertyName] as unknown[])\r\n      ];\r\n    } else {\r\n      newValue = currentObject[propertyName] || parentObject[propertyName];\r\n    }\r\n\r\n    if (newValue !== undefined) {\r\n      resultObject[propertyName] = newValue as TResultObject[TArrayKeys];\r\n    }\r\n  }\r\n}\r\n"]}