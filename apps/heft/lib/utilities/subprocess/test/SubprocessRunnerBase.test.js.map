{"version":3,"file":"SubprocessRunnerBase.test.js","sourceRoot":"","sources":["../../../../src/utilities/subprocess/test/SubprocessRunnerBase.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { SubprocessRunnerBase } from '../SubprocessRunnerBase';\r\nimport { FileError } from '../../../pluginFramework/logging/FileError';\r\n\r\ndescribe('SubprocessRunnerBase', () => {\r\n  it(`${SubprocessRunnerBase.serializeForIpcMessage.name} correctly serializes objects`, () => {\r\n    expect(SubprocessRunnerBase.serializeForIpcMessage(1)).toMatchSnapshot();\r\n    expect(SubprocessRunnerBase.serializeForIpcMessage(false)).toMatchSnapshot();\r\n    expect(SubprocessRunnerBase.serializeForIpcMessage('abc')).toMatchSnapshot();\r\n    expect(SubprocessRunnerBase.serializeForIpcMessage(null)).toMatchSnapshot();\r\n    expect(SubprocessRunnerBase.serializeForIpcMessage(undefined)).toMatchSnapshot();\r\n    const error: Error = new Error();\r\n    error.stack = 'ERROR STACK';\r\n    expect(SubprocessRunnerBase.serializeForIpcMessage(error)).toMatchSnapshot();\r\n    const fileError1: FileError = new FileError('message', 'path/to/file', 4, 29);\r\n    fileError1.stack = 'ERROR STACK';\r\n    expect(SubprocessRunnerBase.serializeForIpcMessage(fileError1)).toMatchSnapshot();\r\n    const fileError2: FileError = new FileError('message', 'path/to/file', 4);\r\n    fileError2.stack = 'ERROR STACK';\r\n    expect(SubprocessRunnerBase.serializeForIpcMessage(fileError2)).toMatchSnapshot();\r\n    const fileError3: FileError = new FileError('message', 'path/to/file');\r\n    fileError3.stack = 'ERROR STACK';\r\n    expect(SubprocessRunnerBase.serializeForIpcMessage(fileError3)).toMatchSnapshot();\r\n  });\r\n\r\n  it(`${SubprocessRunnerBase.serializeForIpcMessage.name} doesn't handle non-error objects`, () => {\r\n    expect(() => SubprocessRunnerBase.serializeForIpcMessage({})).toThrow();\r\n  });\r\n\r\n  it('de-serializes serialized objects', () => {\r\n    function testDeserialization(x: unknown): void {\r\n      expect(\r\n        SubprocessRunnerBase.deserializeFromIpcMessage(SubprocessRunnerBase.serializeForIpcMessage(x))\r\n      ).toEqual(x);\r\n    }\r\n\r\n    testDeserialization(1);\r\n    testDeserialization(false);\r\n    testDeserialization('abc');\r\n    testDeserialization(null);\r\n    testDeserialization(undefined);\r\n    testDeserialization(new Error());\r\n    const fileError1: FileError = new FileError('message', 'path/to/file', 4, 29);\r\n    testDeserialization(fileError1);\r\n    const fileError2: FileError = new FileError('message', 'path/to/file', 4);\r\n    testDeserialization(fileError2);\r\n    const fileError3: FileError = new FileError('message', 'path/to/file');\r\n    testDeserialization(fileError3);\r\n  });\r\n});\r\n"]}