{"version":3,"file":"SubprocessCommunicationManagerBase.js","sourceRoot":"","sources":["../../../src/utilities/subprocess/SubprocessCommunicationManagerBase.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAa3D,MAAsB,kCAAkC;IAItD,IAAc,0BAA0B;QACtC,OAAO,IAAI,CAAC,2BAA2B,CAAC;IAC1C,CAAC;IAED,IAAc,uBAAuB;QACnC,OAAO,IAAI,CAAC,wBAAwB,CAAC;IACvC,CAAC;IAEM,UAAU,CAAC,OAA6D;QAC7E,IAAI,CAAC,2BAA2B,GAAG,OAAO,CAAC,0BAA0B,CAAC;QACtE,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,uBAAuB,CAAC;IAClE,CAAC;IAEM,kBAAkB,CAAC,UAAqC;QAC7D,IAAI,CAAC,wBAAwB,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnE,CAAC;CAOF;AA1BD,gFA0BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as childProcess from 'child_process';\r\n\r\nimport { ISubprocessMessageBase } from './SubprocessCommunication';\r\n\r\nexport type SendMessageFunctionType = (message: ISubprocessMessageBase) => void;\r\n\r\nexport interface ISubprocessCommunicationManagerInitializationOptions {\r\n  sendMessageToParentProcess: SendMessageFunctionType;\r\n  sendMessageToSubprocess: SendMessageFunctionType;\r\n}\r\n\r\nexport abstract class SubprocessCommunicationManagerBase {\r\n  private _sendMessageToParentProcess!: SendMessageFunctionType;\r\n  private _sendMessageToSubprocess!: SendMessageFunctionType;\r\n\r\n  protected get sendMessageToParentProcess(): SendMessageFunctionType {\r\n    return this._sendMessageToParentProcess;\r\n  }\r\n\r\n  protected get sendMessageToSubprocess(): SendMessageFunctionType {\r\n    return this._sendMessageToSubprocess;\r\n  }\r\n\r\n  public initialize(options: ISubprocessCommunicationManagerInitializationOptions): void {\r\n    this._sendMessageToParentProcess = options.sendMessageToParentProcess;\r\n    this._sendMessageToSubprocess = options.sendMessageToSubprocess;\r\n  }\r\n\r\n  public registerSubprocess(subprocess: childProcess.ChildProcess): void {\r\n    this._sendMessageToSubprocess = subprocess.send.bind(subprocess);\r\n  }\r\n\r\n  public abstract canHandleMessageFromSubprocess(message: ISubprocessMessageBase): boolean;\r\n  public abstract receiveMessageFromSubprocess(message: ISubprocessMessageBase): void;\r\n\r\n  public abstract canHandleMessageFromParentProcess(message: ISubprocessMessageBase): boolean;\r\n  public abstract receiveMessageFromParentProcess(message: ISubprocessMessageBase): void;\r\n}\r\n"]}