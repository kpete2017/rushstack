{"version":3,"file":"SubprocessRunnerBase.js","sourceRoot":"","sources":["../../../src/utilities/subprocess/SubprocessRunnerBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as childProcess from 'child_process';\r\nimport * as path from 'path';\r\nimport { ITerminalProvider, Terminal } from '@rushstack/node-core-library';\r\n\r\nimport {\r\n  ISubprocessMessageBase,\r\n  ISubprocessApiCallArg,\r\n  SupportedSerializableArgType,\r\n  ISubprocessApiCallArgWithValue,\r\n  ISerializedErrorValue,\r\n  ISerializedFileErrorValue\r\n} from './SubprocessCommunication';\r\nimport { HeftSession } from '../../pluginFramework/HeftSession';\r\nimport { TerminalProviderManager } from './TerminalProviderManager';\r\nimport {\r\n  SubprocessCommunicationManagerBase,\r\n  ISubprocessCommunicationManagerInitializationOptions\r\n} from './SubprocessCommunicationManagerBase';\r\nimport { IScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\r\nimport { SubprocessLoggerManager } from './SubprocessLoggerManager';\r\nimport { FileError } from '../../pluginFramework/logging/FileError';\r\nimport { SubprocessTerminator } from './SubprocessTerminator';\r\n\r\nexport interface ISubprocessInnerConfiguration {\r\n  globalTerminalProviderId: number;\r\n  terminalSupportsColor: boolean;\r\n  terminalEolCharacter: string;\r\n}\r\n\r\nexport const SUBPROCESS_RUNNER_CLASS_LABEL: unique symbol = Symbol('IsSubprocessModule');\r\nexport const SUBPROCESS_RUNNER_INNER_INVOKE: unique symbol = Symbol('SubprocessInnerInvoke');\r\n\r\ninterface ISubprocessExitMessage extends ISubprocessMessageBase {\r\n  type: 'exit';\r\n  error: ISubprocessApiCallArg;\r\n}\r\n\r\n/**\r\n * This base class allows an computationally expensive task to be run in a separate NodeJS\r\n * process.\r\n *\r\n * The subprocess can be provided with a configuration, which must be JSON-serializable,\r\n * and the subprocess can log data via a Terminal object.\r\n */\r\nexport abstract class SubprocessRunnerBase<TSubprocessConfiguration> {\r\n  public static [SUBPROCESS_RUNNER_CLASS_LABEL]: boolean = true;\r\n  private static _subprocessInspectorPort: number = 9229 + 1; // 9229 is the default port\r\n\r\n  private _terminalProviderManager!: TerminalProviderManager;\r\n  private _scopedLoggerManager!: SubprocessLoggerManager;\r\n  private _subprocessCommunicationManagerInitializationOptions!: ISubprocessCommunicationManagerInitializationOptions;\r\n\r\n  private _innerConfiguration!: ISubprocessInnerConfiguration;\r\n  public _runningAsSubprocess: boolean = false;\r\n  protected readonly _configuration: TSubprocessConfiguration;\r\n\r\n  protected _globalTerminal!: Terminal;\r\n  private readonly _subprocessCommunicationManagers: SubprocessCommunicationManagerBase[] = [];\r\n\r\n  /**\r\n   * The subprocess filename. This should be set to __filename in the child class.\r\n   */\r\n  public abstract get filename(): string;\r\n\r\n  public get runningAsSubprocess(): boolean {\r\n    return this._runningAsSubprocess;\r\n  }\r\n\r\n  /**\r\n   * Constructs an instances of a subprocess runner\r\n   */\r\n  public constructor(\r\n    parentGlobalTerminalProvider: ITerminalProvider,\r\n    configuration: TSubprocessConfiguration,\r\n    heftSession: HeftSession\r\n  ) {\r\n    this._configuration = configuration;\r\n\r\n    if (parentGlobalTerminalProvider) {\r\n      // This is the parent process\r\n      this._innerConfiguration = {\r\n        globalTerminalProviderId: undefined!,\r\n        terminalEolCharacter: parentGlobalTerminalProvider.eolCharacter,\r\n        terminalSupportsColor: parentGlobalTerminalProvider.supportsColor\r\n      };\r\n\r\n      this._registerDefaultCommunicationManagers(\r\n        {\r\n          sendMessageToParentProcess: this._receiveMessageFromSubprocess.bind(this),\r\n          sendMessageToSubprocess: this._receiveMessageFromParentProcess.bind(this)\r\n        },\r\n        heftSession\r\n      );\r\n\r\n      const globalTerminalProviderId: number = this._terminalProviderManager.registerTerminalProvider(\r\n        parentGlobalTerminalProvider\r\n      );\r\n      this._innerConfiguration.globalTerminalProviderId = globalTerminalProviderId;\r\n      this._globalTerminal = new Terminal(\r\n        this._terminalProviderManager.registerSubprocessTerminalProvider(globalTerminalProviderId)\r\n      );\r\n    }\r\n  }\r\n\r\n  public static initializeSubprocess<TSubprocessConfiguration>(\r\n    thisType: new (\r\n      parentGlobalTerminalProvider: ITerminalProvider,\r\n      configuration: TSubprocessConfiguration,\r\n      heftSession: HeftSession\r\n    ) => SubprocessRunnerBase<TSubprocessConfiguration>,\r\n    innerConfiguration: ISubprocessInnerConfiguration,\r\n    configuration: TSubprocessConfiguration\r\n  ): SubprocessRunnerBase<TSubprocessConfiguration> {\r\n    const subprocessRunner: SubprocessRunnerBase<TSubprocessConfiguration> = new thisType(\r\n      undefined!,\r\n      configuration,\r\n      undefined!\r\n    );\r\n    subprocessRunner._runningAsSubprocess = true;\r\n    subprocessRunner._innerConfiguration = innerConfiguration;\r\n\r\n    subprocessRunner._registerDefaultCommunicationManagers(\r\n      {\r\n        sendMessageToParentProcess: process.send!.bind(process),\r\n        sendMessageToSubprocess: () => {\r\n          throw new Error('A subprocess cannot send a message to itself.');\r\n        }\r\n      },\r\n      undefined\r\n    );\r\n\r\n    subprocessRunner._globalTerminal = new Terminal(\r\n      subprocessRunner._terminalProviderManager.registerSubprocessTerminalProvider(\r\n        innerConfiguration.globalTerminalProviderId\r\n      )\r\n    );\r\n\r\n    return subprocessRunner;\r\n  }\r\n\r\n  public invokeAsSubprocessAsync(): Promise<void> {\r\n    return new Promise((resolve: () => void, reject: (error: Error) => void) => {\r\n      const subprocess: childProcess.ChildProcess = childProcess.fork(\r\n        path.resolve(__dirname, 'startSubprocess'),\r\n        [this.filename, JSON.stringify(this._innerConfiguration), JSON.stringify(this._configuration)],\r\n        {\r\n          execArgv: this._processNodeArgsForSubprocess(this._globalTerminal, process.execArgv),\r\n          ...SubprocessTerminator.RECOMMENDED_OPTIONS\r\n        }\r\n      );\r\n\r\n      SubprocessTerminator.killProcessTreeOnExit(subprocess, SubprocessTerminator.RECOMMENDED_OPTIONS);\r\n\r\n      this._terminalProviderManager.registerSubprocess(subprocess);\r\n      this._scopedLoggerManager.registerSubprocess(subprocess);\r\n\r\n      let hasExited: boolean = false;\r\n      let exitError: Error | undefined;\r\n\r\n      subprocess.on('message', (message: ISubprocessMessageBase) => {\r\n        switch (message.type) {\r\n          case 'exit': {\r\n            if (hasExited) {\r\n              throw new Error(\r\n                `Subprocess communication error. Received a duplicate \"${message.type}\" message.`\r\n              );\r\n            }\r\n\r\n            const exitMessage: ISubprocessExitMessage = message as ISubprocessExitMessage;\r\n            hasExited = true;\r\n            exitError = SubprocessRunnerBase.deserializeFromIpcMessage(exitMessage.error) as\r\n              | Error\r\n              | undefined;\r\n\r\n            break;\r\n          }\r\n\r\n          default: {\r\n            if (hasExited) {\r\n              throw new Error(\r\n                'Subprocess communication error. Received a message after the subprocess ' +\r\n                  'has indicated that it has exited'\r\n              );\r\n            }\r\n\r\n            this._receiveMessageFromSubprocess(message);\r\n          }\r\n        }\r\n      });\r\n\r\n      subprocess.on('close', () => {\r\n        if (exitError) {\r\n          reject(exitError);\r\n        } else if (!hasExited) {\r\n          reject(new Error('Subprocess exited before sending \"exit\" message.'));\r\n        } else {\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  public abstract invokeAsync(): Promise<void>;\r\n\r\n  public async [SUBPROCESS_RUNNER_INNER_INVOKE](): Promise<void> {\r\n    process.on('message', (message: ISubprocessMessageBase) => {\r\n      this._receiveMessageFromParentProcess(message);\r\n    });\r\n\r\n    let error: Error | undefined = undefined;\r\n    try {\r\n      await this.invokeAsync();\r\n    } catch (e) {\r\n      error = e;\r\n    } finally {\r\n      process.removeAllListeners();\r\n\r\n      const exitMessage: ISubprocessExitMessage = {\r\n        type: 'exit',\r\n        error: SubprocessRunnerBase.serializeForIpcMessage(error)\r\n      };\r\n      process.send!(exitMessage);\r\n    }\r\n  }\r\n\r\n  protected registerSubprocessCommunicationManager(\r\n    communicationManager: SubprocessCommunicationManagerBase\r\n  ): void {\r\n    if (this._subprocessCommunicationManagerInitializationOptions) {\r\n      communicationManager.initialize(this._subprocessCommunicationManagerInitializationOptions);\r\n    }\r\n\r\n    this._subprocessCommunicationManagers.push(communicationManager);\r\n  }\r\n\r\n  protected async requestScopedLoggerAsync(loggerName: string): Promise<IScopedLogger> {\r\n    return await this._scopedLoggerManager.requestScopedLoggerAsync(loggerName);\r\n  }\r\n\r\n  private _registerDefaultCommunicationManagers(\r\n    subprocessCommunicationManagerInitializationOptions: ISubprocessCommunicationManagerInitializationOptions,\r\n    heftSession: HeftSession | undefined\r\n  ): void {\r\n    if (this._subprocessCommunicationManagerInitializationOptions) {\r\n      throw new Error('Default subprocess communication managers have already been registered.');\r\n    }\r\n\r\n    this._subprocessCommunicationManagerInitializationOptions =\r\n      subprocessCommunicationManagerInitializationOptions;\r\n\r\n    for (const communicationManager of this._subprocessCommunicationManagers) {\r\n      communicationManager.initialize(this._subprocessCommunicationManagerInitializationOptions);\r\n    }\r\n\r\n    this._terminalProviderManager = new TerminalProviderManager({\r\n      configuration: this._innerConfiguration\r\n    });\r\n    this._scopedLoggerManager = new SubprocessLoggerManager({\r\n      terminalProviderManager: this._terminalProviderManager,\r\n      heftSession: heftSession\r\n    });\r\n\r\n    this.registerSubprocessCommunicationManager(this._terminalProviderManager);\r\n    this.registerSubprocessCommunicationManager(this._scopedLoggerManager);\r\n  }\r\n\r\n  private _processNodeArgsForSubprocess(terminal: Terminal, nodeArgs: string[]): string[] {\r\n    nodeArgs = [...nodeArgs]; // Clone the args array\r\n    const inspectPort: number = SubprocessRunnerBase._subprocessInspectorPort++;\r\n    let willUseInspector: boolean = false;\r\n\r\n    for (let i: number = 0; i < nodeArgs.length; i++) {\r\n      // The '--inspect' and '--inspect-brk' arguments can have an explicit port specified with syntax that\r\n      // looks like '--inspect=<port>', so we'll split by the '=' character in case the port is explicitly specified\r\n      const [firstNodeArgPart]: string[] = nodeArgs[i].split('=');\r\n      if (firstNodeArgPart === '--inspect' || firstNodeArgPart === '--inspect-brk') {\r\n        nodeArgs[i] = `${firstNodeArgPart}=${inspectPort}`;\r\n        willUseInspector = true;\r\n      }\r\n    }\r\n\r\n    if (willUseInspector) {\r\n      terminal.writeLine(`Subprocess with inspector bound to port ${inspectPort}`);\r\n    }\r\n\r\n    return nodeArgs;\r\n  }\r\n\r\n  private _receiveMessageFromParentProcess(message: ISubprocessMessageBase): void {\r\n    for (const subprocessCommunicationManager of this._subprocessCommunicationManagers) {\r\n      if (subprocessCommunicationManager.canHandleMessageFromParentProcess(message)) {\r\n        subprocessCommunicationManager.receiveMessageFromParentProcess(message);\r\n        return;\r\n      }\r\n    }\r\n\r\n    throw new Error(\r\n      'Subprocess communication manager. No communication manager can handle message type ' +\r\n        `\"${message.type}\" from parent process.`\r\n    );\r\n  }\r\n\r\n  private _receiveMessageFromSubprocess(message: ISubprocessMessageBase): void {\r\n    for (const subprocessCommunicationManager of this._subprocessCommunicationManagers) {\r\n      if (subprocessCommunicationManager.canHandleMessageFromSubprocess(message)) {\r\n        subprocessCommunicationManager.receiveMessageFromSubprocess(message);\r\n        return;\r\n      }\r\n    }\r\n\r\n    throw new Error(\r\n      'Subprocess communication manager. No communication manager can handle message type ' +\r\n        `\"${message.type}\" from subprocess.`\r\n    );\r\n  }\r\n\r\n  public static serializeForIpcMessage(arg: unknown): ISubprocessApiCallArg {\r\n    if (arg === undefined) {\r\n      return { type: SupportedSerializableArgType.Undefined };\r\n    } else if (arg === null) {\r\n      return { type: SupportedSerializableArgType.Null };\r\n    }\r\n\r\n    switch (typeof arg) {\r\n      case 'object': {\r\n        if (arg instanceof FileError) {\r\n          const result: ISubprocessApiCallArgWithValue<ISerializedFileErrorValue> = {\r\n            type: SupportedSerializableArgType.FileError,\r\n            value: {\r\n              errorMessage: arg.message,\r\n              errorStack: arg.stack,\r\n              filePath: arg.filePath,\r\n              line: arg.line,\r\n              column: arg.column\r\n            }\r\n          };\r\n\r\n          return result;\r\n        } else if (arg instanceof Error) {\r\n          const result: ISubprocessApiCallArgWithValue<ISerializedErrorValue> = {\r\n            type: SupportedSerializableArgType.Error,\r\n            value: {\r\n              errorMessage: arg.message,\r\n              errorStack: arg.stack\r\n            }\r\n          };\r\n\r\n          return result;\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      case 'string':\r\n      case 'number':\r\n      case 'boolean': {\r\n        const result: ISubprocessApiCallArgWithValue = {\r\n          type: SupportedSerializableArgType.Primitive,\r\n          value: arg\r\n        };\r\n\r\n        return result;\r\n      }\r\n    }\r\n\r\n    throw new Error(`Argument (${arg}) is not supported in subprocess communication.`);\r\n  }\r\n\r\n  public static deserializeFromIpcMessage(arg: ISubprocessApiCallArg): unknown | undefined {\r\n    switch (arg.type) {\r\n      case SupportedSerializableArgType.Undefined: {\r\n        return undefined;\r\n      }\r\n\r\n      case SupportedSerializableArgType.Null: {\r\n        return null;\r\n      }\r\n\r\n      case SupportedSerializableArgType.Error: {\r\n        const typedArg: ISubprocessApiCallArgWithValue<ISerializedErrorValue> =\r\n          arg as ISubprocessApiCallArgWithValue<ISerializedErrorValue>;\r\n        const result: Error = new Error(typedArg.value.errorMessage);\r\n        result.stack = typedArg.value.errorStack;\r\n        return result;\r\n      }\r\n\r\n      case SupportedSerializableArgType.FileError: {\r\n        const typedArg: ISubprocessApiCallArgWithValue<ISerializedFileErrorValue> =\r\n          arg as ISubprocessApiCallArgWithValue<ISerializedFileErrorValue>;\r\n        const result: FileError = new FileError(\r\n          typedArg.value.errorMessage,\r\n          typedArg.value.filePath,\r\n          typedArg.value.line,\r\n          typedArg.value.column\r\n        );\r\n        result.stack = typedArg.value.errorStack;\r\n        return result;\r\n      }\r\n\r\n      case SupportedSerializableArgType.Primitive: {\r\n        const typedArg: ISubprocessApiCallArgWithValue = arg as ISubprocessApiCallArgWithValue;\r\n        return typedArg.value;\r\n      }\r\n\r\n      default:\r\n        throw new Error(`Unexpected arg type \"${arg.type}\".`);\r\n    }\r\n  }\r\n}\r\n"]}