{"version":3,"file":"SubprocessLoggerManager.js","sourceRoot":"","sources":["../../../src/utilities/subprocess/SubprocessLoggerManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ITerminalProvider, Terminal } from '@rushstack/node-core-library';\r\n\r\nimport {\r\n  ISubprocessMessageBase,\r\n  ISerializedErrorValue,\r\n  ISubprocessApiCallArgWithValue\r\n} from './SubprocessCommunication';\r\nimport { SubprocessCommunicationManagerBase } from './SubprocessCommunicationManagerBase';\r\nimport { TerminalProviderManager } from './TerminalProviderManager';\r\nimport { IScopedLogger, ScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\r\nimport { HeftSession } from '../../pluginFramework/HeftSession';\r\nimport { SubprocessRunnerBase } from './SubprocessRunnerBase';\r\n\r\nconst SUBPROCESS_LOGGER_MANAGER_REQUEST_LOGGER_MESSAGE_TYPE: string = 'subprocessLoggerManagerRequestLogger';\r\nconst SUBPROCESS_LOGGER_MANAGER_PROVIDE_LOGGER_MESSAGE_TYPE: string = 'subprocessLoggerManagerProvideLogger';\r\nconst SUBPROCESS_LOGGER_EMIT_ERROR_WARNING_MESSAGE_TYPE: string = 'subprocessLoggerEmitErrorWarning';\r\n\r\ninterface IRequestLoggerMessage extends ISubprocessMessageBase {\r\n  loggerName: string;\r\n}\r\n\r\ninterface IProvideLoggerMessage extends ISubprocessMessageBase {\r\n  loggerName: string;\r\n  terminalProviderId?: number;\r\n  error?: ISubprocessApiCallArgWithValue<ISerializedErrorValue>;\r\n}\r\n\r\ninterface IEmitErrorOrWarning extends ISubprocessMessageBase {\r\n  loggerId: number;\r\n  errorOrWarning: ISubprocessApiCallArgWithValue<ISerializedErrorValue>;\r\n  isError: boolean;\r\n}\r\n\r\ninterface IPromiseResult<TResult> {\r\n  resolve: (result: TResult) => void;\r\n  reject: (error: Error) => void;\r\n}\r\n\r\nexport interface ISubprocessLoggerManagerOptions {\r\n  terminalProviderManager: TerminalProviderManager;\r\n  heftSession?: HeftSession;\r\n}\r\n\r\nexport class SubprocessLoggerManager extends SubprocessCommunicationManagerBase {\r\n  private readonly _terminalProviderManager: TerminalProviderManager;\r\n  private readonly _heftSession: HeftSession | undefined;\r\n  private readonly _loggerNamesAwaitingResponse: Map<string, IPromiseResult<IScopedLogger>> = new Map<\r\n    string,\r\n    IPromiseResult<IScopedLogger>\r\n  >();\r\n  private readonly _requestedLoggers: Map<number, ScopedLogger> = new Map<number, ScopedLogger>();\r\n\r\n  public constructor(options: ISubprocessLoggerManagerOptions) {\r\n    super();\r\n\r\n    this._heftSession = options.heftSession;\r\n    this._terminalProviderManager = options.terminalProviderManager;\r\n  }\r\n\r\n  public async requestScopedLoggerAsync(loggerName: string): Promise<IScopedLogger> {\r\n    if (this._loggerNamesAwaitingResponse.has(loggerName)) {\r\n      throw new Error(`A logger with name \"${loggerName}\" has already been requested.`);\r\n    }\r\n\r\n    try {\r\n      return await new Promise((resolve: (logger: IScopedLogger) => void, reject: (error: Error) => void) => {\r\n        this._loggerNamesAwaitingResponse.set(loggerName, { resolve, reject });\r\n\r\n        const message: IRequestLoggerMessage = {\r\n          type: SUBPROCESS_LOGGER_MANAGER_REQUEST_LOGGER_MESSAGE_TYPE,\r\n          loggerName: loggerName\r\n        };\r\n        this.sendMessageToParentProcess(message);\r\n      });\r\n    } finally {\r\n      this._loggerNamesAwaitingResponse.delete(loggerName);\r\n    }\r\n  }\r\n\r\n  public canHandleMessageFromSubprocess(message: ISubprocessMessageBase): boolean {\r\n    return (\r\n      message.type === SUBPROCESS_LOGGER_MANAGER_REQUEST_LOGGER_MESSAGE_TYPE ||\r\n      message.type === SUBPROCESS_LOGGER_EMIT_ERROR_WARNING_MESSAGE_TYPE\r\n    );\r\n  }\r\n\r\n  public receiveMessageFromSubprocess(message: ISubprocessMessageBase): void {\r\n    switch (message.type) {\r\n      case SUBPROCESS_LOGGER_MANAGER_REQUEST_LOGGER_MESSAGE_TYPE: {\r\n        // Requesting a new logger\r\n        if (!this._heftSession) {\r\n          throw new Error(\r\n            `A heft session must be provided to the ${SubprocessLoggerManager.name} instance in the ` +\r\n              'parent process.'\r\n          );\r\n        }\r\n\r\n        if (!this._terminalProviderManager) {\r\n          throw new Error(\r\n            `A terminal provider manager must be provided to the ${SubprocessLoggerManager.name} instance in the ` +\r\n              'parent process.'\r\n          );\r\n        }\r\n\r\n        const typedMessage: IRequestLoggerMessage = message as IRequestLoggerMessage;\r\n\r\n        let responseMessage: IProvideLoggerMessage;\r\n        try {\r\n          const logger: ScopedLogger = this._heftSession.requestScopedLogger(typedMessage.loggerName);\r\n          const terminalProviderId: number = this._terminalProviderManager.registerTerminalProvider(\r\n            logger.terminalProvider\r\n          );\r\n          this._requestedLoggers.set(terminalProviderId, logger);\r\n\r\n          responseMessage = {\r\n            type: SUBPROCESS_LOGGER_MANAGER_PROVIDE_LOGGER_MESSAGE_TYPE,\r\n            loggerName: typedMessage.loggerName,\r\n            terminalProviderId: terminalProviderId\r\n          };\r\n        } catch (error) {\r\n          responseMessage = {\r\n            type: SUBPROCESS_LOGGER_MANAGER_REQUEST_LOGGER_MESSAGE_TYPE,\r\n            loggerName: typedMessage.loggerName,\r\n            error: SubprocessRunnerBase.serializeForIpcMessage(\r\n              error\r\n            ) as ISubprocessApiCallArgWithValue<ISerializedErrorValue>\r\n          };\r\n        }\r\n\r\n        this.sendMessageToSubprocess(responseMessage);\r\n\r\n        break;\r\n      }\r\n\r\n      case SUBPROCESS_LOGGER_EMIT_ERROR_WARNING_MESSAGE_TYPE: {\r\n        const typedMessage: IEmitErrorOrWarning = message as IEmitErrorOrWarning;\r\n        const logger: ScopedLogger | undefined = this._requestedLoggers.get(typedMessage.loggerId);\r\n        if (!logger) {\r\n          throw new Error(`No logger was was registered with ID ${typedMessage.loggerId}`);\r\n        }\r\n\r\n        const errorOrWarning: Error = SubprocessRunnerBase.deserializeFromIpcMessage(\r\n          typedMessage.errorOrWarning\r\n        ) as Error;\r\n        if (typedMessage.isError) {\r\n          logger.emitError(errorOrWarning);\r\n        } else {\r\n          logger.emitWarning(errorOrWarning);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public canHandleMessageFromParentProcess(message: ISubprocessMessageBase): boolean {\r\n    return message.type === SUBPROCESS_LOGGER_MANAGER_PROVIDE_LOGGER_MESSAGE_TYPE;\r\n  }\r\n\r\n  public receiveMessageFromParentProcess(message: ISubprocessMessageBase): void {\r\n    if (message.type === SUBPROCESS_LOGGER_MANAGER_PROVIDE_LOGGER_MESSAGE_TYPE) {\r\n      const typedMessage: IProvideLoggerMessage = message as IProvideLoggerMessage;\r\n      const response: IPromiseResult<IScopedLogger> | undefined = this._loggerNamesAwaitingResponse.get(\r\n        typedMessage.loggerName\r\n      );\r\n      if (!response) {\r\n        throw new Error(`Missing a registered responder for logger name \"${typedMessage.loggerName}\"`);\r\n      }\r\n\r\n      if (typedMessage.error) {\r\n        const error: Error = SubprocessRunnerBase.deserializeFromIpcMessage(typedMessage.error) as Error;\r\n        response.reject(error);\r\n      } else if (typedMessage.terminalProviderId !== undefined) {\r\n        const terminalProvider: ITerminalProvider =\r\n          this._terminalProviderManager.registerSubprocessTerminalProvider(typedMessage.terminalProviderId);\r\n\r\n        const sendErrorOrWarning: (errorOrWarning: Error, isError: boolean) => void = (\r\n          errorOrWarning: Error,\r\n          isError: boolean\r\n        ) => {\r\n          const message: IEmitErrorOrWarning = {\r\n            type: SUBPROCESS_LOGGER_EMIT_ERROR_WARNING_MESSAGE_TYPE,\r\n            loggerId: typedMessage.terminalProviderId!,\r\n            errorOrWarning: SubprocessRunnerBase.serializeForIpcMessage(\r\n              errorOrWarning\r\n            ) as ISubprocessApiCallArgWithValue<ISerializedErrorValue>,\r\n            isError\r\n          };\r\n          this.sendMessageToParentProcess(message);\r\n        };\r\n\r\n        const scopedLogger: IScopedLogger = {\r\n          terminal: new Terminal(terminalProvider),\r\n          emitError: (error: Error) => {\r\n            sendErrorOrWarning(error, true);\r\n          },\r\n          emitWarning: (warning: Error) => {\r\n            sendErrorOrWarning(warning, false);\r\n          }\r\n        };\r\n        response.resolve(scopedLogger);\r\n      } else {\r\n        response.reject(new Error('Received an invalid response.'));\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}