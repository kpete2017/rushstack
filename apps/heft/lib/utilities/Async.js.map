{"version":3,"file":"Async.js","sourceRoot":"","sources":["../../src/utilities/Async.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAkE;AAGlE,MAAa,KAAK;IACT,MAAM,CAAC,KAAK,CAAC,iBAAiB,CACnC,KAAe,EACf,gBAAwB,EACxB,EAAoC;QAEpC,mDAAmD;QACnD,OAAO,yBAAS,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAC9E,CAAC;IAEM,MAAM,CAAC,2BAA2B,CAAC,EAAuB,EAAE,YAA0B;QAC3F,IAAI;YACF,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9C;QAAC,OAAO,CAAC,EAAE;YACV,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SAC3B;IACH,CAAC;CACF;AAjBD,sBAiBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Async as CoreAsync } from '@rushstack/node-core-library';\r\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\r\n\r\nexport class Async {\r\n  public static async forEachLimitAsync<TEntry>(\r\n    array: TEntry[],\r\n    parallelismLimit: number,\r\n    fn: (entry: TEntry) => Promise<void>\r\n  ): Promise<void> {\r\n    // Defer to the implementation in node-core-library\r\n    return CoreAsync.forEachAsync(array, fn, { concurrency: parallelismLimit });\r\n  }\r\n\r\n  public static runWatcherWithErrorHandling(fn: () => Promise<void>, scopedLogger: ScopedLogger): void {\r\n    try {\r\n      fn().catch((e) => scopedLogger.emitError(e));\r\n    } catch (e) {\r\n      scopedLogger.emitError(e);\r\n    }\r\n  }\r\n}\r\n"]}