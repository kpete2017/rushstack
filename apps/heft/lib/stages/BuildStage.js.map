{"version":3,"file":"BuildStage.js","sourceRoot":"","sources":["../../src/stages/BuildStage.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { SyncHook, AsyncParallelHook, AsyncSeriesHook, AsyncSeriesWaterfallHook } from 'tapable';\r\n\r\nimport { StageBase, StageHooksBase, IStageContext } from './StageBase';\r\nimport { IFinishedWords, Logging } from '../utilities/Logging';\r\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\r\nimport {\r\n  CommandLineAction,\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter,\r\n  CommandLineIntegerParameter\r\n} from '@rushstack/ts-command-line';\r\nimport { LoggingManager } from '../pluginFramework/logging/LoggingManager';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class BuildSubstageHooksBase {\r\n  public readonly run: AsyncParallelHook = new AsyncParallelHook();\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IBuildSubstage<\r\n  TBuildSubstageHooks extends BuildSubstageHooksBase,\r\n  TBuildSubstageProperties extends object\r\n> {\r\n  hooks: TBuildSubstageHooks;\r\n  properties: TBuildSubstageProperties;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport type CopyFromCacheMode = 'hardlink' | 'copy';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class CompileSubstageHooks extends BuildSubstageHooksBase {\r\n  /**\r\n   * The `afterCompile` event is fired exactly once, after the \"compile\" stage completes its first operation.\r\n   * The \"bundle\" stage will not begin until all event handlers have resolved their promises.  The behavior\r\n   * of this event is the same in watch mode and non-watch mode.\r\n   */\r\n  public readonly afterCompile: AsyncParallelHook = new AsyncParallelHook();\r\n  /**\r\n   * The `afterRecompile` event is only used in watch mode.  It fires whenever the compiler's outputs have\r\n   * been rebuilt.  The initial compilation fires the `afterCompile` event only, and then all subsequent iterations\r\n   * fire the `afterRecompile` event only. Heft does not wait for the `afterRecompile` promises to resolve.\r\n   */\r\n  public readonly afterRecompile: AsyncParallelHook = new AsyncParallelHook();\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class BundleSubstageHooks extends BuildSubstageHooksBase {\r\n  public readonly configureWebpack: AsyncSeriesWaterfallHook<unknown> = new AsyncSeriesWaterfallHook<unknown>(\r\n    ['webpackConfiguration']\r\n  );\r\n  public readonly afterConfigureWebpack: AsyncSeriesHook = new AsyncSeriesHook();\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ICompileSubstageProperties {\r\n  typescriptMaxWriteParallelism: number | undefined;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IBundleSubstageProperties {\r\n  /**\r\n   * If webpack is used, this will be set to the version of the webpack package\r\n   */\r\n  webpackVersion?: string | undefined;\r\n\r\n  /**\r\n   * If webpack is used, this will be set to the version of the webpack-dev-server package\r\n   */\r\n  webpackDevServerVersion?: string | undefined;\r\n\r\n  /**\r\n   * The configuration used by the Webpack plugin. This must be populated\r\n   * for Webpack to run. If webpackConfigFilePath is specified,\r\n   * this will be populated automatically with the exports of the\r\n   * config file referenced in that property.\r\n   */\r\n  webpackConfiguration?: unknown;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IPreCompileSubstage extends IBuildSubstage<BuildSubstageHooksBase, {}> {}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ICompileSubstage extends IBuildSubstage<CompileSubstageHooks, ICompileSubstageProperties> {}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IBundleSubstage extends IBuildSubstage<BundleSubstageHooks, IBundleSubstageProperties> {}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IPostBuildSubstage extends IBuildSubstage<BuildSubstageHooksBase, {}> {}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class BuildStageHooks extends StageHooksBase<IBuildStageProperties> {\r\n  public readonly preCompile: SyncHook<IPreCompileSubstage> = new SyncHook<IPreCompileSubstage>([\r\n    'preCompileStage'\r\n  ]);\r\n\r\n  public readonly compile: SyncHook<ICompileSubstage> = new SyncHook<ICompileSubstage>(['compileStage']);\r\n\r\n  public readonly bundle: SyncHook<IBundleSubstage> = new SyncHook<IBundleSubstage>(['bundleStage']);\r\n\r\n  public readonly postBuild: SyncHook<IPostBuildSubstage> = new SyncHook<IPostBuildSubstage>([\r\n    'postBuildStage'\r\n  ]);\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IBuildStageProperties {\r\n  // Input\r\n  production: boolean;\r\n  lite: boolean;\r\n  locale?: string;\r\n  maxOldSpaceSize?: string;\r\n  watchMode: boolean;\r\n  serveMode: boolean;\r\n  webpackStats?: unknown;\r\n\r\n  // Output\r\n  /**\r\n   * @beta\r\n   */\r\n  isTypeScriptProject?: boolean;\r\n  /**\r\n   * @beta\r\n   */\r\n  emitFolderNameForTests?: string;\r\n  /**\r\n   * @beta\r\n   */\r\n  emitExtensionForTests?: '.js' | '.cjs' | '.mjs';\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IBuildStageContext extends IStageContext<BuildStageHooks, IBuildStageProperties> {}\r\n\r\nexport interface IBuildStageOptions {\r\n  production: boolean;\r\n  lite: boolean;\r\n  locale?: string;\r\n  maxOldSpaceSize?: string;\r\n  watchMode: boolean;\r\n  serveMode: boolean;\r\n  typescriptMaxWriteParallelism?: number;\r\n}\r\n\r\nexport interface IBuildStageStandardParameters {\r\n  productionFlag: CommandLineFlagParameter;\r\n  localeParameter: CommandLineStringParameter;\r\n  liteFlag: CommandLineFlagParameter;\r\n  typescriptMaxWriteParallelismParameter: CommandLineIntegerParameter;\r\n  maxOldSpaceSizeParameter: CommandLineStringParameter;\r\n}\r\n\r\ninterface IRunSubstageWithLoggingOptions {\r\n  buildStageName: string;\r\n  buildStage: IBuildSubstage<BuildSubstageHooksBase, object>;\r\n  watchMode: boolean;\r\n}\r\n\r\nconst WATCH_MODE_FINISHED_LOGGING_WORDS: IFinishedWords = {\r\n  success: 'ready to continue',\r\n  failure: 'continuing with errors'\r\n};\r\n\r\nexport class BuildStage extends StageBase<BuildStageHooks, IBuildStageProperties, IBuildStageOptions> {\r\n  public constructor(heftConfiguration: HeftConfiguration, loggingManager: LoggingManager) {\r\n    super(heftConfiguration, loggingManager, BuildStageHooks);\r\n  }\r\n\r\n  public static defineStageStandardParameters(action: CommandLineAction): IBuildStageStandardParameters {\r\n    return {\r\n      productionFlag: action.defineFlagParameter({\r\n        parameterLongName: '--production',\r\n        description: 'If specified, build ship/production output'\r\n      }),\r\n\r\n      localeParameter: action.defineStringParameter({\r\n        parameterLongName: '--locale',\r\n        argumentName: 'LOCALE',\r\n        description: 'Only build the specified locale, if applicable.'\r\n      }),\r\n\r\n      liteFlag: action.defineFlagParameter({\r\n        parameterLongName: '--lite',\r\n        parameterShortName: '-l',\r\n        description: 'Perform a minimal build, skipping optional steps like linting.'\r\n      }),\r\n\r\n      typescriptMaxWriteParallelismParameter: action.defineIntegerParameter({\r\n        parameterLongName: '--typescript-max-write-parallelism',\r\n        argumentName: 'PARALLEILSM',\r\n        description:\r\n          'Set this to change the maximum write parallelism. This parameter overrides ' +\r\n          'what is set in typescript.json. The default is 50.'\r\n      }),\r\n\r\n      maxOldSpaceSizeParameter: action.defineStringParameter({\r\n        parameterLongName: '--max-old-space-size',\r\n        argumentName: 'SIZE',\r\n        description: 'Used to specify the max old space size.'\r\n      })\r\n    };\r\n  }\r\n\r\n  public static getOptionsFromStandardParameters(\r\n    standardParameters: IBuildStageStandardParameters\r\n  ): Omit<IBuildStageOptions, 'watchMode' | 'serveMode'> {\r\n    return {\r\n      production: standardParameters.productionFlag.value,\r\n      lite: standardParameters.liteFlag.value,\r\n      locale: standardParameters.localeParameter.value,\r\n      maxOldSpaceSize: standardParameters.maxOldSpaceSizeParameter.value,\r\n      typescriptMaxWriteParallelism: standardParameters.typescriptMaxWriteParallelismParameter.value\r\n    };\r\n  }\r\n\r\n  protected async getDefaultStagePropertiesAsync(\r\n    options: IBuildStageOptions\r\n  ): Promise<IBuildStageProperties> {\r\n    return {\r\n      production: options.production,\r\n      lite: options.lite,\r\n      locale: options.locale,\r\n      maxOldSpaceSize: options.maxOldSpaceSize,\r\n      watchMode: options.watchMode,\r\n      serveMode: options.serveMode\r\n    };\r\n  }\r\n\r\n  protected async executeInnerAsync(): Promise<void> {\r\n    const preCompileSubstage: IPreCompileSubstage = {\r\n      hooks: new BuildSubstageHooksBase(),\r\n      properties: {}\r\n    };\r\n    this.stageHooks.preCompile.call(preCompileSubstage);\r\n\r\n    const compileStage: ICompileSubstage = {\r\n      hooks: new CompileSubstageHooks(),\r\n      properties: {\r\n        typescriptMaxWriteParallelism: this.stageOptions.typescriptMaxWriteParallelism\r\n      }\r\n    };\r\n    this.stageHooks.compile.call(compileStage);\r\n\r\n    const bundleStage: IBundleSubstage = {\r\n      hooks: new BundleSubstageHooks(),\r\n      properties: {}\r\n    };\r\n    this.stageHooks.bundle.call(bundleStage);\r\n\r\n    const postBuildStage: IPostBuildSubstage = {\r\n      hooks: new BuildSubstageHooksBase(),\r\n      properties: {}\r\n    };\r\n    this.stageHooks.postBuild.call(postBuildStage);\r\n\r\n    const watchMode: boolean = this.stageProperties.watchMode;\r\n\r\n    await this._runSubstageWithLoggingAsync({\r\n      buildStageName: 'Pre-compile',\r\n      buildStage: preCompileSubstage,\r\n      watchMode: watchMode\r\n    });\r\n\r\n    if (this.loggingManager.errorsHaveBeenEmitted && !watchMode) {\r\n      return;\r\n    }\r\n\r\n    await this._runSubstageWithLoggingAsync({\r\n      buildStageName: 'Compile',\r\n      buildStage: compileStage,\r\n      watchMode: watchMode\r\n    });\r\n    await compileStage.hooks.afterCompile.promise();\r\n\r\n    if (this.loggingManager.errorsHaveBeenEmitted && !watchMode) {\r\n      return;\r\n    }\r\n\r\n    bundleStage.properties.webpackConfiguration = await bundleStage.hooks.configureWebpack.promise(undefined);\r\n    await bundleStage.hooks.afterConfigureWebpack.promise();\r\n    await this._runSubstageWithLoggingAsync({\r\n      buildStageName: 'Bundle',\r\n      buildStage: bundleStage,\r\n      watchMode: watchMode\r\n    });\r\n\r\n    if (this.loggingManager.errorsHaveBeenEmitted && !watchMode) {\r\n      return;\r\n    }\r\n\r\n    await this._runSubstageWithLoggingAsync({\r\n      buildStageName: 'Post-build',\r\n      buildStage: postBuildStage,\r\n      watchMode: watchMode\r\n    });\r\n  }\r\n\r\n  private async _runSubstageWithLoggingAsync({\r\n    buildStageName,\r\n    buildStage,\r\n    watchMode\r\n  }: IRunSubstageWithLoggingOptions): Promise<void> {\r\n    if (buildStage.hooks.run.isUsed()) {\r\n      await Logging.runFunctionWithLoggingBoundsAsync(\r\n        this.globalTerminal,\r\n        buildStageName,\r\n        async () => await buildStage.hooks.run.promise(),\r\n        watchMode ? WATCH_MODE_FINISHED_LOGGING_WORDS : undefined\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}