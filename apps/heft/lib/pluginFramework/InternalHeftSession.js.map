{"version":3,"file":"InternalHeftSession.js","sourceRoot":"","sources":["../../src/pluginFramework/InternalHeftSession.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,qCAAmC;AAGnC,+CAA4D;AAuB5D;;GAEG;AACH,MAAa,mBAAmB;IAI9B,YAAmB,OAAoC;QAF/C,iBAAY,GAAkC,IAAI,GAAG,EAA4B,CAAC;QAGxF,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAEM,mBAAmB,CAAC,UAAuB;QAChD,OAAO,IAAI,yBAAW,CACpB;YACE,MAAM,EAAE,UAAU;YAClB,2BAA2B,EAAE,CAC3B,kBAA0B,EAC1B,aAA+C,EAC/C,EAAE;gBACF,IAAI,UAAU,GAAiC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;gBACzF,IAAI,CAAC,UAAU,EAAE;oBACf,UAAU,GAAG,IAAI,kBAAQ,CAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACtD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;iBACvD;gBAED,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;YACvD,CAAC;SACF,EACD,IAAI,CAAC,QAAQ,CACd,CAAC;IACJ,CAAC;IAEM,gBAAgB,CAAC,MAAmB;QACzC,MAAM,UAAU,GAAiC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC1F,MAAM,QAAQ,GAAuB,MAAM,CAAC,QAAQ,CAAC;QACrD,IAAI,UAAU,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5C,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,gBAAgB,GAAgB,IAAI,GAAG,CAAS,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC1F,MAAM,IAAI,KAAK,CACb,WAAW,MAAM,CAAC,UAAU,kEAAkE;oBAC5F,0DAA0D,MAAM,CAAC,UAAU,IAAI;oBAC/E,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAC1C,CAAC;aACH;iBAAM;gBACL,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC3B;SACF;IACH,CAAC;CACF;AA7CD,kDA6CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { SyncHook } from 'tapable';\r\n\r\nimport { IHeftPlugin } from './IHeftPlugin';\r\nimport { HeftSession, RegisterAction } from './HeftSession';\r\nimport { BuildStage } from '../stages/BuildStage';\r\nimport { CleanStage } from '../stages/CleanStage';\r\nimport { TestStage } from '../stages/TestStage';\r\nimport { MetricsCollector } from '../metrics/MetricsCollector';\r\nimport { LoggingManager } from './logging/LoggingManager';\r\nimport { IHeftLifecycle } from './HeftLifecycle';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IInternalHeftSessionOptions {\r\n  heftLifecycleHook: SyncHook<IHeftLifecycle>;\r\n  buildStage: BuildStage;\r\n  cleanStage: CleanStage;\r\n  testStage: TestStage;\r\n\r\n  metricsCollector: MetricsCollector;\r\n  loggingManager: LoggingManager;\r\n  getIsDebugMode(): boolean;\r\n  registerAction: RegisterAction;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class InternalHeftSession {\r\n  private readonly _options: IInternalHeftSessionOptions;\r\n  private _pluginHooks: Map<string, SyncHook<object>> = new Map<string, SyncHook<object>>();\r\n\r\n  public constructor(options: IInternalHeftSessionOptions) {\r\n    this._options = options;\r\n  }\r\n\r\n  public getSessionForPlugin(thisPlugin: IHeftPlugin): HeftSession {\r\n    return new HeftSession(\r\n      {\r\n        plugin: thisPlugin,\r\n        requestAccessToPluginByName: (\r\n          pluginToAccessName: string,\r\n          pluginApplyFn: (pluginAccessor: object) => void\r\n        ) => {\r\n          let pluginHook: SyncHook<object> | undefined = this._pluginHooks.get(pluginToAccessName);\r\n          if (!pluginHook) {\r\n            pluginHook = new SyncHook<object>(['pluginAccessor']);\r\n            this._pluginHooks.set(pluginToAccessName, pluginHook);\r\n          }\r\n\r\n          pluginHook.tap(thisPlugin.pluginName, pluginApplyFn);\r\n        }\r\n      },\r\n      this._options\r\n    );\r\n  }\r\n\r\n  public applyPluginHooks(plugin: IHeftPlugin): void {\r\n    const pluginHook: SyncHook<object> | undefined = this._pluginHooks.get(plugin.pluginName);\r\n    const accessor: object | undefined = plugin.accessor;\r\n    if (pluginHook && pluginHook.taps.length > 0) {\r\n      if (!accessor) {\r\n        const accessingPlugins: Set<string> = new Set<string>(pluginHook.taps.map((x) => x.name));\r\n        throw new Error(\r\n          `Plugin \"${plugin.pluginName}\" does not provide an accessor property, so it does not provide ` +\r\n            `access to other plugins. Plugins requesting access to \"${plugin.pluginName}: ` +\r\n            Array.from(accessingPlugins).join(', ')\r\n        );\r\n      } else {\r\n        pluginHook.call(accessor);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}