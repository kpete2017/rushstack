{"version":3,"file":"HeftEventPluginBase.js","sourceRoot":"","sources":["../../src/pluginFramework/HeftEventPluginBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TapOptions } from 'tapable';\r\n\r\nimport { IHeftPlugin } from '../pluginFramework/IHeftPlugin';\r\nimport { HeftSession } from '../pluginFramework/HeftSession';\r\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\r\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\r\nimport {\r\n  CoreConfigFiles,\r\n  HeftEvent,\r\n  IHeftConfigurationJsonEventActionBase,\r\n  IHeftEventActions\r\n} from '../utilities/CoreConfigFiles';\r\nimport { ICleanStageContext, ICleanStageProperties } from '../stages/CleanStage';\r\nimport {\r\n  IBuildStageContext,\r\n  IBuildStageProperties,\r\n  IBundleSubstage,\r\n  ICompileSubstage,\r\n  IPostBuildSubstage,\r\n  IPreCompileSubstage\r\n} from '../stages/BuildStage';\r\nimport { ITestStageContext, ITestStageProperties } from '../stages/TestStage';\r\n\r\nexport abstract class HeftEventPluginBase<THeftEventAction extends IHeftConfigurationJsonEventActionBase>\r\n  implements IHeftPlugin\r\n{\r\n  public abstract readonly pluginName: string;\r\n  protected abstract readonly eventActionName: keyof IHeftEventActions;\r\n  protected abstract readonly loggerName: string;\r\n\r\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\r\n    const logger: ScopedLogger = heftSession.requestScopedLogger(this.loggerName);\r\n    const heftStageTap: TapOptions<'promise'> = {\r\n      name: this.pluginName,\r\n      stage: Number.MAX_SAFE_INTEGER / 2 // This should give us some certainty that this will run after other plugins\r\n    };\r\n\r\n    const handleEventActionsAsync = async <TStageProperties>(\r\n      heftEvent: HeftEvent,\r\n      properties: TStageProperties,\r\n      handler: (\r\n        heftEvent: HeftEvent,\r\n        heftEventActions: THeftEventAction[],\r\n        logger: ScopedLogger,\r\n        heftSession: HeftSession,\r\n        heftConfiguration: HeftConfiguration,\r\n        properties: TStageProperties\r\n      ) => Promise<void>\r\n    ): Promise<void> => {\r\n      const heftEventActions: THeftEventAction[] = await this._getEventActions(\r\n        heftEvent,\r\n        logger,\r\n        heftConfiguration\r\n      );\r\n      if (heftEventActions.length) {\r\n        await handler(heftEvent, heftEventActions, logger, heftSession, heftConfiguration, properties);\r\n      }\r\n    };\r\n\r\n    heftSession.hooks.clean.tap(this.pluginName, (clean: ICleanStageContext) => {\r\n      clean.hooks.run.tapPromise(heftStageTap, async () => {\r\n        await handleEventActionsAsync(\r\n          HeftEvent.clean,\r\n          clean.properties,\r\n          this.handleCleanEventActionsAsync.bind(this)\r\n        );\r\n      });\r\n    });\r\n\r\n    heftSession.hooks.build.tap(this.pluginName, (build: IBuildStageContext) => {\r\n      build.hooks.preCompile.tap(this.pluginName, (preCompile: IPreCompileSubstage) => {\r\n        preCompile.hooks.run.tapPromise(heftStageTap, async () => {\r\n          await handleEventActionsAsync(\r\n            HeftEvent.preCompile,\r\n            build.properties,\r\n            this.handleBuildEventActionsAsync.bind(this)\r\n          );\r\n        });\r\n      });\r\n\r\n      build.hooks.compile.tap(this.pluginName, (compile: ICompileSubstage) => {\r\n        compile.hooks.run.tapPromise(heftStageTap, async () => {\r\n          await handleEventActionsAsync(\r\n            HeftEvent.compile,\r\n            build.properties,\r\n            this.handleBuildEventActionsAsync.bind(this)\r\n          );\r\n        });\r\n      });\r\n\r\n      build.hooks.bundle.tap(this.pluginName, (bundle: IBundleSubstage) => {\r\n        bundle.hooks.run.tapPromise(heftStageTap, async () => {\r\n          await handleEventActionsAsync(\r\n            HeftEvent.bundle,\r\n            build.properties,\r\n            this.handleBuildEventActionsAsync.bind(this)\r\n          );\r\n        });\r\n      });\r\n\r\n      build.hooks.postBuild.tap(this.pluginName, (postBuild: IPostBuildSubstage) => {\r\n        postBuild.hooks.run.tapPromise(heftStageTap, async () => {\r\n          await handleEventActionsAsync(\r\n            HeftEvent.postBuild,\r\n            build.properties,\r\n            this.handleBuildEventActionsAsync.bind(this)\r\n          );\r\n        });\r\n      });\r\n    });\r\n\r\n    heftSession.hooks.test.tap(this.pluginName, (test: ITestStageContext) => {\r\n      test.hooks.run.tapPromise(heftStageTap, async () => {\r\n        await handleEventActionsAsync(\r\n          HeftEvent.test,\r\n          test.properties,\r\n          this.handleTestEventActionsAsync.bind(this)\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  protected handleCleanEventActionsAsync(\r\n    heftEvent: HeftEvent,\r\n    heftEventActions: THeftEventAction[],\r\n    logger: ScopedLogger,\r\n    heftSession: HeftSession,\r\n    heftConfiguration: HeftConfiguration,\r\n    properties: ICleanStageProperties\r\n  ): Promise<void> {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  protected handleBuildEventActionsAsync(\r\n    heftEvent: HeftEvent,\r\n    heftEventActions: THeftEventAction[],\r\n    logger: ScopedLogger,\r\n    heftSession: HeftSession,\r\n    heftConfiguration: HeftConfiguration,\r\n    properties: IBuildStageProperties\r\n  ): Promise<void> {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  protected handleTestEventActionsAsync(\r\n    heftEvent: HeftEvent,\r\n    heftEventActions: THeftEventAction[],\r\n    logger: ScopedLogger,\r\n    heftSession: HeftSession,\r\n    heftConfiguration: HeftConfiguration,\r\n    properties: ITestStageProperties\r\n  ): Promise<void> {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  private async _getEventActions(\r\n    heftEvent: HeftEvent,\r\n    logger: ScopedLogger,\r\n    heftConfiguration: HeftConfiguration\r\n  ): Promise<THeftEventAction[]> {\r\n    const allEventActions: IHeftEventActions = await CoreConfigFiles.getConfigConfigFileEventActionsAsync(\r\n      logger.terminal,\r\n      heftConfiguration\r\n    );\r\n    const baseEventActions: IHeftConfigurationJsonEventActionBase[] =\r\n      allEventActions[this.eventActionName].get(heftEvent) || [];\r\n\r\n    return baseEventActions as THeftEventAction[];\r\n  }\r\n}\r\n"]}