{"version":3,"file":"HeftSession.js","sourceRoot":"","sources":["../../src/pluginFramework/HeftSession.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAgD3D;;GAEG;AACH,MAAa,WAAW;IA8BtB;;OAEG;IACH,YAAmB,OAA4B,EAAE,sBAAmD;QAClG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,eAAe,GAAG,sBAAsB,CAAC,cAAc,CAAC;QAC7D,IAAI,CAAC,gBAAgB,GAAG,sBAAsB,CAAC,gBAAgB,CAAC;QAChE,IAAI,CAAC,cAAc,GAAG,sBAAsB,CAAC,cAAc,CAAC;QAE5D,IAAI,CAAC,KAAK,GAAG;YACX,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAK;YAE7C,aAAa,EAAE,sBAAsB,CAAC,iBAAiB;YACvD,KAAK,EAAE,sBAAsB,CAAC,UAAU,CAAC,uBAAuB;YAChE,KAAK,EAAE,sBAAsB,CAAC,UAAU,CAAC,uBAAuB;YAChE,IAAI,EAAE,sBAAsB,CAAC,SAAS,CAAC,uBAAuB;SAC/D,CAAC;QAEF,IAAI,CAAC,eAAe,GAAG,sBAAsB,CAAC,cAAc,CAAC;QAE7D,IAAI,CAAC,2BAA2B,GAAG,OAAO,CAAC,2BAA2B,CAAC;IACzE,CAAC;IAxCD;;OAEG;IACH,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IAChC,CAAC;IAqCD;;OAEG;IACI,mBAAmB,CAAC,UAAkB;QAC3C,OAAO,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACpF,CAAC;CACF;AA5DD,kCA4DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { SyncHook } from 'tapable';\r\n\r\nimport { MetricsCollector, MetricsCollectorHooks } from '../metrics/MetricsCollector';\r\nimport { ICleanStageContext } from '../stages/CleanStage';\r\nimport { IBuildStageContext } from '../stages/BuildStage';\r\nimport { ITestStageContext } from '../stages/TestStage';\r\nimport { IHeftPlugin } from './IHeftPlugin';\r\nimport { IInternalHeftSessionOptions } from './InternalHeftSession';\r\nimport { ScopedLogger } from './logging/ScopedLogger';\r\nimport { LoggingManager } from './logging/LoggingManager';\r\nimport { ICustomActionOptions } from '../cli/actions/CustomAction';\r\nimport { IHeftLifecycle } from './HeftLifecycle';\r\n\r\n/** @beta */\r\nexport type RegisterAction = <TParameters>(action: ICustomActionOptions<TParameters>) => void;\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IHeftSessionHooks {\r\n  metricsCollector: MetricsCollectorHooks;\r\n\r\n  /** @internal */\r\n  heftLifecycle: SyncHook<IHeftLifecycle>;\r\n  build: SyncHook<IBuildStageContext>;\r\n  clean: SyncHook<ICleanStageContext>;\r\n  test: SyncHook<ITestStageContext>;\r\n}\r\n\r\nexport interface IHeftSessionOptions {\r\n  plugin: IHeftPlugin;\r\n\r\n  /**\r\n   * @beta\r\n   */\r\n  requestAccessToPluginByName: RequestAccessToPluginByNameCallback;\r\n}\r\n\r\n/**\r\n * @beta\r\n */\r\nexport type RequestAccessToPluginByNameCallback = (\r\n  pluginToAccessName: string,\r\n  pluginApply: (pluginAccessor: object) => void\r\n) => void;\r\n\r\n/**\r\n * @public\r\n */\r\nexport class HeftSession {\r\n  private readonly _loggingManager: LoggingManager;\r\n  private readonly _options: IHeftSessionOptions;\r\n  private readonly _getIsDebugMode: () => boolean;\r\n\r\n  public readonly hooks: IHeftSessionHooks;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public readonly metricsCollector: MetricsCollector;\r\n\r\n  /**\r\n   * If set to true, the build is running with the --debug flag\r\n   */\r\n  public get debugMode(): boolean {\r\n    return this._getIsDebugMode();\r\n  }\r\n\r\n  /** @beta */\r\n  public readonly registerAction: RegisterAction;\r\n\r\n  /**\r\n   * Call this function to receive a callback with the plugin if and after the specified plugin\r\n   * has been applied. This is used to tap hooks on another plugin.\r\n   *\r\n   * @beta\r\n   */\r\n  public readonly requestAccessToPluginByName: RequestAccessToPluginByNameCallback;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public constructor(options: IHeftSessionOptions, internalSessionOptions: IInternalHeftSessionOptions) {\r\n    this._options = options;\r\n\r\n    this._loggingManager = internalSessionOptions.loggingManager;\r\n    this.metricsCollector = internalSessionOptions.metricsCollector;\r\n    this.registerAction = internalSessionOptions.registerAction;\r\n\r\n    this.hooks = {\r\n      metricsCollector: this.metricsCollector.hooks,\r\n\r\n      heftLifecycle: internalSessionOptions.heftLifecycleHook,\r\n      build: internalSessionOptions.buildStage.stageInitializationHook,\r\n      clean: internalSessionOptions.cleanStage.stageInitializationHook,\r\n      test: internalSessionOptions.testStage.stageInitializationHook\r\n    };\r\n\r\n    this._getIsDebugMode = internalSessionOptions.getIsDebugMode;\r\n\r\n    this.requestAccessToPluginByName = options.requestAccessToPluginByName;\r\n  }\r\n\r\n  /**\r\n   * Call this function to request a logger with the specified name.\r\n   */\r\n  public requestScopedLogger(loggerName: string): ScopedLogger {\r\n    return this._loggingManager.requestScopedLogger(this._options.plugin, loggerName);\r\n  }\r\n}\r\n"]}