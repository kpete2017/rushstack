{"version":3,"file":"FileError.js","sourceRoot":"","sources":["../../../src/pluginFramework/logging/FileError.ts"],"names":[],"mappings":";;;AAAA,4FAA4F;AAC5F,2DAA2D;AAC3D,oEAA8D;AAO9D,MAAM,aAAa,GAAW,sCAAsC,CAAC;AAErE;;;;;GAKG;AACH,MAAa,SAAU,SAAQ,KAAK;IAQlC;;;;OAIG;IACH,YAAmB,OAAe,EAAE,QAAgB,EAAE,IAAa,EAAE,MAAe;QAClF,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,QAAQ,GAAG,wBAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,uGAAuG;QACvG,+IAA+I;QAC/I,EAAE;QACF,4EAA4E;QAC3E,IAAY,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,yDAAyD;IAC1G,CAAC;IAED,gBAAgB;IACT,QAAQ,CAAC,qBAA8C;QAC5D,IAAI,qBAA6B,CAAC;QAClC,QAAQ,MAAM,EAAE;YACd,iBAAyB,CAAC,CAAC;gBACzB,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;oBAC7B,qBAAqB,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;iBACxD;qBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;oBAClC,qBAAqB,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;iBACzC;qBAAM;oBACL,qBAAqB,GAAG,EAAE,CAAC;iBAC5B;gBAED,MAAM;aACP;YAED,yBAAiC,CAAC,CAAC;gBACjC,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;oBAC7B,qBAAqB,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC;iBACzD;qBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;oBAClC,qBAAqB,GAAG,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC;iBAC1C;qBAAM;oBACL,qBAAqB,GAAG,EAAE,CAAC;iBAC5B;gBAED,MAAM;aACP;YAED,OAAO,CAAC,CAAC;gBACP,MAAM,IAAI,KAAK,CAAC,mBAAmB,MAAM,EAAE,CAAC,CAAC;aAC9C;SACF;QAED,OAAO,GAAG,IAAI,CAAC,QAAQ,GAAG,qBAAqB,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;IACtE,CAAC;IAEM,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,QAAgB;QACjD,OAAO,4BAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IACxD,CAAC;CACF;AAlED,8BAkEC;AAED,4BAAQ,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\nimport { Path, TypeUuid } from '@rushstack/node-core-library';\r\n\r\nexport const enum FileErrorFormat {\r\n  Unix,\r\n  VisualStudio\r\n}\r\n\r\nconst uuidFileError: string = '37a4c772-2dc8-4c66-89ae-262f8cc1f0c1';\r\n\r\n/**\r\n * An `Error` subclass that should be thrown to report an unexpected state that specifically references\r\n * a location in a file.\r\n *\r\n * @public\r\n */\r\nexport class FileError extends Error {\r\n  /**\r\n   * Use this instance property to reliably detect if an instance of a class is an instance of FileError\r\n   */\r\n  public readonly filePath: string;\r\n  public readonly line: number | undefined;\r\n  public readonly column: number | undefined;\r\n\r\n  /**\r\n   * Constructs a new instance of the {@link FileError} class.\r\n   *\r\n   * @param message - A message describing the error.\r\n   */\r\n  public constructor(message: string, filePath: string, line?: number, column?: number) {\r\n    super(message);\r\n\r\n    this.filePath = Path.convertToSlashes(filePath);\r\n    this.line = line;\r\n    this.column = column;\r\n\r\n    // Manually set the prototype, as we can no longer extend built-in classes like Error, Array, Map, etc.\r\n    // https://github.com/microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n    //\r\n    // Note: the prototype must also be set on any classes which extend this one\r\n    (this as any).__proto__ = FileError.prototype; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n  }\r\n\r\n  /** @override */\r\n  public toString(format: FileErrorFormat = FileErrorFormat.Unix): string {\r\n    let formattedFileLocation: string;\r\n    switch (format) {\r\n      case FileErrorFormat.Unix: {\r\n        if (this.column !== undefined) {\r\n          formattedFileLocation = `:${this.line}:${this.column}`;\r\n        } else if (this.line !== undefined) {\r\n          formattedFileLocation = `:${this.line}`;\r\n        } else {\r\n          formattedFileLocation = '';\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      case FileErrorFormat.VisualStudio: {\r\n        if (this.column !== undefined) {\r\n          formattedFileLocation = `(${this.line},${this.column})`;\r\n        } else if (this.line !== undefined) {\r\n          formattedFileLocation = `(${this.line})`;\r\n        } else {\r\n          formattedFileLocation = '';\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        throw new Error(`Unknown format: ${format}`);\r\n      }\r\n    }\r\n\r\n    return `${this.filePath}${formattedFileLocation} - ${this.message}`;\r\n  }\r\n\r\n  public static [Symbol.hasInstance](instance: object): boolean {\r\n    return TypeUuid.isInstanceOf(instance, uuidFileError);\r\n  }\r\n}\r\n\r\nTypeUuid.registerClass(FileError, uuidFileError);\r\n"]}