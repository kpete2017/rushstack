{"version":3,"file":"ScopedLogger.js","sourceRoot":"","sources":["../../../src/pluginFramework/logging/ScopedLogger.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAA2E;AAG3E,6FAA0F;AAC1F,qDAAkD;AA2BlD;;GAEG;AACH,MAAa,YAAY;IA4BvB;;OAEG;IACH,YAAmB,OAA6B;QA7B/B,YAAO,GAAY,EAAE,CAAC;QACtB,cAAS,GAAY,EAAE,CAAC;QA6BvC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,gBAAgB,CAAC;QAClD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QAErC,IAAI,CAAC,gBAAgB,GAAG,IAAI,yDAA2B,CACrD,OAAO,CAAC,gBAAgB,EACxB,IAAI,IAAI,CAAC,UAAU,IAAI,CACxB,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,IAAI,4BAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACtD,CAAC;IApCD,IAAY,kBAAkB;QAC5B,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;IAC9C,CAAC;IAED,IAAW,MAAM;QACf,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IA4BD;;OAEG;IACI,SAAS,CAAC,KAAY;QAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,+BAAc,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAChF,IAAI,IAAI,CAAC,kBAAkB,IAAI,KAAK,CAAC,KAAK,EAAE;YAC1C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC3C;IACH,CAAC;IAED;;OAEG;IACI,WAAW,CAAC,OAAc;QAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,+BAAc,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACtF,IAAI,IAAI,CAAC,kBAAkB,IAAI,OAAO,CAAC,KAAK,EAAE;YAC5C,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC/C;IACH,CAAC;CACF;AAhED,oCAgEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Terminal, ITerminalProvider } from '@rushstack/node-core-library';\r\n\r\nimport { IHeftPlugin } from '../IHeftPlugin';\r\nimport { PrefixProxyTerminalProvider } from '../../utilities/PrefixProxyTerminalProvider';\r\nimport { LoggingManager } from './LoggingManager';\r\n\r\nexport interface IScopedLoggerOptions {\r\n  requestingPlugin: IHeftPlugin;\r\n  loggerName: string;\r\n  terminalProvider: ITerminalProvider;\r\n  getShouldPrintStacks: () => boolean;\r\n  errorHasBeenEmittedCallback: () => void;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IScopedLogger {\r\n  readonly terminal: Terminal;\r\n\r\n  /**\r\n   * Call this function to emit an error to the heft runtime.\r\n   */\r\n  emitError(error: Error): void;\r\n\r\n  /**\r\n   * Call this function to emit an warning to the heft runtime.\r\n   */\r\n  emitWarning(warning: Error): void;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class ScopedLogger implements IScopedLogger {\r\n  private readonly _options: IScopedLoggerOptions;\r\n  private readonly _errors: Error[] = [];\r\n  private readonly _warnings: Error[] = [];\r\n\r\n  private get _shouldPrintStacks(): boolean {\r\n    return this._options.getShouldPrintStacks();\r\n  }\r\n\r\n  public get errors(): ReadonlyArray<Error> {\r\n    return [...this._errors];\r\n  }\r\n\r\n  public get warnings(): ReadonlyArray<Error> {\r\n    return [...this._warnings];\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public readonly _requestingPlugin: IHeftPlugin;\r\n\r\n  public readonly loggerName: string;\r\n\r\n  public readonly terminalProvider: ITerminalProvider;\r\n\r\n  public readonly terminal: Terminal;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public constructor(options: IScopedLoggerOptions) {\r\n    this._options = options;\r\n    this._requestingPlugin = options.requestingPlugin;\r\n    this.loggerName = options.loggerName;\r\n\r\n    this.terminalProvider = new PrefixProxyTerminalProvider(\r\n      options.terminalProvider,\r\n      `[${this.loggerName}] `\r\n    );\r\n    this.terminal = new Terminal(this.terminalProvider);\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc IScopedLogger.emitError}\r\n   */\r\n  public emitError(error: Error): void {\r\n    this._errors.push(error);\r\n    this.terminal.writeErrorLine(`Error: ${LoggingManager.getErrorMessage(error)}`);\r\n    if (this._shouldPrintStacks && error.stack) {\r\n      this.terminal.writeErrorLine(error.stack);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc IScopedLogger.emitWarning}\r\n   */\r\n  public emitWarning(warning: Error): void {\r\n    this._warnings.push(warning);\r\n    this.terminal.writeWarningLine(`Warning: ${LoggingManager.getErrorMessage(warning)}`);\r\n    if (this._shouldPrintStacks && warning.stack) {\r\n      this.terminal.writeWarningLine(warning.stack);\r\n    }\r\n  }\r\n}\r\n"]}