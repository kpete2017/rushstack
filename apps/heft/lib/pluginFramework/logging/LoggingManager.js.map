{"version":3,"file":"LoggingManager.js","sourceRoot":"","sources":["../../../src/pluginFramework/logging/LoggingManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,iDAA8C;AAE9C,2CAAyD;AAMzD,MAAa,cAAc;IAUzB,YAAmB,OAA+B;QAR1C,mBAAc,GAA8B,IAAI,GAAG,EAAwB,CAAC;QAC5E,uBAAkB,GAAY,KAAK,CAAC;QACpC,kBAAa,GAAY,KAAK,CAAC;QAOrC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAND,IAAW,qBAAqB;QAC9B,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAMM,iBAAiB;QACtB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACjC,CAAC;IAEM,mBAAmB,CAAC,MAAmB,EAAE,UAAkB;QAChE,MAAM,oBAAoB,GAA6B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC3F,IAAI,oBAAoB,EAAE;YACxB,MAAM,IAAI,KAAK,CACb,6BAA6B,UAAU,+BAA+B;gBACpE,cAAc,oBAAoB,CAAC,iBAAiB,CAAC,UAAU,IAAI,CACtE,CAAC;SACH;aAAM;YACL,MAAM,YAAY,GAAiB,IAAI,2BAAY,CAAC;gBAClD,gBAAgB,EAAE,MAAM;gBACxB,UAAU;gBACV,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,gBAAgB;gBAChD,oBAAoB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,kBAAkB;gBACnD,2BAA2B,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;aAC/D,CAAC,CAAC;YACH,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;YAClD,OAAO,YAAY,CAAC;SACrB;IACH,CAAC;IAEM,eAAe,CAAC,eAAiC;QACtD,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE;YACvD,MAAM,CAAC,IAAI,CACT,GAAG,YAAY,CAAC,MAAM,CAAC,GAAG,CACxB,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,YAAY,CAAC,UAAU,KAAK,cAAc,CAAC,eAAe,CAAC,KAAK,EAAE,eAAe,CAAC,EAAE,CACpG,CACF,CAAC;SACH;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,iBAAiB,CAAC,eAAiC;QACxD,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,EAAE;YACvD,MAAM,CAAC,IAAI,CACT,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,CAC1B,CAAC,OAAO,EAAE,EAAE,CACV,IAAI,YAAY,CAAC,UAAU,KAAK,cAAc,CAAC,eAAe,CAAC,OAAO,EAAE,eAAe,CAAC,EAAE,CAC7F,CACF,CAAC;SACH;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,MAAM,CAAC,eAAe,CAAC,KAAY,EAAE,eAAiC;QAC3E,IAAI,KAAK,YAAY,qBAAS,EAAE;YAC9B,OAAO,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;SACxC;aAAM;YACL,OAAO,KAAK,CAAC,OAAO,CAAC;SACtB;IACH,CAAC;CACF;AA1ED,wCA0EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IHeftPlugin } from '../IHeftPlugin';\r\nimport { ScopedLogger } from './ScopedLogger';\r\nimport { ITerminalProvider } from '@rushstack/node-core-library';\r\nimport { FileErrorFormat, FileError } from './FileError';\r\n\r\nexport interface ILoggingManagerOptions {\r\n  terminalProvider: ITerminalProvider;\r\n}\r\n\r\nexport class LoggingManager {\r\n  private _options: ILoggingManagerOptions;\r\n  private _scopedLoggers: Map<string, ScopedLogger> = new Map<string, ScopedLogger>();\r\n  private _shouldPrintStacks: boolean = false;\r\n  private _hasAnyErrors: boolean = false;\r\n\r\n  public get errorsHaveBeenEmitted(): boolean {\r\n    return this._hasAnyErrors;\r\n  }\r\n\r\n  public constructor(options: ILoggingManagerOptions) {\r\n    this._options = options;\r\n  }\r\n\r\n  public enablePrintStacks(): void {\r\n    this._shouldPrintStacks = true;\r\n  }\r\n\r\n  public requestScopedLogger(plugin: IHeftPlugin, loggerName: string): ScopedLogger {\r\n    const existingScopedLogger: ScopedLogger | undefined = this._scopedLoggers.get(loggerName);\r\n    if (existingScopedLogger) {\r\n      throw new Error(\r\n        `A named logger with name \"${loggerName}\" has already been requested ` +\r\n          `by plugin \"${existingScopedLogger._requestingPlugin.pluginName}\".`\r\n      );\r\n    } else {\r\n      const scopedLogger: ScopedLogger = new ScopedLogger({\r\n        requestingPlugin: plugin,\r\n        loggerName,\r\n        terminalProvider: this._options.terminalProvider,\r\n        getShouldPrintStacks: () => this._shouldPrintStacks,\r\n        errorHasBeenEmittedCallback: () => (this._hasAnyErrors = true)\r\n      });\r\n      this._scopedLoggers.set(loggerName, scopedLogger);\r\n      return scopedLogger;\r\n    }\r\n  }\r\n\r\n  public getErrorStrings(fileErrorFormat?: FileErrorFormat): string[] {\r\n    const result: string[] = [];\r\n\r\n    for (const scopedLogger of this._scopedLoggers.values()) {\r\n      result.push(\r\n        ...scopedLogger.errors.map(\r\n          (error) => `[${scopedLogger.loggerName}] ${LoggingManager.getErrorMessage(error, fileErrorFormat)}`\r\n        )\r\n      );\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public getWarningStrings(fileErrorFormat?: FileErrorFormat): string[] {\r\n    const result: string[] = [];\r\n\r\n    for (const scopedLogger of this._scopedLoggers.values()) {\r\n      result.push(\r\n        ...scopedLogger.warnings.map(\r\n          (warning) =>\r\n            `[${scopedLogger.loggerName}] ${LoggingManager.getErrorMessage(warning, fileErrorFormat)}`\r\n        )\r\n      );\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public static getErrorMessage(error: Error, fileErrorFormat?: FileErrorFormat): string {\r\n    if (error instanceof FileError) {\r\n      return error.toString(fileErrorFormat);\r\n    } else {\r\n      return error.message;\r\n    }\r\n  }\r\n}\r\n"]}