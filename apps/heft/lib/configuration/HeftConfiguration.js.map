{"version":3,"file":"HeftConfiguration.js","sourceRoot":"","sources":["../../src/configuration/HeftConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport {\r\n  Terminal,\r\n  ITerminalProvider,\r\n  IPackageJson,\r\n  PackageJsonLookup,\r\n  InternalError\r\n} from '@rushstack/node-core-library';\r\nimport { trueCasePathSync } from 'true-case-path';\r\nimport { RigConfig } from '@rushstack/rig-package';\r\n\r\nimport { Constants } from '../utilities/Constants';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IHeftConfigurationInitializationOptions {\r\n  /**\r\n   * The working directory the tool was executed in.\r\n   */\r\n  cwd: string;\r\n\r\n  /**\r\n   * Terminal instance to facilitate logging.\r\n   */\r\n  terminalProvider: ITerminalProvider;\r\n}\r\n\r\n/**\r\n * The base action configuration that all custom action configuration files\r\n * should inherit from.\r\n *\r\n * @public\r\n */\r\nexport interface IHeftActionConfiguration {}\r\n\r\n/**\r\n * Options to be used when retrieving the action configuration.\r\n *\r\n * @public\r\n */\r\nexport interface IHeftActionConfigurationOptions {\r\n  /**\r\n   * Whether or not arrays should be merged across Heft action configuration files.\r\n   */\r\n  mergeArrays?: boolean;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class HeftConfiguration {\r\n  private _buildFolder!: string;\r\n  private _projectHeftDataFolder: string | undefined;\r\n  private _projectConfigFolder: string | undefined;\r\n  private _buildCacheFolder: string | undefined;\r\n  private _rigConfig: RigConfig | undefined;\r\n  private _globalTerminal!: Terminal;\r\n  private _terminalProvider!: ITerminalProvider;\r\n\r\n  /**\r\n   * Project build folder. This is the folder containing the project's package.json file.\r\n   */\r\n  public get buildFolder(): string {\r\n    return this._buildFolder;\r\n  }\r\n\r\n  /**\r\n   * The path to the project's \".heft\" folder.\r\n   */\r\n  public get projectHeftDataFolder(): string {\r\n    if (!this._projectHeftDataFolder) {\r\n      this._projectHeftDataFolder = path.join(this.buildFolder, Constants.projectHeftFolderName);\r\n    }\r\n\r\n    return this._projectHeftDataFolder;\r\n  }\r\n\r\n  /**\r\n   * The path to the project's \"config\" folder.\r\n   */\r\n  public get projectConfigFolder(): string {\r\n    if (!this._projectConfigFolder) {\r\n      this._projectConfigFolder = path.join(this.buildFolder, Constants.projectConfigFolderName);\r\n    }\r\n\r\n    return this._projectConfigFolder;\r\n  }\r\n\r\n  /**\r\n   * The project's build cache folder.\r\n   *\r\n   * This folder exists at \\<project root\\>/.heft/build-cache. TypeScript's output\r\n   * goes into this folder and then is either copied or linked to the final output folder\r\n   */\r\n  public get buildCacheFolder(): string {\r\n    if (!this._buildCacheFolder) {\r\n      this._buildCacheFolder = path.join(this.projectHeftDataFolder, Constants.buildCacheFolderName);\r\n    }\r\n\r\n    return this._buildCacheFolder;\r\n  }\r\n\r\n  /**\r\n   * The rig.json configuration for this project, if present.\r\n   */\r\n  public get rigConfig(): RigConfig {\r\n    if (!this._rigConfig) {\r\n      throw new InternalError(\r\n        'The rigConfig cannot be accessed until HeftConfiguration.checkForRigAsync() has been called'\r\n      );\r\n    }\r\n    return this._rigConfig;\r\n  }\r\n\r\n  /**\r\n   * Terminal instance to facilitate logging.\r\n   */\r\n  public get globalTerminal(): Terminal {\r\n    return this._globalTerminal;\r\n  }\r\n\r\n  /**\r\n   * Terminal provider for the provided terminal.\r\n   */\r\n  public get terminalProvider(): ITerminalProvider {\r\n    return this._terminalProvider;\r\n  }\r\n\r\n  /**\r\n   * The Heft tool's package.json\r\n   */\r\n  public get heftPackageJson(): IPackageJson {\r\n    return PackageJsonLookup.instance.tryLoadPackageJsonFor(__dirname)!;\r\n  }\r\n\r\n  /**\r\n   * The package.json of the project being built\r\n   */\r\n  public get projectPackageJson(): IPackageJson {\r\n    return PackageJsonLookup.instance.tryLoadPackageJsonFor(this.buildFolder)!;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Performs the search for rig.json and initializes the `HeftConfiguration.rigConfig` object.\r\n   * @internal\r\n   */\r\n  public async _checkForRigAsync(): Promise<void> {\r\n    if (!this._rigConfig) {\r\n      this._rigConfig = await RigConfig.loadForProjectFolderAsync({ projectFolderPath: this._buildFolder });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  public static initialize(options: IHeftConfigurationInitializationOptions): HeftConfiguration {\r\n    const configuration: HeftConfiguration = new HeftConfiguration();\r\n\r\n    const packageJsonPath: string | undefined = PackageJsonLookup.instance.tryGetPackageJsonFilePathFor(\r\n      options.cwd\r\n    );\r\n    if (packageJsonPath) {\r\n      let buildFolder: string = path.dirname(packageJsonPath);\r\n      // The CWD path's casing may be incorrect on a case-insensitive filesystem. Some tools, like Jest\r\n      // expect the casing of the project path to be correct and produce unexpected behavior when the casing\r\n      // isn't correct.\r\n      // This ensures the casing of the project folder is correct.\r\n      buildFolder = trueCasePathSync(buildFolder);\r\n      configuration._buildFolder = buildFolder;\r\n    } else {\r\n      throw new Error('No package.json file found. Are you in a project folder?');\r\n    }\r\n\r\n    configuration._terminalProvider = options.terminalProvider;\r\n    configuration._globalTerminal = new Terminal(options.terminalProvider);\r\n\r\n    return configuration;\r\n  }\r\n}\r\n"]}