{"version":3,"file":"BuildAction.js","sourceRoot":"","sources":["../../../src/cli/actions/BuildAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D,qDAA0E;AAE1E,qDAAkD;AAClD,wDAAwG;AAExG,MAAa,WAAY,SAAQ,+BAAc;IAO7C,YACE,iBAAyC,EACzC,2BAAsD;QACpD,UAAU,EAAE,OAAO;QACnB,OAAO,EAAE,oBAAoB;QAC7B,aAAa,EAAE,EAAE;KAClB;QAED,KAAK,CAAC,wBAAwB,EAAE,iBAAiB,CAAC,CAAC;IACrD,CAAC;IAEM,kBAAkB;QACvB,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAE3B,IAAI,CAAC,wBAAwB,GAAG,uBAAU,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAC;QAC/E,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,wBAAwB,CAAC,cAAc,CAAC;QACpE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC;QAExD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACzC,iBAAiB,EAAE,SAAS;YAC5B,WAAW,EAAE,uCAAuC;SACrD,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACzC,iBAAiB,EAAE,SAAS;YAC5B,WAAW,EAAE,kDAAkD;SAChE,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,kBAAkB;QAChC,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACtC,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAES,KAAK,CAAC,wBAAwB;QACtC,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;YACzB,MAAM,UAAU,GAAe,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YACtD,MAAM,iBAAiB,GAAuB,EAAE,CAAC;YACjD,MAAM,UAAU,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;YAEpD,MAAM,iBAAO,CAAC,iCAAiC,CAC7C,IAAI,CAAC,QAAQ,EACb,OAAO,EACP,KAAK,IAAI,EAAE,CAAC,MAAM,UAAU,CAAC,YAAY,EAAE,CAC5C,CAAC;SACH;IACH,CAAC;IAES,KAAK,CAAC,aAAa;QAC3B,MAAM,UAAU,GAAe,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QACtD,MAAM,iBAAiB,mCAClB,uBAAU,CAAC,gCAAgC,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAC7E,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,EAChC,SAAS,EAAE,KAAK,GACjB,CAAC;QACF,MAAM,UAAU,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;QACpD,MAAM,UAAU,CAAC,YAAY,EAAE,CAAC;IAClC,CAAC;IAES,KAAK,CAAC,iBAAiB;QAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;YACzB,MAAM,IAAI,OAAO,CAAC,GAAG,EAAE;gBACrB,uCAAuC;YACzC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;CACF;AAzED,kCAyEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { CommandLineFlagParameter, ICommandLineActionOptions } from '@rushstack/ts-command-line';\r\n\r\nimport { HeftActionBase, IHeftActionBaseOptions } from './HeftActionBase';\r\nimport { CleanStage, ICleanStageOptions } from '../../stages/CleanStage';\r\nimport { Logging } from '../../utilities/Logging';\r\nimport { BuildStage, IBuildStageOptions, IBuildStageStandardParameters } from '../../stages/BuildStage';\r\n\r\nexport class BuildAction extends HeftActionBase {\r\n  protected _watchFlag!: CommandLineFlagParameter;\r\n  protected _productionFlag!: CommandLineFlagParameter;\r\n  protected _liteFlag!: CommandLineFlagParameter;\r\n  private _buildStandardParameters!: IBuildStageStandardParameters;\r\n  private _cleanFlag!: CommandLineFlagParameter;\r\n\r\n  public constructor(\r\n    heftActionOptions: IHeftActionBaseOptions,\r\n    commandLineActionOptions: ICommandLineActionOptions = {\r\n      actionName: 'build',\r\n      summary: 'Build the project.',\r\n      documentation: ''\r\n    }\r\n  ) {\r\n    super(commandLineActionOptions, heftActionOptions);\r\n  }\r\n\r\n  public onDefineParameters(): void {\r\n    super.onDefineParameters();\r\n\r\n    this._buildStandardParameters = BuildStage.defineStageStandardParameters(this);\r\n    this._productionFlag = this._buildStandardParameters.productionFlag;\r\n    this._liteFlag = this._buildStandardParameters.liteFlag;\r\n\r\n    this._watchFlag = this.defineFlagParameter({\r\n      parameterLongName: '--watch',\r\n      description: 'If provided, run tests in watch mode.'\r\n    });\r\n\r\n    this._cleanFlag = this.defineFlagParameter({\r\n      parameterLongName: '--clean',\r\n      description: 'If specified, clean the package before building.'\r\n    });\r\n  }\r\n\r\n  protected async actionExecuteAsync(): Promise<void> {\r\n    await this.runCleanIfRequestedAsync();\r\n    await this.runBuildAsync();\r\n  }\r\n\r\n  protected async runCleanIfRequestedAsync(): Promise<void> {\r\n    if (this._cleanFlag.value) {\r\n      const cleanStage: CleanStage = this.stages.cleanStage;\r\n      const cleanStageOptions: ICleanStageOptions = {};\r\n      await cleanStage.initializeAsync(cleanStageOptions);\r\n\r\n      await Logging.runFunctionWithLoggingBoundsAsync(\r\n        this.terminal,\r\n        'Clean',\r\n        async () => await cleanStage.executeAsync()\r\n      );\r\n    }\r\n  }\r\n\r\n  protected async runBuildAsync(): Promise<void> {\r\n    const buildStage: BuildStage = this.stages.buildStage;\r\n    const buildStageOptions: IBuildStageOptions = {\r\n      ...BuildStage.getOptionsFromStandardParameters(this._buildStandardParameters),\r\n      watchMode: this._watchFlag.value,\r\n      serveMode: false\r\n    };\r\n    await buildStage.initializeAsync(buildStageOptions);\r\n    await buildStage.executeAsync();\r\n  }\r\n\r\n  protected async afterExecuteAsync(): Promise<void> {\r\n    if (this._watchFlag.value) {\r\n      await new Promise(() => {\r\n        /* never continue if in --watch mode */\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}