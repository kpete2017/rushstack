{"version":3,"file":"CustomAction.js","sourceRoot":"","sources":["../../../src/cli/actions/CustomAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter,\r\n  CommandLineIntegerParameter,\r\n  CommandLineStringListParameter\r\n} from '@rushstack/ts-command-line';\r\n\r\nimport { HeftActionBase, IHeftActionBaseOptions } from './HeftActionBase';\r\n\r\n/** @beta */\r\nexport interface ICustomActionParameterFlag extends ICustomActionParameterBase<boolean> {\r\n  kind: 'flag';\r\n}\r\n\r\n/** @beta */\r\nexport interface ICustomActionParameterInteger extends ICustomActionParameterBase<number> {\r\n  kind: 'integer';\r\n}\r\n\r\n/** @beta */\r\nexport interface ICustomActionParameterString extends ICustomActionParameterBase<string> {\r\n  kind: 'string';\r\n}\r\n\r\n/** @beta */\r\nexport interface ICustomActionParameterStringList extends ICustomActionParameterBase<ReadonlyArray<string>> {\r\n  kind: 'stringList';\r\n}\r\n\r\n/** @beta */\r\nexport interface ICustomActionParameterBase<TParameter extends CustomActionParameterType> {\r\n  kind: 'flag' | 'integer' | 'string' | 'stringList'; // TODO: Add \"choice\"\r\n\r\n  parameterLongName: string;\r\n  description: string;\r\n}\r\n\r\n/** @beta */\r\nexport type ICustomActionParameter<TParameter> = TParameter extends boolean\r\n  ? ICustomActionParameterFlag\r\n  : TParameter extends number\r\n  ? ICustomActionParameterInteger\r\n  : TParameter extends string\r\n  ? ICustomActionParameterString\r\n  : TParameter extends ReadonlyArray<string>\r\n  ? ICustomActionParameterStringList\r\n  : never;\r\n\r\n/** @beta */\r\nexport type CustomActionParameterType = string | boolean | number | ReadonlyArray<string> | undefined;\r\n\r\n/** @beta */\r\nexport interface ICustomActionOptions<TParameters> {\r\n  actionName: string;\r\n  documentation: string;\r\n  summary?: string;\r\n\r\n  parameters?: { [K in keyof TParameters]: ICustomActionParameter<TParameters[K]> };\r\n\r\n  callback: (parameters: TParameters) => void | Promise<void>;\r\n}\r\n\r\nexport class CustomAction<TParameters> extends HeftActionBase {\r\n  private _customActionOptions: ICustomActionOptions<TParameters>;\r\n  private _parameterValues!: Map<string, () => CustomActionParameterType>;\r\n\r\n  public constructor(\r\n    customActionOptions: ICustomActionOptions<TParameters>,\r\n    options: IHeftActionBaseOptions\r\n  ) {\r\n    super(\r\n      {\r\n        actionName: customActionOptions.actionName,\r\n        documentation: customActionOptions.documentation,\r\n        summary: customActionOptions.summary || ''\r\n      },\r\n      options\r\n    );\r\n\r\n    this._customActionOptions = customActionOptions;\r\n  }\r\n\r\n  public onDefineParameters(): void {\r\n    super.onDefineParameters();\r\n\r\n    this._parameterValues = new Map<string, () => CustomActionParameterType>();\r\n    for (const [callbackValueName, untypedParameterOption] of Object.entries(\r\n      this._customActionOptions.parameters || {}\r\n    )) {\r\n      if (this._parameterValues.has(callbackValueName)) {\r\n        throw new Error(`Duplicate callbackValueName: ${callbackValueName}`);\r\n      }\r\n\r\n      let getParameterValue: () => CustomActionParameterType;\r\n\r\n      const parameterOption: ICustomActionParameterBase<CustomActionParameterType> =\r\n        untypedParameterOption as ICustomActionParameterBase<CustomActionParameterType>;\r\n      switch (parameterOption.kind) {\r\n        case 'flag': {\r\n          const parameter: CommandLineFlagParameter = this.defineFlagParameter({\r\n            parameterLongName: parameterOption.parameterLongName,\r\n            description: parameterOption.description\r\n          });\r\n          getParameterValue = () => parameter.value;\r\n          break;\r\n        }\r\n\r\n        case 'string': {\r\n          const parameter: CommandLineStringParameter = this.defineStringParameter({\r\n            parameterLongName: parameterOption.parameterLongName,\r\n            description: parameterOption.description,\r\n            argumentName: 'VALUE'\r\n          });\r\n          getParameterValue = () => parameter.value;\r\n          break;\r\n        }\r\n\r\n        case 'integer': {\r\n          const parameter: CommandLineIntegerParameter = this.defineIntegerParameter({\r\n            parameterLongName: parameterOption.parameterLongName,\r\n            description: parameterOption.description,\r\n            argumentName: 'VALUE'\r\n          });\r\n          getParameterValue = () => parameter.value;\r\n          break;\r\n        }\r\n\r\n        case 'stringList': {\r\n          const parameter: CommandLineStringListParameter = this.defineStringListParameter({\r\n            parameterLongName: parameterOption.parameterLongName,\r\n            description: parameterOption.description,\r\n            argumentName: 'VALUE'\r\n          });\r\n          getParameterValue = () => parameter.values;\r\n          break;\r\n        }\r\n\r\n        default: {\r\n          throw new Error(\r\n            `Unrecognized parameter kind \"${parameterOption.kind}\" for parameter \"${parameterOption.parameterLongName}`\r\n          );\r\n        }\r\n      }\r\n\r\n      this._parameterValues.set(callbackValueName, getParameterValue);\r\n    }\r\n  }\r\n\r\n  protected async actionExecuteAsync(): Promise<void> {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const parameterValues: Record<string, any> = {};\r\n\r\n    for (const [callbackName, getParameterValue] of this._parameterValues.entries()) {\r\n      parameterValues[callbackName] = getParameterValue();\r\n    }\r\n\r\n    await this._customActionOptions.callback(parameterValues as TParameters);\r\n  }\r\n}\r\n"]}