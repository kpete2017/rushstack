{"version":3,"file":"HeftActionBase.js","sourceRoot":"","sources":["../../../src/cli/actions/HeftActionBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  CommandLineAction,\r\n  CommandLineFlagParameter,\r\n  ICommandLineActionOptions,\r\n  ICommandLineFlagDefinition,\r\n  IBaseCommandLineDefinition,\r\n  ICommandLineChoiceDefinition,\r\n  CommandLineChoiceParameter,\r\n  CommandLineIntegerParameter,\r\n  ICommandLineIntegerDefinition,\r\n  CommandLineStringParameter,\r\n  ICommandLineStringDefinition,\r\n  CommandLineStringListParameter,\r\n  ICommandLineStringListDefinition\r\n} from '@rushstack/ts-command-line';\r\nimport {\r\n  Terminal,\r\n  IPackageJson,\r\n  Colors,\r\n  ConsoleTerminalProvider,\r\n  AlreadyReportedError\r\n} from '@rushstack/node-core-library';\r\nimport { performance } from 'perf_hooks';\r\n\r\nimport { MetricsCollector } from '../../metrics/MetricsCollector';\r\nimport { HeftConfiguration } from '../../configuration/HeftConfiguration';\r\nimport { BuildStage } from '../../stages/BuildStage';\r\nimport { CleanStage } from '../../stages/CleanStage';\r\nimport { TestStage } from '../../stages/TestStage';\r\nimport { LoggingManager } from '../../pluginFramework/logging/LoggingManager';\r\nimport { Constants } from '../../utilities/Constants';\r\n\r\nexport interface IStages {\r\n  buildStage: BuildStage;\r\n  cleanStage: CleanStage;\r\n  testStage: TestStage;\r\n}\r\n\r\nexport interface IHeftActionBaseOptions {\r\n  terminal: Terminal;\r\n  loggingManager: LoggingManager;\r\n  metricsCollector: MetricsCollector;\r\n  heftConfiguration: HeftConfiguration;\r\n  stages: IStages;\r\n}\r\n\r\nexport abstract class HeftActionBase extends CommandLineAction {\r\n  protected readonly terminal: Terminal;\r\n  protected readonly loggingManager: LoggingManager;\r\n  protected readonly metricsCollector: MetricsCollector;\r\n  protected readonly heftConfiguration: HeftConfiguration;\r\n  protected readonly stages: IStages;\r\n  protected verboseFlag!: CommandLineFlagParameter;\r\n\r\n  public constructor(\r\n    commandLineOptions: ICommandLineActionOptions,\r\n    heftActionOptions: IHeftActionBaseOptions\r\n  ) {\r\n    super(commandLineOptions);\r\n    this.terminal = heftActionOptions.terminal;\r\n    this.loggingManager = heftActionOptions.loggingManager;\r\n    this.metricsCollector = heftActionOptions.metricsCollector;\r\n    this.heftConfiguration = heftActionOptions.heftConfiguration;\r\n    this.stages = heftActionOptions.stages;\r\n    this.setStartTime();\r\n  }\r\n\r\n  public onDefineParameters(): void {\r\n    this.verboseFlag = this.defineFlagParameter({\r\n      parameterLongName: '--verbose',\r\n      parameterShortName: '-v',\r\n      description: 'If specified, log information useful for debugging.'\r\n    });\r\n  }\r\n\r\n  public defineChoiceParameter(options: ICommandLineChoiceDefinition): CommandLineChoiceParameter {\r\n    this._validateDefinedParameter(options);\r\n    return super.defineChoiceParameter(options);\r\n  }\r\n\r\n  public defineFlagParameter(options: ICommandLineFlagDefinition): CommandLineFlagParameter {\r\n    this._validateDefinedParameter(options);\r\n    return super.defineFlagParameter(options);\r\n  }\r\n\r\n  public defineIntegerParameter(options: ICommandLineIntegerDefinition): CommandLineIntegerParameter {\r\n    this._validateDefinedParameter(options);\r\n    return super.defineIntegerParameter(options);\r\n  }\r\n\r\n  public defineStringParameter(options: ICommandLineStringDefinition): CommandLineStringParameter {\r\n    this._validateDefinedParameter(options);\r\n    return super.defineStringParameter(options);\r\n  }\r\n\r\n  public defineStringListParameter(\r\n    options: ICommandLineStringListDefinition\r\n  ): CommandLineStringListParameter {\r\n    this._validateDefinedParameter(options);\r\n    return super.defineStringListParameter(options);\r\n  }\r\n\r\n  public setStartTime(): void {\r\n    this.metricsCollector.setStartTime();\r\n  }\r\n\r\n  public recordMetrics(): void {\r\n    this.metricsCollector.record(this.actionName);\r\n  }\r\n\r\n  public async onExecute(): Promise<void> {\r\n    this.terminal.writeLine(`Starting ${this.actionName}`);\r\n\r\n    if (this.verboseFlag.value) {\r\n      if (this.heftConfiguration.terminalProvider instanceof ConsoleTerminalProvider) {\r\n        this.heftConfiguration.terminalProvider.verboseEnabled = true;\r\n      }\r\n    }\r\n\r\n    let encounteredError: boolean = false;\r\n    try {\r\n      await this.actionExecuteAsync();\r\n      await this.afterExecuteAsync();\r\n    } catch (e) {\r\n      encounteredError = true;\r\n      throw e;\r\n    } finally {\r\n      this.recordMetrics();\r\n\r\n      const warningStrings: string[] = this.loggingManager.getWarningStrings();\r\n      const errorStrings: string[] = this.loggingManager.getErrorStrings();\r\n\r\n      const encounteredWarnings: boolean = warningStrings.length > 0;\r\n      encounteredError = encounteredError || errorStrings.length > 0;\r\n\r\n      this.terminal.writeLine(\r\n        Colors.bold(\r\n          (encounteredError ? Colors.red : encounteredWarnings ? Colors.yellow : Colors.green)(\r\n            `-------------------- Finished (${Math.round(performance.now()) / 1000}s) --------------------`\r\n          )\r\n        )\r\n      );\r\n\r\n      if (warningStrings.length > 0) {\r\n        this.terminal.writeWarningLine(`Encountered ${warningStrings.length} warnings:`);\r\n        for (const warningString of warningStrings) {\r\n          this.terminal.writeWarningLine(`  ${warningString}`);\r\n        }\r\n      }\r\n\r\n      if (errorStrings.length > 0) {\r\n        this.terminal.writeErrorLine(`Encountered ${errorStrings.length} errors:`);\r\n        for (const errorString of errorStrings) {\r\n          this.terminal.writeErrorLine(`  ${errorString}`);\r\n        }\r\n      }\r\n\r\n      const projectPackageJson: IPackageJson = this.heftConfiguration.projectPackageJson;\r\n      this.terminal.writeLine(\r\n        `Project: ${projectPackageJson.name}`,\r\n        Colors.dim(Colors.gray(`@${projectPackageJson.version}`))\r\n      );\r\n      this.terminal.writeLine(`Heft version: ${this.heftConfiguration.heftPackageJson.version}`);\r\n      this.terminal.writeLine(`Node version: ${process.version}`);\r\n    }\r\n\r\n    if (encounteredError) {\r\n      throw new AlreadyReportedError();\r\n    }\r\n  }\r\n\r\n  protected abstract actionExecuteAsync(): Promise<void>;\r\n\r\n  /**\r\n   * @virtual\r\n   */\r\n  protected async afterExecuteAsync(): Promise<void> {\r\n    /* no-op by default */\r\n  }\r\n\r\n  private _validateDefinedParameter(options: IBaseCommandLineDefinition): void {\r\n    if (\r\n      options.parameterLongName === Constants.pluginParameterLongName ||\r\n      options.parameterLongName === Constants.debugParameterLongName\r\n    ) {\r\n      throw new Error(`Actions must not register a parameter with longName \"${options.parameterLongName}\".`);\r\n    }\r\n  }\r\n}\r\n"]}