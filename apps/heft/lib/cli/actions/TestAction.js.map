{"version":3,"file":"TestAction.js","sourceRoot":"","sources":["../../../src/cli/actions/TestAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringListParameter,\r\n  CommandLineStringParameter,\r\n  CommandLineIntegerParameter\r\n} from '@rushstack/ts-command-line';\r\n\r\nimport { BuildAction } from './BuildAction';\r\nimport { IHeftActionBaseOptions } from './HeftActionBase';\r\nimport { TestStage, ITestStageOptions } from '../../stages/TestStage';\r\nimport { Logging } from '../../utilities/Logging';\r\n\r\nexport class TestAction extends BuildAction {\r\n  private _noTestFlag!: CommandLineFlagParameter;\r\n  private _noBuildFlag!: CommandLineFlagParameter;\r\n  private _updateSnapshotsFlag!: CommandLineFlagParameter;\r\n  private _findRelatedTests!: CommandLineStringListParameter;\r\n  /*\r\n  // Temporary workaround for https://github.com/microsoft/rushstack/issues/2759\r\n  private _passWithNoTests!: CommandLineFlagParameter;\r\n  */\r\n  private _silent!: CommandLineFlagParameter;\r\n  private _testNamePattern!: CommandLineStringParameter;\r\n  private _testPathPattern!: CommandLineStringListParameter;\r\n  private _testTimeout!: CommandLineIntegerParameter;\r\n  private _detectOpenHandles!: CommandLineFlagParameter;\r\n  private _debugHeftReporter!: CommandLineFlagParameter;\r\n  private _maxWorkers!: CommandLineStringParameter;\r\n\r\n  public constructor(heftActionOptions: IHeftActionBaseOptions) {\r\n    super(heftActionOptions, {\r\n      actionName: 'test',\r\n      summary: 'Build the project and run tests.',\r\n      documentation: ''\r\n    });\r\n  }\r\n\r\n  public onDefineParameters(): void {\r\n    super.onDefineParameters();\r\n\r\n    this._noTestFlag = this.defineFlagParameter({\r\n      parameterLongName: '--no-test',\r\n      description: 'If specified, run the build without testing.',\r\n      undocumentedSynonyms: ['--notest'] // To be removed\r\n    });\r\n\r\n    this._noBuildFlag = this.defineFlagParameter({\r\n      parameterLongName: '--no-build',\r\n      description: 'If provided, only run tests. Do not build first.'\r\n    });\r\n\r\n    this._updateSnapshotsFlag = this.defineFlagParameter({\r\n      parameterLongName: '--update-snapshots',\r\n      parameterShortName: '-u',\r\n      description:\r\n        'Update Jest snapshots while running the tests.' +\r\n        ' This corresponds to the \"--updateSnapshots\" parameter in Jest'\r\n    });\r\n\r\n    this._findRelatedTests = this.defineStringListParameter({\r\n      parameterLongName: '--find-related-tests',\r\n      argumentName: 'SOURCE_FILE',\r\n      description:\r\n        'Find and run the tests that cover a space separated list of source files that' +\r\n        ' were passed in as arguments.' +\r\n        ' This corresponds to the \"--findRelatedTests\" parameter in Jest\\'s documentation.'\r\n    });\r\n    /*\r\n    // Temporary workaround for https://github.com/microsoft/rushstack/issues/2759\r\n    this._passWithNoTests = this.defineFlagParameter({\r\n      parameterLongName: '--pass-with-no-tests',\r\n      description:\r\n        'Allow the test suite to pass when no test files are found.' +\r\n        ' This corresponds to the \"--passWithNoTests\" parameter in Jest\\'s documentation.'\r\n    });\r\n    */\r\n    this._silent = this.defineFlagParameter({\r\n      parameterLongName: '--silent',\r\n      description:\r\n        'Prevent tests from printing messages through the console.' +\r\n        ' This corresponds to the \"--silent\" parameter in Jest\\'s documentation.'\r\n    });\r\n\r\n    this._testNamePattern = this.defineStringParameter({\r\n      parameterLongName: '--test-name-pattern',\r\n      parameterShortName: '-t',\r\n      argumentName: 'REGEXP',\r\n      description:\r\n        'Run only tests with a name that matches a regular expression.' +\r\n        ' The REGEXP is matched against the full name, which is a combination of the test name' +\r\n        ' and all its surrounding describe blocks.' +\r\n        ' This corresponds to the \"--testNamePattern\" parameter in Jest\\'s documentation.'\r\n    });\r\n\r\n    this._testPathPattern = this.defineStringListParameter({\r\n      parameterLongName: '--test-path-pattern',\r\n      argumentName: 'REGEXP',\r\n      description:\r\n        'Run only tests with a source file path that matches a regular expression.' +\r\n        ' On Windows you will need to use \"/\" instead of \"\"' +\r\n        ' This corresponds to the \"--testPathPattern\" parameter in Jest\\'s documentation.'\r\n    });\r\n\r\n    this._testTimeout = this.defineIntegerParameter({\r\n      parameterLongName: '--test-timeout-ms',\r\n      argumentName: 'INTEGER',\r\n      description:\r\n        \"Change the default timeout for tests; if a test doesn't complete within this many\" +\r\n        ' milliseconds, it will fail. Individual tests can override the default. If unspecified, ' +\r\n        ' the default is normally 5000 ms.' +\r\n        ' This corresponds to the \"--testTimeout\" parameter in Jest\\'s documentation.'\r\n    });\r\n\r\n    this._detectOpenHandles = this.defineFlagParameter({\r\n      parameterLongName: '--detect-open-handles',\r\n      description:\r\n        'Attempt to collect and print open handles preventing Jest from exiting cleanly.' +\r\n        ' This option has a significant performance penalty and should only be used for debugging.' +\r\n        ' This corresponds to the \"--detectOpenHandles\" parameter in Jest\\'s documentation.'\r\n    });\r\n\r\n    this._debugHeftReporter = this.defineFlagParameter({\r\n      parameterLongName: '--debug-heft-reporter',\r\n      description:\r\n        'Normally Heft installs a custom Jest reporter so that test results are presented consistently' +\r\n        ' with other task logging. If you suspect a problem with the HeftJestReporter, specify' +\r\n        ' \"--debug-heft-reporter\" to temporarily disable it so that you can compare with how Jest\\'s' +\r\n        ' default reporter would have presented it. Include this output in your bug report.' +\r\n        ' Do not use \"--debug-heft-reporter\" in production.'\r\n    });\r\n\r\n    this._maxWorkers = this.defineStringParameter({\r\n      parameterLongName: '--max-workers',\r\n      argumentName: 'COUNT_OR_PERCENTAGE',\r\n      description:\r\n        'Use this parameter to control maximum number of worker processes tests are allowed to use.' +\r\n        ' This parameter is similar to the parameter noted in the Jest documentation, and can either be' +\r\n        ' an integer representing the number of workers to spawn when running tests, or can be a string' +\r\n        ' representing a percentage of the available CPUs on the machine to utilize. Example values: \"3\",' +\r\n        ' \"25%%\"' // The \"%%\" is required because argparse (used by ts-command-line) treats % as an escape character\r\n    });\r\n  }\r\n\r\n  protected async actionExecuteAsync(): Promise<void> {\r\n    const shouldBuild: boolean = !this._noBuildFlag.value;\r\n    const watchMode: boolean = this._watchFlag.value;\r\n    const noTest: boolean = this._noTestFlag.value;\r\n    const lite: boolean = this._liteFlag.value;\r\n\r\n    if (watchMode) {\r\n      if (!shouldBuild) {\r\n        throw new Error(`${this._watchFlag.longName} is not compatible with ${this._noBuildFlag.longName}`);\r\n      } else if (noTest) {\r\n        throw new Error(`${this._watchFlag.longName} is not compatible with ${this._noTestFlag.longName}`);\r\n      } else if (lite) {\r\n        throw new Error(`${this._watchFlag.longName} is not compatible with ${this._liteFlag.longName}`);\r\n      }\r\n    }\r\n\r\n    if (!shouldBuild) {\r\n      if (noTest) {\r\n        throw new Error(`${this._noTestFlag.longName} is not compatible with ${this._noBuildFlag.longName}`);\r\n      }\r\n    }\r\n\r\n    if (noTest || lite /* \"&& shouldBuild\" is implied */) {\r\n      await super.actionExecuteAsync();\r\n    } else {\r\n      const testStage: TestStage = this.stages.testStage;\r\n      const testStageOptions: ITestStageOptions = {\r\n        watchMode: this._watchFlag.value,\r\n        updateSnapshots: this._updateSnapshotsFlag.value,\r\n\r\n        findRelatedTests: this._findRelatedTests.values,\r\n        // Temporary workaround for https://github.com/microsoft/rushstack/issues/2759\r\n        passWithNoTests: true, // this._passWithNoTests.value,\r\n        silent: this._silent.value,\r\n        testNamePattern: this._testNamePattern.value,\r\n        testPathPattern: this._testPathPattern.values,\r\n        testTimeout: this._testTimeout.value,\r\n        detectOpenHandles: this._detectOpenHandles.value,\r\n        debugHeftReporter: this._debugHeftReporter.value,\r\n        maxWorkers: this._maxWorkers.value\r\n      };\r\n      await testStage.initializeAsync(testStageOptions);\r\n\r\n      if (shouldBuild) {\r\n        await super.actionExecuteAsync();\r\n\r\n        if (\r\n          this.loggingManager.errorsHaveBeenEmitted &&\r\n          !watchMode // Kick off tests in --watch mode\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        await Logging.runFunctionWithLoggingBoundsAsync(\r\n          this.terminal,\r\n          'Test',\r\n          async () => await testStage.executeAsync()\r\n        );\r\n      } else {\r\n        await testStage.executeAsync();\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}