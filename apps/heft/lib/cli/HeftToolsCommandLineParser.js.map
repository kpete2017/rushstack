{"version":3,"file":"HeftToolsCommandLineParser.js","sourceRoot":"","sources":["../../src/cli/HeftToolsCommandLineParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  CommandLineParser,\r\n  CommandLineStringListParameter,\r\n  CommandLineFlagParameter\r\n} from '@rushstack/ts-command-line';\r\nimport {\r\n  Terminal,\r\n  InternalError,\r\n  ConsoleTerminalProvider,\r\n  AlreadyReportedError,\r\n  Path,\r\n  FileSystem\r\n} from '@rushstack/node-core-library';\r\nimport { ArgumentParser } from 'argparse';\r\nimport { SyncHook } from 'tapable';\r\n\r\nimport { MetricsCollector } from '../metrics/MetricsCollector';\r\nimport { CleanAction } from './actions/CleanAction';\r\nimport { BuildAction } from './actions/BuildAction';\r\nimport { StartAction } from './actions/StartAction';\r\nimport { TestAction } from './actions/TestAction';\r\nimport { PluginManager } from '../pluginFramework/PluginManager';\r\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\r\nimport { IHeftActionBaseOptions, IStages } from './actions/HeftActionBase';\r\nimport { InternalHeftSession } from '../pluginFramework/InternalHeftSession';\r\nimport { CleanStage } from '../stages/CleanStage';\r\nimport { BuildStage } from '../stages/BuildStage';\r\nimport { TestStage } from '../stages/TestStage';\r\nimport { LoggingManager } from '../pluginFramework/logging/LoggingManager';\r\nimport { ICustomActionOptions, CustomAction } from './actions/CustomAction';\r\nimport { Constants } from '../utilities/Constants';\r\nimport { IHeftLifecycle, HeftLifecycleHooks } from '../pluginFramework/HeftLifecycle';\r\n\r\n/**\r\n * This interfaces specifies values for parameters that must be parsed before the CLI\r\n * is fully initialized.\r\n */\r\ninterface IPreInitializationArgumentValues {\r\n  plugins?: string[];\r\n  debug?: boolean;\r\n}\r\n\r\nexport class HeftToolsCommandLineParser extends CommandLineParser {\r\n  private _terminalProvider: ConsoleTerminalProvider;\r\n  private _terminal: Terminal;\r\n  private _loggingManager: LoggingManager;\r\n  private _metricsCollector: MetricsCollector;\r\n  private _pluginManager: PluginManager;\r\n  private _heftConfiguration: HeftConfiguration;\r\n  private _internalHeftSession: InternalHeftSession;\r\n  private _heftLifecycleHook: SyncHook<IHeftLifecycle>;\r\n\r\n  private _preInitializationArgumentValues: IPreInitializationArgumentValues;\r\n\r\n  private _unmanagedFlag!: CommandLineFlagParameter;\r\n  private _debugFlag!: CommandLineFlagParameter;\r\n  private _pluginsParameter!: CommandLineStringListParameter;\r\n\r\n  public get isDebug(): boolean {\r\n    return !!this._preInitializationArgumentValues.debug;\r\n  }\r\n\r\n  public get terminal(): Terminal {\r\n    return this._terminal;\r\n  }\r\n\r\n  public constructor() {\r\n    super({\r\n      toolFilename: 'heft',\r\n      toolDescription: 'Heft is a pluggable build system designed for web projects.'\r\n    });\r\n\r\n    this._preInitializationArgumentValues = this._getPreInitializationArgumentValues();\r\n\r\n    this._terminalProvider = new ConsoleTerminalProvider();\r\n    this._terminal = new Terminal(this._terminalProvider);\r\n    this._metricsCollector = new MetricsCollector();\r\n    this._loggingManager = new LoggingManager({\r\n      terminalProvider: this._terminalProvider\r\n    });\r\n\r\n    if (this.isDebug) {\r\n      this._loggingManager.enablePrintStacks();\r\n      InternalError.breakInDebugger = true;\r\n    }\r\n\r\n    this._heftConfiguration = HeftConfiguration.initialize({\r\n      cwd: process.cwd(),\r\n      terminalProvider: this._terminalProvider\r\n    });\r\n\r\n    const stages: IStages = {\r\n      buildStage: new BuildStage(this._heftConfiguration, this._loggingManager),\r\n      cleanStage: new CleanStage(this._heftConfiguration, this._loggingManager),\r\n      testStage: new TestStage(this._heftConfiguration, this._loggingManager)\r\n    };\r\n    const actionOptions: IHeftActionBaseOptions = {\r\n      terminal: this._terminal,\r\n      loggingManager: this._loggingManager,\r\n      metricsCollector: this._metricsCollector,\r\n      heftConfiguration: this._heftConfiguration,\r\n      stages\r\n    };\r\n\r\n    this._heftLifecycleHook = new SyncHook<IHeftLifecycle>(['heftLifecycle']);\r\n    this._internalHeftSession = new InternalHeftSession({\r\n      getIsDebugMode: () => this.isDebug,\r\n      ...stages,\r\n      heftLifecycleHook: this._heftLifecycleHook,\r\n      loggingManager: this._loggingManager,\r\n      metricsCollector: this._metricsCollector,\r\n      registerAction: <TParameters>(options: ICustomActionOptions<TParameters>) => {\r\n        const action: CustomAction<TParameters> = new CustomAction(options, actionOptions);\r\n        this.addAction(action);\r\n      }\r\n    });\r\n\r\n    this._pluginManager = new PluginManager({\r\n      terminal: this._terminal,\r\n      heftConfiguration: this._heftConfiguration,\r\n      internalHeftSession: this._internalHeftSession\r\n    });\r\n\r\n    const cleanAction: CleanAction = new CleanAction(actionOptions);\r\n    const buildAction: BuildAction = new BuildAction(actionOptions);\r\n    const startAction: StartAction = new StartAction(actionOptions);\r\n    const testAction: TestAction = new TestAction(actionOptions);\r\n\r\n    this.addAction(cleanAction);\r\n    this.addAction(buildAction);\r\n    this.addAction(startAction);\r\n    this.addAction(testAction);\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._unmanagedFlag = this.defineFlagParameter({\r\n      parameterLongName: '--unmanaged',\r\n      description:\r\n        'Disables the Heft version selector: When Heft is invoked via the shell path, normally it' +\r\n        \" will examine the project's package.json dependencies and try to use the locally installed version\" +\r\n        ' of Heft. Specify \"--unmanaged\" to force the invoked version of Heft to be used. This is useful for' +\r\n        ' example if you want to test a different version of Heft.'\r\n    });\r\n\r\n    this._debugFlag = this.defineFlagParameter({\r\n      parameterLongName: Constants.debugParameterLongName,\r\n      description: 'Show the full call stack if an error occurs while executing the tool'\r\n    });\r\n\r\n    this._pluginsParameter = this.defineStringListParameter({\r\n      parameterLongName: Constants.pluginParameterLongName,\r\n      argumentName: 'PATH',\r\n      description: 'Used to specify Heft plugins.'\r\n    });\r\n  }\r\n\r\n  public async execute(args?: string[]): Promise<boolean> {\r\n    // Defensively set the exit code to 1 so if the tool crashes for whatever reason, we'll have a nonzero exit code.\r\n    process.exitCode = 1;\r\n\r\n    this._terminalProvider.verboseEnabled = this.isDebug;\r\n\r\n    try {\r\n      this._normalizeCwd();\r\n\r\n      await this._checkForUpgradeAsync();\r\n\r\n      await this._heftConfiguration._checkForRigAsync();\r\n\r\n      if (this._heftConfiguration.rigConfig.rigFound) {\r\n        const rigProfileFolder: string =\r\n          await this._heftConfiguration.rigConfig.getResolvedProfileFolderAsync();\r\n        const relativeRigFolderPath: string = Path.formatConcisely({\r\n          pathToConvert: rigProfileFolder,\r\n          baseFolder: this._heftConfiguration.buildFolder\r\n        });\r\n        this._terminal.writeLine(`Using rig configuration from ${relativeRigFolderPath}`);\r\n      }\r\n\r\n      await this._initializePluginsAsync();\r\n\r\n      const heftLifecycle: IHeftLifecycle = {\r\n        hooks: new HeftLifecycleHooks()\r\n      };\r\n      this._heftLifecycleHook.call(heftLifecycle);\r\n\r\n      await heftLifecycle.hooks.toolStart.promise();\r\n\r\n      return await super.execute(args);\r\n    } catch (e) {\r\n      await this._reportErrorAndSetExitCode(e);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async _checkForUpgradeAsync(): Promise<void> {\r\n    // The .heft/clean.json file is a fairly reliable heuristic for detecting projects created prior to\r\n    // the big config file redesign with Heft 0.14.0\r\n    if (await FileSystem.existsAsync('.heft/clean.json')) {\r\n      this._terminal.writeErrorLine(\r\n        '\\nThis project has a \".heft/clean.json\" file, which is now obsolete as of Heft 0.14.0.'\r\n      );\r\n      this._terminal.writeLine(\r\n        '\\nFor instructions for migrating config files, please read UPGRADING.md in the @rushstack/heft package folder.\\n'\r\n      );\r\n      throw new AlreadyReportedError();\r\n    }\r\n  }\r\n\r\n  protected async onExecute(): Promise<void> {\r\n    try {\r\n      await super.onExecute();\r\n      await this._metricsCollector.flushAndTeardownAsync();\r\n    } catch (e) {\r\n      await this._reportErrorAndSetExitCode(e);\r\n    }\r\n\r\n    // If we make it here, things are fine and reset the exit code back to 0\r\n    process.exitCode = 0;\r\n  }\r\n\r\n  private _normalizeCwd(): void {\r\n    const buildFolder: string = this._heftConfiguration.buildFolder;\r\n    this._terminal.writeLine(`Project build folder is \"${buildFolder}\"`);\r\n    const currentCwd: string = process.cwd();\r\n    if (currentCwd !== buildFolder) {\r\n      // Update the CWD to the project's build root. Some tools, like Jest, use process.cwd()\r\n      this._terminal.writeVerboseLine(`CWD is \"${currentCwd}\". Normalizing to project build folder.`);\r\n      process.chdir(buildFolder);\r\n    }\r\n  }\r\n\r\n  private _getPreInitializationArgumentValues(\r\n    args: string[] = process.argv\r\n  ): IPreInitializationArgumentValues {\r\n    // This is a rough parsing of the --plugin parameters\r\n    const parser: ArgumentParser = new ArgumentParser({ addHelp: false });\r\n    parser.addArgument(this._pluginsParameter.longName, { dest: 'plugins', action: 'append' });\r\n    parser.addArgument(this._debugFlag.longName, { dest: 'debug', action: 'storeTrue' });\r\n\r\n    const [result]: IPreInitializationArgumentValues[] = parser.parseKnownArgs(args);\r\n    return result;\r\n  }\r\n\r\n  private async _initializePluginsAsync(): Promise<void> {\r\n    this._pluginManager.initializeDefaultPlugins();\r\n\r\n    await this._pluginManager.initializePluginsFromConfigFileAsync();\r\n\r\n    const pluginSpecifiers: string[] = this._preInitializationArgumentValues.plugins || [];\r\n    for (const pluginSpecifier of pluginSpecifiers) {\r\n      this._pluginManager.initializePlugin(pluginSpecifier);\r\n    }\r\n\r\n    this._pluginManager.afterInitializeAllPlugins();\r\n  }\r\n\r\n  private async _reportErrorAndSetExitCode(error: Error): Promise<void> {\r\n    if (!(error instanceof AlreadyReportedError)) {\r\n      this._terminal.writeErrorLine(error.toString());\r\n    }\r\n\r\n    if (this.isDebug) {\r\n      this._terminal.writeLine();\r\n      this._terminal.writeErrorLine(error.stack!);\r\n    }\r\n\r\n    await this._metricsCollector.flushAndTeardownAsync();\r\n\r\n    if (!process.exitCode || process.exitCode > 0) {\r\n      process.exit(process.exitCode);\r\n    } else {\r\n      process.exit(1);\r\n    }\r\n  }\r\n}\r\n"]}