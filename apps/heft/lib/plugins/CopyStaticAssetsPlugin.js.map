{"version":3,"file":"CopyStaticAssetsPlugin.js","sourceRoot":"","sources":["../../src/plugins/CopyStaticAssetsPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAE7B,kEAAuG;AAMvG,kEAA+D;AAE/D,uDAA2F;AAE3F,MAAM,WAAW,GAAW,wBAAwB,CAAC;AAUrD,MAAa,sBAAuB,SAAQ,iCAAe;IAA3D;;QA0CE;;WAEG;QACa,eAAU,GAAW,WAAW,CAAC;IA8EnD,CAAC;IAxHS,MAAM,KAAK,0BAA0B;QAC3C,IAAI,CAAC,sBAAsB,CAAC,2BAA2B,EAAE;YACvD,MAAM,UAAU,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,sBAAsB,CAAC,CAAC;YAC5F,sBAAsB,CAAC,2BAA2B,GAAG,IAAI,oCAAiB,CAAmB;gBAC3F,uBAAuB,EAAE,eAAe;gBACxC,cAAc,EAAE,UAAU;gBAC1B,mBAAmB,EAAE;oBACnB,eAAe,EAAE;wBACf,eAAe,EAAE,kCAAe,CAAC,MAAM;wBACvC,mBAAmB,EAAE,CACnB,aAA0D,EAC1D,YAAyD,EACzD,EAAE;4BACF,IAAI,aAAa,IAAI,CAAC,YAAY,EAAE;gCAClC,OAAO,aAAa,CAAC;6BACtB;iCAAM,IAAI,CAAC,aAAa,IAAI,YAAY,EAAE;gCACzC,OAAO,YAAY,CAAC;6BACrB;iCAAM,IAAI,YAAY,IAAI,aAAa,EAAE;gCACxC,uCACK,YAAY,GACZ,aAAa,EAChB;6BACH;iCAAM;gCACL,OAAO,SAAS,CAAC;6BAClB;wBACH,CAAC;qBACF;iBACF;gBACD,gBAAgB,EAAE;oBAChB,0BAA0B,EAAE;wBAC1B,oBAAoB,EAAE,uCAAoB,CAAC,sCAAsC;qBAClF;iBACF;aACF,CAAC,CAAC;SACJ;QAED,OAAO,sBAAsB,CAAC,2BAA2B,CAAC;IAC5D,CAAC;IAOD;;OAEG;IACI,KAAK,CAAC,WAAwB,EAAE,iBAAoC;QACzE,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,KAAyB,EAAE,EAAE;YACrE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,OAAyB,EAAE,EAAE;gBACjE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;oBACnD,MAAM,MAAM,GAAiB,WAAW,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC;oBAEnF,MAAM,6BAA6B,GACjC,MAAM,IAAI,CAAC,uCAAuC,CAAC,MAAM,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;oBAEzF,MAAM,IAAI,CAAC,YAAY,CAAC;wBACtB,MAAM;wBACN,kBAAkB,EAAE,CAAC,6BAA6B,CAAC;wBACnD,WAAW,EAAE,iBAAiB,CAAC,WAAW;wBAC1C,SAAS,EAAE,KAAK,CAAC,UAAU,CAAC,SAAS;qBACtC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,uCAAuC,CACnD,QAAkB,EAClB,iBAAoC;QAEpC,MAAM,uBAAuB,GAC3B,MAAM,iCAAe,CAAC,iCAAiC,CAAC,uCAAuC,CAC7F,QAAQ,EACR,iBAAiB,CAAC,WAAW,EAC7B,iBAAiB,CAAC,SAAS,CAC5B,CAAC;QAEJ,MAAM,8BAA8B,GAAgB,IAAI,GAAG,EAAU,CAAC;QACtE,MAAM,sBAAsB,GAAgB,IAAI,GAAG,EAAU,CAAC;QAE9D,MAAM,6BAA6B,GAAuB,MAAM,IAAI,CAAC,8BAA8B,CACjG,iBAAiB,CAAC,WAAW,EAC7B,QAAQ,CACT,CAAC;QACF,IAAI,6BAA6B,EAAE;YACjC,8BAA8B,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;YAClE,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,EAAE,6BAA6B,CAAC,CAAC,CAAC;SACzG;QAED,KAAK,MAAM,UAAU,IAAI,CAAA,uBAAuB,aAAvB,uBAAuB,uBAAvB,uBAAuB,CAAE,2BAA2B,KAAI,EAAE,EAAE;YACnF,8BAA8B,CAAC,GAAG,CAChC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,WAAW,EAAE,UAAU,CAAC,aAAa,CAAC,CACtE,CAAC;YACF,sBAAsB,CAAC,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;SACtD;QAED,uCACK,uBAAuB,aAAvB,uBAAuB,uBAAvB,uBAAuB,CAAE,kBAAkB;YAE9C,+CAA+C;YAC/C,YAAY,EAAE,KAAK,EACnB,kBAAkB,EAAE,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,EACtD,8BAA8B,EAAE,KAAK,CAAC,IAAI,CAAC,8BAA8B,CAAC,EAC1E,OAAO,EAAE,KAAK,EACd,QAAQ,EAAE,KAAK,IACf;IACJ,CAAC;IAEO,KAAK,CAAC,8BAA8B,CAC1C,aAAqB,EACrB,QAAkB;;QAElB,MAAM,eAAe,GACnB,MAAM,sBAAsB,CAAC,0BAA0B,CAAC,uCAAuC,CAC7F,QAAQ,EACR,aAAa,CACd,CAAC;QACJ,aAAO,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,eAAe,0CAAE,MAAM,CAAC;IAClD,CAAC;CACF;AA3HD,wDA2HC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Terminal } from '@rushstack/node-core-library';\r\nimport { ConfigurationFile, InheritanceType, PathResolutionMethod } from '@rushstack/heft-config-file';\r\n\r\nimport { HeftSession } from '../pluginFramework/HeftSession';\r\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\r\nimport { IBuildStageContext, ICompileSubstage } from '../stages/BuildStage';\r\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\r\nimport { CoreConfigFiles } from '../utilities/CoreConfigFiles';\r\nimport { ITypeScriptConfigurationJson } from './TypeScriptPlugin/TypeScriptPlugin';\r\nimport { CopyFilesPlugin, IResolvedDestinationCopyConfiguration } from './CopyFilesPlugin';\r\n\r\nconst PLUGIN_NAME: string = 'CopyStaticAssetsPlugin';\r\n\r\ninterface IPartialTsconfigCompilerOptions {\r\n  outDir?: string;\r\n}\r\n\r\ninterface IPartialTsconfig {\r\n  compilerOptions?: IPartialTsconfigCompilerOptions;\r\n}\r\n\r\nexport class CopyStaticAssetsPlugin extends CopyFilesPlugin {\r\n  private static __partialTsconfigFileLoader: ConfigurationFile<IPartialTsconfig> | undefined;\r\n\r\n  private static get _partialTsconfigFileLoader(): ConfigurationFile<IPartialTsconfig> {\r\n    if (!CopyStaticAssetsPlugin.__partialTsconfigFileLoader) {\r\n      const schemaPath: string = path.resolve(__dirname, '..', 'schemas', 'anything.schema.json');\r\n      CopyStaticAssetsPlugin.__partialTsconfigFileLoader = new ConfigurationFile<IPartialTsconfig>({\r\n        projectRelativeFilePath: 'tsconfig.json',\r\n        jsonSchemaPath: schemaPath,\r\n        propertyInheritance: {\r\n          compilerOptions: {\r\n            inheritanceType: InheritanceType.custom,\r\n            inheritanceFunction: (\r\n              currentObject: IPartialTsconfigCompilerOptions | undefined,\r\n              parentObject: IPartialTsconfigCompilerOptions | undefined\r\n            ) => {\r\n              if (currentObject && !parentObject) {\r\n                return currentObject;\r\n              } else if (!currentObject && parentObject) {\r\n                return parentObject;\r\n              } else if (parentObject && currentObject) {\r\n                return {\r\n                  ...parentObject,\r\n                  ...currentObject\r\n                };\r\n              } else {\r\n                return undefined;\r\n              }\r\n            }\r\n          }\r\n        },\r\n        jsonPathMetadata: {\r\n          '$.compilerOptions.outDir': {\r\n            pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToConfigurationFile\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return CopyStaticAssetsPlugin.__partialTsconfigFileLoader;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  public readonly pluginName: string = PLUGIN_NAME;\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\r\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\r\n      build.hooks.compile.tap(PLUGIN_NAME, (compile: ICompileSubstage) => {\r\n        compile.hooks.run.tapPromise(PLUGIN_NAME, async () => {\r\n          const logger: ScopedLogger = heftSession.requestScopedLogger('copy-static-assets');\r\n\r\n          const copyStaticAssetsConfiguration: IResolvedDestinationCopyConfiguration =\r\n            await this._loadCopyStaticAssetsConfigurationAsync(logger.terminal, heftConfiguration);\r\n\r\n          await this.runCopyAsync({\r\n            logger,\r\n            copyConfigurations: [copyStaticAssetsConfiguration],\r\n            buildFolder: heftConfiguration.buildFolder,\r\n            watchMode: build.properties.watchMode\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  private async _loadCopyStaticAssetsConfigurationAsync(\r\n    terminal: Terminal,\r\n    heftConfiguration: HeftConfiguration\r\n  ): Promise<IResolvedDestinationCopyConfiguration> {\r\n    const typescriptConfiguration: ITypeScriptConfigurationJson | undefined =\r\n      await CoreConfigFiles.typeScriptConfigurationFileLoader.tryLoadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        heftConfiguration.buildFolder,\r\n        heftConfiguration.rigConfig\r\n      );\r\n\r\n    const resolvedDestinationFolderPaths: Set<string> = new Set<string>();\r\n    const destinationFolderNames: Set<string> = new Set<string>();\r\n\r\n    const tsconfigDestinationFolderPath: string | undefined = await this._tryGetTsconfigOutDirPathAsync(\r\n      heftConfiguration.buildFolder,\r\n      terminal\r\n    );\r\n    if (tsconfigDestinationFolderPath) {\r\n      resolvedDestinationFolderPaths.add(tsconfigDestinationFolderPath);\r\n      destinationFolderNames.add(path.relative(heftConfiguration.buildFolder, tsconfigDestinationFolderPath));\r\n    }\r\n\r\n    for (const emitModule of typescriptConfiguration?.additionalModuleKindsToEmit || []) {\r\n      resolvedDestinationFolderPaths.add(\r\n        path.resolve(heftConfiguration.buildFolder, emitModule.outFolderName)\r\n      );\r\n      destinationFolderNames.add(emitModule.outFolderName);\r\n    }\r\n\r\n    return {\r\n      ...typescriptConfiguration?.staticAssetsToCopy,\r\n\r\n      // For now - these may need to be revised later\r\n      sourceFolder: 'src',\r\n      destinationFolders: Array.from(destinationFolderNames),\r\n      resolvedDestinationFolderPaths: Array.from(resolvedDestinationFolderPaths),\r\n      flatten: false,\r\n      hardlink: false\r\n    };\r\n  }\r\n\r\n  private async _tryGetTsconfigOutDirPathAsync(\r\n    projectFolder: string,\r\n    terminal: Terminal\r\n  ): Promise<string | undefined> {\r\n    const partialTsconfig: IPartialTsconfig | undefined =\r\n      await CopyStaticAssetsPlugin._partialTsconfigFileLoader.tryLoadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        projectFolder\r\n      );\r\n    return partialTsconfig?.compilerOptions?.outDir;\r\n  }\r\n}\r\n"]}