{"version":3,"file":"ApiExtractorRunner.js","sourceRoot":"","sources":["../../../src/plugins/ApiExtractorPlugin/ApiExtractorRunner.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as semver from 'semver';\r\nimport * as path from 'path';\r\nimport { Terminal, Path } from '@rushstack/node-core-library';\r\nimport type * as TApiExtractor from '@microsoft/api-extractor';\r\n\r\nimport { SubprocessRunnerBase } from '../../utilities/subprocess/SubprocessRunnerBase';\r\nimport { IScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\r\n\r\nexport interface IApiExtractorRunnerConfiguration {\r\n  /**\r\n   * The path to the Extractor's config file (\"api-extractor.json\")\r\n   *\r\n   * For example, /home/username/code/repo/project/config/api-extractor.json\r\n   */\r\n  apiExtractorJsonFilePath: string;\r\n\r\n  /**\r\n   * The path to the @microsoft/api-extractor package\r\n   *\r\n   * For example, /home/username/code/repo/project/node_modules/@microsoft/api-extractor\r\n   */\r\n  apiExtractorPackagePath: string;\r\n\r\n  /**\r\n   * The path to the typescript package\r\n   *\r\n   * For example, /home/username/code/repo/project/node_modules/typescript\r\n   */\r\n  typescriptPackagePath: string | undefined;\r\n\r\n  /**\r\n   * The folder of the project being built\r\n   *\r\n   * For example, /home/username/code/repo/project\r\n   */\r\n  buildFolder: string;\r\n\r\n  /**\r\n   * If set to true, run API Extractor in production mode\r\n   */\r\n  production: boolean;\r\n}\r\n\r\nexport class ApiExtractorRunner extends SubprocessRunnerBase<IApiExtractorRunnerConfiguration> {\r\n  private _scopedLogger!: IScopedLogger;\r\n  private _terminal!: Terminal;\r\n\r\n  public get filename(): string {\r\n    return __filename;\r\n  }\r\n\r\n  public async invokeAsync(): Promise<void> {\r\n    this._scopedLogger = await this.requestScopedLoggerAsync('api-extractor');\r\n    this._terminal = this._scopedLogger.terminal;\r\n\r\n    const apiExtractor: typeof TApiExtractor = require(this._configuration.apiExtractorPackagePath);\r\n\r\n    this._scopedLogger.terminal.writeLine(`Using API Extractor version ${apiExtractor.Extractor.version}`);\r\n\r\n    const apiExtractorVersion: semver.SemVer | null = semver.parse(apiExtractor.Extractor.version);\r\n    if (\r\n      !apiExtractorVersion ||\r\n      apiExtractorVersion.major < 7 ||\r\n      (apiExtractorVersion.major === 7 && apiExtractorVersion.minor < 10)\r\n    ) {\r\n      this._scopedLogger.emitWarning(new Error(`Heft requires API Extractor version 7.10.0 or newer`));\r\n    }\r\n\r\n    const configObjectFullPath: string = this._configuration.apiExtractorJsonFilePath;\r\n    const configObject: TApiExtractor.IConfigFile =\r\n      apiExtractor.ExtractorConfig.loadFile(configObjectFullPath);\r\n\r\n    const extractorConfig: TApiExtractor.ExtractorConfig = apiExtractor.ExtractorConfig.prepare({\r\n      configObject,\r\n      configObjectFullPath,\r\n      packageJsonFullPath: path.join(this._configuration.buildFolder, 'package.json'),\r\n      projectFolderLookupToken: this._configuration.buildFolder\r\n    });\r\n\r\n    const extractorOptions: TApiExtractor.IExtractorInvokeOptions = {\r\n      localBuild: !this._configuration.production,\r\n      typescriptCompilerFolder: this._configuration.typescriptPackagePath,\r\n      messageCallback: (message: TApiExtractor.ExtractorMessage) => {\r\n        switch (message.logLevel) {\r\n          case apiExtractor.ExtractorLogLevel.Error: {\r\n            let logMessage: string;\r\n            if (message.sourceFilePath) {\r\n              const filePathForLog: string = Path.isUnderOrEqual(\r\n                message.sourceFilePath,\r\n                this._configuration.buildFolder\r\n              )\r\n                ? path.relative(this._configuration.buildFolder, message.sourceFilePath)\r\n                : message.sourceFilePath;\r\n              logMessage =\r\n                `${filePathForLog}:${message.sourceFileLine}:${message.sourceFileColumn} - ` +\r\n                `(${message.category}) ${message.text}`;\r\n            } else {\r\n              logMessage = message.text;\r\n            }\r\n\r\n            this._scopedLogger.emitError(new Error(logMessage));\r\n            break;\r\n          }\r\n\r\n          case apiExtractor.ExtractorLogLevel.Warning: {\r\n            let logMessage: string;\r\n            if (message.sourceFilePath) {\r\n              const filePathForLog: string = Path.isUnderOrEqual(\r\n                message.sourceFilePath,\r\n                this._configuration.buildFolder\r\n              )\r\n                ? path.relative(this._configuration.buildFolder, message.sourceFilePath)\r\n                : message.sourceFilePath;\r\n              logMessage =\r\n                `${filePathForLog}:${message.sourceFileLine}:${message.sourceFileColumn} - ` +\r\n                `(${message.messageId}) ${message.text}`;\r\n            } else {\r\n              logMessage = message.text;\r\n            }\r\n\r\n            this._scopedLogger.emitWarning(new Error(logMessage));\r\n            break;\r\n          }\r\n\r\n          case apiExtractor.ExtractorLogLevel.Verbose: {\r\n            this._terminal.writeVerboseLine(message.text);\r\n            break;\r\n          }\r\n\r\n          case apiExtractor.ExtractorLogLevel.Info: {\r\n            this._terminal.writeLine(message.text);\r\n            break;\r\n          }\r\n\r\n          case apiExtractor.ExtractorLogLevel.None: {\r\n            // Ignore messages with ExtractorLogLevel.None\r\n            break;\r\n          }\r\n\r\n          default:\r\n            this._scopedLogger.emitError(\r\n              new Error(`Unexpected API Extractor log level: ${message.logLevel}`)\r\n            );\r\n        }\r\n\r\n        message.handled = true;\r\n      }\r\n    };\r\n\r\n    const apiExtractorResult: TApiExtractor.ExtractorResult = apiExtractor.Extractor.invoke(\r\n      extractorConfig,\r\n      extractorOptions\r\n    );\r\n\r\n    const { errorCount, warningCount } = apiExtractorResult;\r\n    if (errorCount > 0) {\r\n      this._terminal.writeErrorLine(\r\n        `API Extractor completed with ${errorCount} error${errorCount > 1 ? 's' : ''}`\r\n      );\r\n    } else if (warningCount > 0) {\r\n      this._terminal.writeWarningLine(\r\n        `API Extractor completed with ${warningCount} warning${warningCount > 1 ? 's' : ''}`\r\n      );\r\n    }\r\n\r\n    if (!apiExtractorResult.succeeded) {\r\n      throw new Error('API Extractor failed.');\r\n    }\r\n\r\n    if (apiExtractorResult.apiReportChanged && this._configuration.production) {\r\n      throw new Error('API Report changed.');\r\n    }\r\n  }\r\n}\r\n"]}