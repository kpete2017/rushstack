{"version":3,"file":"DeleteGlobsPlugin.js","sourceRoot":"","sources":["../../src/plugins/DeleteGlobsPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport glob from 'glob';\r\nimport { FileSystem, LegacyAdapters } from '@rushstack/node-core-library';\r\n\r\nimport { HeftEventPluginBase } from '../pluginFramework/HeftEventPluginBase';\r\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\r\nimport { HeftSession } from '../pluginFramework/HeftSession';\r\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\r\nimport {\r\n  IHeftEventActions,\r\n  HeftEvent,\r\n  IHeftConfigurationDeleteGlobsEventAction\r\n} from '../utilities/CoreConfigFiles';\r\nimport { ICleanStageProperties } from '../stages/CleanStage';\r\nimport { IBuildStageProperties } from '../stages/BuildStage';\r\nimport { Async } from '../utilities/Async';\r\nimport { Constants } from '../utilities/Constants';\r\n\r\nconst globEscape: (unescaped: string) => string = require('glob-escape'); // No @types/glob-escape package exists\r\n\r\nexport class DeleteGlobsPlugin extends HeftEventPluginBase<IHeftConfigurationDeleteGlobsEventAction> {\r\n  public readonly pluginName: string = 'DeleteGlobsPlugin';\r\n  protected eventActionName: keyof IHeftEventActions = 'deleteGlobs';\r\n  protected loggerName: string = 'delete-globs';\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  protected async handleCleanEventActionsAsync(\r\n    heftEvent: HeftEvent,\r\n    heftEventActions: IHeftConfigurationDeleteGlobsEventAction[],\r\n    logger: ScopedLogger,\r\n    heftSession: HeftSession,\r\n    heftConfiguration: HeftConfiguration,\r\n    properties: ICleanStageProperties\r\n  ): Promise<void> {\r\n    await this._runDeleteForHeftEventActions(\r\n      heftEventActions,\r\n      logger,\r\n      heftConfiguration,\r\n      properties.pathsToDelete\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  protected async handleBuildEventActionsAsync(\r\n    heftEvent: HeftEvent,\r\n    heftEventActions: IHeftConfigurationDeleteGlobsEventAction[],\r\n    logger: ScopedLogger,\r\n    heftSession: HeftSession,\r\n    heftConfiguration: HeftConfiguration,\r\n    properties: IBuildStageProperties\r\n  ): Promise<void> {\r\n    await this._runDeleteForHeftEventActions(heftEventActions, logger, heftConfiguration);\r\n  }\r\n\r\n  private async _runDeleteForHeftEventActions(\r\n    heftEventActions: IHeftConfigurationDeleteGlobsEventAction[],\r\n    logger: ScopedLogger,\r\n    heftConfiguration: HeftConfiguration,\r\n    additionalPathsToDelete?: Set<string>\r\n  ): Promise<void> {\r\n    let deletedFiles: number = 0;\r\n    let deletedFolders: number = 0;\r\n\r\n    const pathsToDelete: Set<string> = new Set<string>(additionalPathsToDelete);\r\n    for (const deleteGlobsEventAction of heftEventActions) {\r\n      for (const globPattern of deleteGlobsEventAction.globsToDelete) {\r\n        const resolvedPaths: string[] = await this._resolvePathAsync(\r\n          globPattern,\r\n          heftConfiguration.buildFolder\r\n        );\r\n        for (const resolvedPath of resolvedPaths) {\r\n          pathsToDelete.add(resolvedPath);\r\n        }\r\n      }\r\n    }\r\n\r\n    await Async.forEachLimitAsync(\r\n      Array.from(pathsToDelete),\r\n      Constants.maxParallelism,\r\n      async (pathToDelete) => {\r\n        try {\r\n          FileSystem.deleteFile(pathToDelete, { throwIfNotExists: true });\r\n          logger.terminal.writeVerboseLine(`Deleted \"${pathToDelete}\"`);\r\n          deletedFiles++;\r\n        } catch (error) {\r\n          if (FileSystem.exists(pathToDelete)) {\r\n            FileSystem.deleteFolder(pathToDelete);\r\n            logger.terminal.writeVerboseLine(`Deleted folder \"${pathToDelete}\"`);\r\n            deletedFolders++;\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    if (deletedFiles > 0 || deletedFolders > 0) {\r\n      logger.terminal.writeLine(\r\n        `Deleted ${deletedFiles} file${deletedFiles !== 1 ? 's' : ''} ` +\r\n          `and ${deletedFolders} folder${deletedFolders !== 1 ? 's' : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private async _resolvePathAsync(globPattern: string, buildFolder: string): Promise<string[]> {\r\n    if (globEscape(globPattern) !== globPattern) {\r\n      const expandedGlob: string[] = await LegacyAdapters.convertCallbackToPromise(glob, globPattern, {\r\n        cwd: buildFolder\r\n      });\r\n\r\n      const result: string[] = [];\r\n      for (const pathFromGlob of expandedGlob) {\r\n        result.push(path.resolve(buildFolder, pathFromGlob));\r\n      }\r\n\r\n      return result;\r\n    } else {\r\n      return [path.resolve(buildFolder, globPattern)];\r\n    }\r\n  }\r\n}\r\n"]}