{"version":3,"file":"SassTypingsPlugin.js","sourceRoot":"","sources":["../../../src/plugins/SassTypingsPlugin/SassTypingsPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAM3D,iEAAkF;AAClF,qEAAkE;AAElE,iDAA8C;AAI9C,MAAM,WAAW,GAAW,mBAAmB,CAAC;AAEhD,MAAa,iBAAiB;IAA9B;QACkB,eAAU,GAAW,WAAW,CAAC;IAwDnD,CAAC;IAtDC;;OAEG;IACI,KAAK,CAAC,WAAwB,EAAE,iBAAoC;QACzE,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,KAAyB,EAAE,EAAE;YACrE,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,UAA+B,EAAE,EAAE;gBAC1E,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;oBACtD,MAAM,IAAI,CAAC,6BAA6B,CACtC,WAAW,EACX,iBAAiB,EACjB,KAAK,CAAC,UAAU,CAAC,SAAS,CAC3B,CAAC;gBACJ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,6BAA6B,CACzC,WAAwB,EACxB,iBAAoC,EACpC,WAAoB;QAEpB,MAAM,MAAM,GAAiB,WAAW,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,CAAC;QACvF,MAAM,iBAAiB,GAAuB,MAAM,IAAI,CAAC,2BAA2B,CAClF,iBAAiB,EACjB,MAAM,CACP,CAAC;QACF,MAAM,oBAAoB,GAAyB,IAAI,2CAAoB,CAAC;YAC1E,WAAW,EAAE,iBAAiB,CAAC,WAAW;YAC1C,iBAAiB;SAClB,CAAC,CAAC;QAEH,MAAM,oBAAoB,CAAC,oBAAoB,EAAE,CAAC;QAClD,IAAI,WAAW,EAAE;YACf,aAAK,CAAC,2BAA2B,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,oBAAoB,CAAC,eAAe,EAAE,EAAE,MAAM,CAAC,CAAC;SACrG;IACH,CAAC;IAEO,KAAK,CAAC,2BAA2B,CACvC,iBAAoC,EACpC,MAAoB;QAEpB,MAAM,EAAE,WAAW,EAAE,GAAG,iBAAiB,CAAC;QAC1C,MAAM,qBAAqB,GACzB,MAAM,iCAAe,CAAC,2BAA2B,CAAC,uCAAuC,CACvF,MAAM,CAAC,QAAQ,EACf,WAAW,EACX,iBAAiB,CAAC,SAAS,CAC5B,CAAC;QAEJ,yBACK,qBAAqB,EACxB;IACJ,CAAC;CACF;AAzDD,8CAyDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IHeftPlugin } from '../../pluginFramework/IHeftPlugin';\r\nimport { HeftSession } from '../../pluginFramework/HeftSession';\r\nimport { HeftConfiguration } from '../../configuration/HeftConfiguration';\r\nimport { IBuildStageContext, IPreCompileSubstage } from '../../stages/BuildStage';\r\nimport { ISassConfiguration, SassTypingsGenerator } from './SassTypingsGenerator';\r\nimport { CoreConfigFiles } from '../../utilities/CoreConfigFiles';\r\nimport { ScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\r\nimport { Async } from '../../utilities/Async';\r\n\r\nexport interface ISassConfigurationJson extends ISassConfiguration {}\r\n\r\nconst PLUGIN_NAME: string = 'SassTypingsPlugin';\r\n\r\nexport class SassTypingsPlugin implements IHeftPlugin {\r\n  public readonly pluginName: string = PLUGIN_NAME;\r\n\r\n  /**\r\n   * Generate typings for Sass files before TypeScript compilation.\r\n   */\r\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\r\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\r\n      build.hooks.preCompile.tap(PLUGIN_NAME, (preCompile: IPreCompileSubstage) => {\r\n        preCompile.hooks.run.tapPromise(PLUGIN_NAME, async () => {\r\n          await this._runSassTypingsGeneratorAsync(\r\n            heftSession,\r\n            heftConfiguration,\r\n            build.properties.watchMode\r\n          );\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  private async _runSassTypingsGeneratorAsync(\r\n    heftSession: HeftSession,\r\n    heftConfiguration: HeftConfiguration,\r\n    isWatchMode: boolean\r\n  ): Promise<void> {\r\n    const logger: ScopedLogger = heftSession.requestScopedLogger('sass-typings-generator');\r\n    const sassConfiguration: ISassConfiguration = await this._loadSassConfigurationAsync(\r\n      heftConfiguration,\r\n      logger\r\n    );\r\n    const sassTypingsGenerator: SassTypingsGenerator = new SassTypingsGenerator({\r\n      buildFolder: heftConfiguration.buildFolder,\r\n      sassConfiguration\r\n    });\r\n\r\n    await sassTypingsGenerator.generateTypingsAsync();\r\n    if (isWatchMode) {\r\n      Async.runWatcherWithErrorHandling(async () => await sassTypingsGenerator.runWatcherAsync(), logger);\r\n    }\r\n  }\r\n\r\n  private async _loadSassConfigurationAsync(\r\n    heftConfiguration: HeftConfiguration,\r\n    logger: ScopedLogger\r\n  ): Promise<ISassConfiguration> {\r\n    const { buildFolder } = heftConfiguration;\r\n    const sassConfigurationJson: ISassConfigurationJson | undefined =\r\n      await CoreConfigFiles.sassConfigurationFileLoader.tryLoadConfigurationFileForProjectAsync(\r\n        logger.terminal,\r\n        buildFolder,\r\n        heftConfiguration.rigConfig\r\n      );\r\n\r\n    return {\r\n      ...sassConfigurationJson\r\n    };\r\n  }\r\n}\r\n"]}