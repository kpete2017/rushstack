{"version":3,"file":"SassTypingsGenerator.js","sourceRoot":"","sources":["../../../src/plugins/SassTypingsPlugin/SassTypingsGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { render, Result } from 'node-sass';\r\nimport postcss from 'postcss';\r\nimport cssModules from 'postcss-modules';\r\nimport { LegacyAdapters } from '@rushstack/node-core-library';\r\nimport { IStringValueTypings, StringValuesTypingsGenerator } from '@rushstack/typings-generator';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ISassConfiguration {\r\n  /**\r\n   * Source code root directory.\r\n   * Defaults to \"src/\".\r\n   */\r\n  srcFolder?: string;\r\n\r\n  /**\r\n   * Output directory for generated Sass typings.\r\n   * Defaults to \"temp/sass-ts/\".\r\n   */\r\n  generatedTsFolder?: string;\r\n\r\n  /**\r\n   * Determines if export values are wrapped in a default property, or not.\r\n   * Defaults to true.\r\n   */\r\n  exportAsDefault?: boolean;\r\n\r\n  /**\r\n   * Files with these extensions will pass through the Sass transpiler for typings generation.\r\n   * Defaults to [\".sass\", \".scss\", \".css\"]\r\n   */\r\n  fileExtensions?: string[];\r\n\r\n  /**\r\n   * A list of paths used when resolving Sass imports.\r\n   * The paths should be relative to the project root.\r\n   * Defaults to [\"node_modules\", \"src\"]\r\n   */\r\n  importIncludePaths?: string[];\r\n\r\n  /**\r\n   * A list of file paths relative to the \"src\" folder that should be excluded from typings generation.\r\n   */\r\n  excludeFiles?: string[];\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ISassTypingsGeneratorOptions {\r\n  buildFolder: string;\r\n  sassConfiguration: ISassConfiguration;\r\n}\r\n\r\ninterface IClassMap {\r\n  [className: string]: string;\r\n}\r\n\r\ninterface ICssModulesOptions {\r\n  getJSON(cssFileName: string, json: IClassMap): void;\r\n  generateScopeName(name: string): string;\r\n}\r\n\r\ntype TCssModules = (options: ICssModulesOptions) => TCssModules;\r\n\r\n/**\r\n * Generates type files (.d.ts) for Sass/SCSS/CSS files.\r\n *\r\n * @public\r\n */\r\nexport class SassTypingsGenerator extends StringValuesTypingsGenerator {\r\n  /**\r\n   * @param buildFolder - The project folder to search for Sass files and\r\n   *     generate typings.\r\n   */\r\n  public constructor(options: ISassTypingsGeneratorOptions) {\r\n    const { buildFolder, sassConfiguration } = options;\r\n    const srcFolder: string = sassConfiguration.srcFolder || path.join(buildFolder, 'src');\r\n    const generatedTsFolder: string =\r\n      sassConfiguration.generatedTsFolder || path.join(buildFolder, 'temp', 'sass-ts');\r\n    const exportAsDefault: boolean =\r\n      sassConfiguration.exportAsDefault === undefined ? true : sassConfiguration.exportAsDefault;\r\n    const exportAsDefaultInterfaceName: string = 'IExportStyles';\r\n    const fileExtensions: string[] = sassConfiguration.fileExtensions || ['.sass', '.scss', '.css'];\r\n    super({\r\n      srcFolder,\r\n      generatedTsFolder,\r\n      exportAsDefault,\r\n      exportAsDefaultInterfaceName,\r\n      fileExtensions,\r\n      filesToIgnore: sassConfiguration.excludeFiles,\r\n\r\n      // Generate typings function\r\n      parseAndGenerateTypings: async (fileContents: string, filePath: string) => {\r\n        if (this._isSassPartial(filePath)) {\r\n          // Do not generate typings for Sass partials.\r\n          return;\r\n        }\r\n        const css: string = await this._transpileSassAsync(\r\n          fileContents,\r\n          filePath,\r\n          buildFolder,\r\n          sassConfiguration.importIncludePaths\r\n        );\r\n        const classNames: string[] = await this._getClassNamesFromCSSAsync(css, filePath);\r\n        const sortedClassNames: string[] = classNames.sort((a, b) => a.localeCompare(b));\r\n        const sassTypings: IStringValueTypings = { typings: [] };\r\n        for (const exportName of sortedClassNames) {\r\n          sassTypings.typings.push({ exportName });\r\n        }\r\n\r\n        return sassTypings;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sass partial files are snippets of CSS meant to be included in other Sass files.\r\n   * Partial filenames always begin with a leading underscore and do not produce a CSS output file.\r\n   */\r\n  private _isSassPartial(filePath: string): boolean {\r\n    return path.basename(filePath)[0] === '_';\r\n  }\r\n\r\n  private async _transpileSassAsync(\r\n    fileContents: string,\r\n    filePath: string,\r\n    buildFolder: string,\r\n    importIncludePaths: string[] | undefined\r\n  ): Promise<string> {\r\n    const result: Result = await LegacyAdapters.convertCallbackToPromise(render, {\r\n      data: fileContents,\r\n      file: filePath,\r\n      importer: (url: string) => ({ file: this._patchSassUrl(url) }),\r\n      includePaths: importIncludePaths\r\n        ? importIncludePaths\r\n        : [path.join(buildFolder, 'node_modules'), path.join(buildFolder, 'src')],\r\n      indentedSyntax: path.extname(filePath).toLowerCase() === '.sass'\r\n    });\r\n\r\n    // Register any @import files as dependencies.\r\n    const target: string = result.stats.entry;\r\n    for (const dependency of result.stats.includedFiles) {\r\n      this.registerDependency(target, dependency);\r\n    }\r\n\r\n    return result.css.toString();\r\n  }\r\n\r\n  private _patchSassUrl(url: string): string {\r\n    if (url[0] === '~') {\r\n      return 'node_modules/' + url.substr(1);\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  private async _getClassNamesFromCSSAsync(css: string, filePath: string): Promise<string[]> {\r\n    let classMap: IClassMap = {};\r\n    const cssModulesClassMapPlugin: postcss.Plugin<TCssModules> = cssModules({\r\n      getJSON: (cssFileName: string, json: IClassMap) => {\r\n        classMap = json;\r\n      },\r\n      // Avoid unnecessary name hashing.\r\n      generateScopedName: (name: string) => name\r\n    });\r\n    await postcss([cssModulesClassMapPlugin]).process(css, { from: filePath });\r\n    const classNames: string[] = Object.keys(classMap);\r\n\r\n    return classNames;\r\n  }\r\n}\r\n"]}