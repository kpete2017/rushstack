{"version":3,"file":"ProjectValidatorPlugin.js","sourceRoot":"","sources":["../../src/plugins/ProjectValidatorPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fs from 'fs';\r\nimport { FileSystem, LegacyAdapters, Path } from '@rushstack/node-core-library';\r\n\r\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\r\nimport { Constants } from '../utilities/Constants';\r\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\r\nimport { IHeftPlugin } from '../pluginFramework/IHeftPlugin';\r\nimport { HeftSession } from '../pluginFramework/HeftSession';\r\nimport { IHeftLifecycle } from '../pluginFramework/HeftLifecycle';\r\nimport { Hook } from 'tapable';\r\nimport { ITestStageContext } from '../stages/TestStage';\r\nimport { IBuildStageContext, IBundleSubstage } from '../stages/BuildStage';\r\n\r\nconst ALLOWED_HEFT_DATA_FOLDER_FILES: Set<string> = new Set<string>();\r\nconst ALLOWED_HEFT_DATA_FOLDER_SUBFOLDERS: Set<string> = new Set<string>([Constants.buildCacheFolderName]);\r\n\r\nconst PLUGIN_NAME: string = 'ProjectValidatorPlugin';\r\n\r\n/**\r\n * This plugin is a place to do generic project-level validation. For example, ensuring that only expected\r\n * files are in the \".heft\" folder (i.e. - legacy config files aren't still there)\r\n */\r\nexport class ProjectValidatorPlugin implements IHeftPlugin {\r\n  public readonly pluginName: string = PLUGIN_NAME;\r\n\r\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\r\n    const logger: ScopedLogger = heftSession.requestScopedLogger('project-validation');\r\n\r\n    heftSession.hooks.heftLifecycle.tap(PLUGIN_NAME, (heftLifecycle: IHeftLifecycle) => {\r\n      heftLifecycle.hooks.toolStart.tapPromise(PLUGIN_NAME, async () => {\r\n        await this._scanHeftDataFolderAsync(logger, heftConfiguration);\r\n      });\r\n    });\r\n\r\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\r\n      build.hooks.bundle.tap(PLUGIN_NAME, (bundle: IBundleSubstage) => {\r\n        bundle.hooks.run.tapPromise(PLUGIN_NAME, async () => {\r\n          const missingPluginCandidatePackageNames: string[] = [\r\n            '@rushstack/heft-webpack4-plugin',\r\n            '@rushstack/heft-webpack5-plugin'\r\n          ];\r\n          const missingPluginDocumentationUrl: string = 'https://rushstack.io/pages/heft_tasks/webpack/';\r\n          const missingPlugin: boolean = await this._checkPluginIsMissingAsync(\r\n            'WebpackPlugin',\r\n            Path.convertToSlashes(`${heftConfiguration.buildFolder}/webpack.config.js`),\r\n            missingPluginCandidatePackageNames,\r\n            missingPluginDocumentationUrl,\r\n            bundle.hooks.run,\r\n            logger\r\n          );\r\n          if (missingPlugin && !!bundle.properties.webpackConfiguration) {\r\n            logger.emitWarning(\r\n              new Error(\r\n                'Your project appears to have a Webpack configuration generated by a plugin, ' +\r\n                  'but the associated Heft plugin is not enabled. To fix this, you can add ' +\r\n                  `${missingPluginCandidatePackageNames\r\n                    .map((packageName) => `\"${packageName}\"`)\r\n                    .join(' or ')} ` +\r\n                  'to your package.json \"devDependencies\" and use \"config/heft.json\" to load it. For details, ' +\r\n                  `see Heft's UPGRADING.md notes and this article: ${missingPluginDocumentationUrl}`\r\n              )\r\n            );\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    heftSession.hooks.test.tap(PLUGIN_NAME, (test: ITestStageContext) => {\r\n      test.hooks.run.tapPromise(PLUGIN_NAME, async () => {\r\n        await this._checkPluginIsMissingAsync(\r\n          'JestPlugin',\r\n          Path.convertToSlashes(`${heftConfiguration.buildFolder}/config/jest.config.json`),\r\n          ['@rushstack/heft-jest-plugin'],\r\n          'https://rushstack.io/pages/heft_tasks/jest/',\r\n          test.hooks.run,\r\n          logger\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  private async _scanHeftDataFolderAsync(\r\n    logger: ScopedLogger,\r\n    heftConfiguration: HeftConfiguration\r\n  ): Promise<void> {\r\n    // TODO: Replace this with a FileSystem API\r\n    let heftDataFolderContents: fs.Dirent[];\r\n    try {\r\n      // Use this instead of fs.promises to avoid a warning in older versions of Node\r\n      heftDataFolderContents = await LegacyAdapters.convertCallbackToPromise(\r\n        fs.readdir,\r\n        heftConfiguration.projectHeftDataFolder,\r\n        {\r\n          withFileTypes: true\r\n        }\r\n      );\r\n    } catch (e) {\r\n      if (!FileSystem.isNotExistError(e)) {\r\n        throw e;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const disallowedItemNames: string[] = [];\r\n    for (const folderItem of heftDataFolderContents) {\r\n      const itemName: string = folderItem.name;\r\n      if (folderItem.isDirectory()) {\r\n        if (!ALLOWED_HEFT_DATA_FOLDER_SUBFOLDERS.has(itemName)) {\r\n          disallowedItemNames.push(`\"${itemName}/\"`);\r\n        }\r\n      } else {\r\n        if (!ALLOWED_HEFT_DATA_FOLDER_FILES.has(itemName)) {\r\n          disallowedItemNames.push(`\"${itemName}\"`);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (disallowedItemNames.length > 0) {\r\n      logger.emitWarning(\r\n        new Error(\r\n          `Found unexpected items in the \"${Constants.projectHeftFolderName}\" ` +\r\n            `folder: ${disallowedItemNames.join(', ')}. If any of these are config files, they ` +\r\n            `should go in the project's \"${Constants.projectConfigFolderName}\" folder.`\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A utility method to use as the tap function to the provided hook. Determines if the\r\n   * requested plugin is installed and warns otherwise if related configuration files were\r\n   * found. Returns false if the plugin was found, otherwise true.\r\n   */\r\n  private async _checkPluginIsMissingAsync(\r\n    missingPluginName: string,\r\n    configFilePath: string,\r\n    missingPluginCandidatePackageNames: string[],\r\n    missingPluginDocumentationUrl: string,\r\n    hookToTap: Hook<unknown, unknown, unknown, unknown, unknown>,\r\n    logger: ScopedLogger\r\n  ): Promise<boolean> {\r\n    // If we have the plugin, we don't need to check anything else\r\n    for (const tap of hookToTap.taps) {\r\n      if (tap.name === missingPluginName) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Warn if any were found\r\n    if (await FileSystem.existsAsync(configFilePath)) {\r\n      logger.emitWarning(\r\n        new Error(\r\n          `The configuration file \"${configFilePath}\" exists in your project, but the associated Heft plugin ` +\r\n            'is not enabled. To fix this, you can add ' +\r\n            `${missingPluginCandidatePackageNames.map((packageName) => `\"${packageName}\"`).join(' or ')} ` +\r\n            'to your package.json \"devDependencies\" and use \"config/heft.json\" to load it. For details, ' +\r\n            `see Heft's UPGRADING.md notes and this article: ${missingPluginDocumentationUrl}`\r\n        )\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n"]}