{"version":3,"file":"TypeScriptPlugin.js","sourceRoot":"","sources":["../../../src/plugins/TypeScriptPlugin/TypeScriptPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Terminal, FileSystem } from '@rushstack/node-core-library';\r\n\r\nimport { TypeScriptBuilder, ITypeScriptBuilderConfiguration } from './TypeScriptBuilder';\r\nimport { HeftSession } from '../../pluginFramework/HeftSession';\r\nimport { HeftConfiguration } from '../../configuration/HeftConfiguration';\r\nimport { IHeftPlugin } from '../../pluginFramework/IHeftPlugin';\r\nimport {\r\n  CopyFromCacheMode,\r\n  IBuildStageContext,\r\n  ICompileSubstage,\r\n  IBuildStageProperties\r\n} from '../../stages/BuildStage';\r\nimport { ToolPackageResolver, IToolPackageResolution } from '../../utilities/ToolPackageResolver';\r\nimport { ScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\r\nimport { ICleanStageContext, ICleanStageProperties } from '../../stages/CleanStage';\r\nimport { CoreConfigFiles, ISharedCopyConfiguration } from '../../utilities/CoreConfigFiles';\r\n\r\nconst PLUGIN_NAME: string = 'typescript';\r\n\r\ninterface IRunTypeScriptOptions {\r\n  heftSession: HeftSession;\r\n  heftConfiguration: HeftConfiguration;\r\n  buildProperties: IBuildStageProperties;\r\n  watchMode: boolean;\r\n\r\n  /**\r\n   * Fired whenever the compiler emits an output.  In watch mode, this event occurs after each recompile.\r\n   */\r\n  emitCallback: () => void;\r\n}\r\n\r\ninterface IEmitModuleKind {\r\n  moduleKind: 'commonjs' | 'amd' | 'umd' | 'system' | 'es2015' | 'esnext';\r\n  outFolderName: string;\r\n  jsExtensionOverride?: string;\r\n}\r\n\r\nexport interface ISharedTypeScriptConfiguration {\r\n  /**\r\n   * Can be set to 'copy' or 'hardlink'. If set to 'copy', copy files from cache. If set to 'hardlink', files will be\r\n   * hardlinked to the cache location. This option is useful when producing a tarball of build output as TAR files\r\n   * don't handle these hardlinks correctly. 'hardlink' is the default behavior.\r\n   */\r\n  copyFromCacheMode?: CopyFromCacheMode | undefined;\r\n\r\n  /**\r\n   * If provided, emit these module kinds in addition to the modules specified in the tsconfig.\r\n   * Note that this option only applies to the main tsconfig.json configuration.\r\n   */\r\n  additionalModuleKindsToEmit?: IEmitModuleKind[] | undefined;\r\n\r\n  /**\r\n   * If 'true', emit CommonJS output into the TSConfig outDir with the file extension '.cjs'\r\n   */\r\n  emitCjsExtensionForCommonJS?: boolean | undefined;\r\n\r\n  /**\r\n   * If 'true', emit ESModule output into the TSConfig outDir with the file extension '.mjs'\r\n   */\r\n  emitMjsExtensionForESModule?: boolean | undefined;\r\n\r\n  /**\r\n   * Specifies the intermediary folder that tests will use.  Because Jest uses the\r\n   * Node.js runtime to execute tests, the module format must be CommonJS.\r\n   *\r\n   * The default value is \"lib\".\r\n   */\r\n  emitFolderNameForTests?: string;\r\n\r\n  /**\r\n   * Configures additional file types that should be copied into the TypeScript compiler's emit folders, for example\r\n   * so that these files can be resolved by import statements.\r\n   */\r\n  staticAssetsToCopy?: ISharedCopyConfiguration;\r\n}\r\n\r\nexport interface ITypeScriptConfigurationJson extends ISharedTypeScriptConfiguration {\r\n  disableTslint?: boolean;\r\n  maxWriteParallelism: number | undefined;\r\n}\r\n\r\ninterface ITypeScriptConfiguration extends ISharedTypeScriptConfiguration {\r\n  /**\r\n   * Set this to change the maximum number of file handles that will be opened concurrently for writing.\r\n   * The default is 50.\r\n   */\r\n  maxWriteParallelism: number;\r\n\r\n  isLintingEnabled: boolean | undefined;\r\n}\r\n\r\ninterface ITypeScriptConfigurationFileCacheEntry {\r\n  configurationFile: ITypeScriptConfigurationJson | undefined;\r\n}\r\n\r\nexport class TypeScriptPlugin implements IHeftPlugin {\r\n  public readonly pluginName: string = PLUGIN_NAME;\r\n\r\n  private readonly _taskPackageResolver: ToolPackageResolver;\r\n  private _typeScriptConfigurationFileCache: Map<string, ITypeScriptConfigurationFileCacheEntry> = new Map<\r\n    string,\r\n    ITypeScriptConfigurationFileCacheEntry\r\n  >();\r\n\r\n  public constructor(taskPackageResolver: ToolPackageResolver) {\r\n    this._taskPackageResolver = taskPackageResolver;\r\n  }\r\n\r\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\r\n    const logger: ScopedLogger = heftSession.requestScopedLogger('TypeScript Plugin');\r\n\r\n    heftSession.hooks.clean.tap(PLUGIN_NAME, (clean: ICleanStageContext) => {\r\n      clean.hooks.loadStageConfiguration.tapPromise(PLUGIN_NAME, async () => {\r\n        await this._updateCleanOptions(logger, heftConfiguration, clean.properties);\r\n      });\r\n    });\r\n\r\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\r\n      build.hooks.compile.tap(PLUGIN_NAME, (compile: ICompileSubstage) => {\r\n        compile.hooks.run.tapPromise(PLUGIN_NAME, async () => {\r\n          await new Promise<void>((resolve: () => void, reject: (error: Error) => void) => {\r\n            let isFirstEmit: boolean = true;\r\n            this._runTypeScriptAsync(logger, {\r\n              heftSession,\r\n              heftConfiguration,\r\n              buildProperties: build.properties,\r\n              watchMode: build.properties.watchMode,\r\n              emitCallback: () => {\r\n                if (isFirstEmit) {\r\n                  isFirstEmit = false;\r\n\r\n                  // In watch mode, `_runTypeScriptAsync` will never resolve so we need to resolve the promise here\r\n                  // to allow the build to move on to the `afterCompile` substage.\r\n                  if (build.properties.watchMode) {\r\n                    resolve();\r\n                  }\r\n                } else {\r\n                  compile.hooks.afterRecompile.promise().catch((error) => {\r\n                    heftConfiguration.globalTerminal.writeErrorLine(\r\n                      `An error occurred in an afterRecompile hook: ${error}`\r\n                    );\r\n                  });\r\n                }\r\n              }\r\n            })\r\n              .then(resolve)\r\n              .catch(reject);\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  private async _ensureConfigFileLoadedAsync(\r\n    terminal: Terminal,\r\n    heftConfiguration: HeftConfiguration\r\n  ): Promise<ITypeScriptConfigurationJson | undefined> {\r\n    const buildFolder: string = heftConfiguration.buildFolder;\r\n    let typescriptConfigurationFileCacheEntry: ITypeScriptConfigurationFileCacheEntry | undefined =\r\n      this._typeScriptConfigurationFileCache.get(buildFolder);\r\n\r\n    if (!typescriptConfigurationFileCacheEntry) {\r\n      typescriptConfigurationFileCacheEntry = {\r\n        configurationFile:\r\n          await CoreConfigFiles.typeScriptConfigurationFileLoader.tryLoadConfigurationFileForProjectAsync(\r\n            terminal,\r\n            buildFolder,\r\n            heftConfiguration.rigConfig\r\n          )\r\n      };\r\n\r\n      this._typeScriptConfigurationFileCache.set(buildFolder, typescriptConfigurationFileCacheEntry);\r\n    }\r\n\r\n    return typescriptConfigurationFileCacheEntry.configurationFile;\r\n  }\r\n\r\n  private async _updateCleanOptions(\r\n    logger: ScopedLogger,\r\n    heftConfiguration: HeftConfiguration,\r\n    cleanProperties: ICleanStageProperties\r\n  ): Promise<void> {\r\n    const configurationFile: ITypeScriptConfigurationJson | undefined =\r\n      await this._ensureConfigFileLoadedAsync(logger.terminal, heftConfiguration);\r\n\r\n    if (configurationFile?.additionalModuleKindsToEmit) {\r\n      for (const additionalModuleKindToEmit of configurationFile.additionalModuleKindsToEmit) {\r\n        cleanProperties.pathsToDelete.add(\r\n          path.resolve(heftConfiguration.buildFolder, additionalModuleKindToEmit.outFolderName)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private async _runTypeScriptAsync(logger: ScopedLogger, options: IRunTypeScriptOptions): Promise<void> {\r\n    const { heftSession, heftConfiguration, buildProperties, watchMode } = options;\r\n\r\n    const typescriptConfigurationJson: ITypeScriptConfigurationJson | undefined =\r\n      await this._ensureConfigFileLoadedAsync(logger.terminal, heftConfiguration);\r\n\r\n    const tsconfigFilePath: string = `${heftConfiguration.buildFolder}/tsconfig.json`;\r\n    buildProperties.isTypeScriptProject = await FileSystem.existsAsync(tsconfigFilePath);\r\n    if (!buildProperties.isTypeScriptProject) {\r\n      // If there are no TSConfig, we have nothing to do\r\n      return;\r\n    }\r\n\r\n    const typeScriptConfiguration: ITypeScriptConfiguration = {\r\n      copyFromCacheMode: typescriptConfigurationJson?.copyFromCacheMode,\r\n      additionalModuleKindsToEmit: typescriptConfigurationJson?.additionalModuleKindsToEmit,\r\n      emitCjsExtensionForCommonJS: typescriptConfigurationJson?.emitCjsExtensionForCommonJS,\r\n      emitMjsExtensionForESModule: typescriptConfigurationJson?.emitMjsExtensionForESModule,\r\n      emitFolderNameForTests: typescriptConfigurationJson?.emitFolderNameForTests,\r\n      maxWriteParallelism: typescriptConfigurationJson?.maxWriteParallelism || 50,\r\n      isLintingEnabled: !(buildProperties.lite || typescriptConfigurationJson?.disableTslint)\r\n    };\r\n\r\n    if (heftConfiguration.projectPackageJson.private !== true) {\r\n      if (typeScriptConfiguration.copyFromCacheMode === undefined) {\r\n        logger.terminal.writeVerboseLine(\r\n          'Setting TypeScript copyFromCacheMode to \"copy\" because the \"private\" field ' +\r\n            'in package.json is not set to true. Linked files are not handled correctly ' +\r\n            'when package are packed for publishing.'\r\n        );\r\n        // Copy if the package is intended to be published\r\n        typeScriptConfiguration.copyFromCacheMode = 'copy';\r\n      } else if (typeScriptConfiguration.copyFromCacheMode !== 'copy') {\r\n        logger.emitWarning(\r\n          new Error(\r\n            `The TypeScript copyFromCacheMode is set to \"${typeScriptConfiguration.copyFromCacheMode}\", ` +\r\n              'but the the \"private\" field in package.json is not set to true. ' +\r\n              'Linked files are not handled correctly when packages are packed for publishing.'\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    const toolPackageResolution: IToolPackageResolution =\r\n      await this._taskPackageResolver.resolveToolPackagesAsync(heftConfiguration, logger.terminal);\r\n    if (!toolPackageResolution.typeScriptPackagePath) {\r\n      throw new Error('Unable to resolve a TypeScript compiler package');\r\n    }\r\n\r\n    // Set some properties used by the Jest plugin\r\n    buildProperties.emitFolderNameForTests = typeScriptConfiguration.emitFolderNameForTests || 'lib';\r\n    buildProperties.emitExtensionForTests = typeScriptConfiguration.emitCjsExtensionForCommonJS\r\n      ? '.cjs'\r\n      : '.js';\r\n\r\n    const typeScriptBuilderConfiguration: ITypeScriptBuilderConfiguration = {\r\n      buildFolder: heftConfiguration.buildFolder,\r\n      typeScriptToolPath: toolPackageResolution.typeScriptPackagePath!,\r\n      tslintToolPath: toolPackageResolution.tslintPackagePath,\r\n      eslintToolPath: toolPackageResolution.eslintPackagePath,\r\n\r\n      tsconfigPath: tsconfigFilePath,\r\n      lintingEnabled: !!typeScriptConfiguration.isLintingEnabled,\r\n      buildCacheFolder: heftConfiguration.buildCacheFolder,\r\n      additionalModuleKindsToEmit: typeScriptConfiguration.additionalModuleKindsToEmit,\r\n      emitCjsExtensionForCommonJS: !!typeScriptConfiguration.emitCjsExtensionForCommonJS,\r\n      emitMjsExtensionForESModule: !!typeScriptConfiguration.emitMjsExtensionForESModule,\r\n      copyFromCacheMode: typeScriptConfiguration.copyFromCacheMode,\r\n      watchMode: watchMode,\r\n      maxWriteParallelism: typeScriptConfiguration.maxWriteParallelism\r\n    };\r\n    const typeScriptBuilder: TypeScriptBuilder = new TypeScriptBuilder(\r\n      heftConfiguration.terminalProvider,\r\n      typeScriptBuilderConfiguration,\r\n      heftSession,\r\n      options.emitCallback\r\n    );\r\n\r\n    if (heftSession.debugMode) {\r\n      await typeScriptBuilder.invokeAsync();\r\n    } else {\r\n      await typeScriptBuilder.invokeAsSubprocessAsync();\r\n    }\r\n  }\r\n}\r\n"]}