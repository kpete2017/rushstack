{"version":3,"file":"Eslint.js","sourceRoot":"","sources":["../../../src/plugins/TypeScriptPlugin/Eslint.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,+CAAiC;AACjC,+CAAiC;AAGjC,6CAAuE;AAEvE,uEAAoE;AAgBpE,MAAa,MAAO,SAAQ,uBAAqC;IAU/D,YAAmB,OAAuB;QACxC,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QARV,mBAAc,GAAwB,IAAI,GAAG,EAAkB,CAAC;QAU/E,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,mEAAmE;QAEhH,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACpD,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAC3D,CAAC;IAEM,kBAAkB;QACvB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,wBAAwB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;QAEvF,MAAM,YAAY,GAAW,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC9E,IAAI,YAAY,GAAG,CAAC,EAAE;YACpB,MAAM,IAAI,KAAK,CACb,qEAAqE,GAAG,IAAI,CAAC,kBAAkB,CAChG,CAAC;SACH;QACD,IAAI,YAAY,GAAG,CAAC,EAAE;YACpB,+FAA+F;YAC/F,oEAAoE;YACpE,IAAI,CAAC,SAAS,CAAC,SAAS,CACtB,2GAA2G,CAC5G,CAAC;YACF,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;SACnD;IACH,CAAC;IAEM,cAAc;QACnB,IAAI,kBAAkB,GAAW,CAAC,CAAC;QACnC,MAAM,MAAM,GAAY,EAAE,CAAC;QAC3B,MAAM,QAAQ,GAAY,EAAE,CAAC;QAE7B,KAAK,MAAM,gBAAgB,IAAI,IAAI,CAAC,WAAW,EAAE;YAC/C,MAAM,2BAA2B,GAAW,IAAI,CAAC,QAAQ,CACvD,IAAI,CAAC,gBAAgB,EACrB,gBAAgB,CAAC,QAAQ,CAC1B,CAAC;YACF,KAAK,MAAM,OAAO,IAAI,gBAAgB,CAAC,QAAQ,EAAE;gBAC/C,kBAAkB,EAAE,CAAC;gBACrB,wEAAwE;gBACxE,MAAM,gBAAgB,GAAW,OAAO,CAAC,MAAM;oBAC7C,CAAC,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,OAAO,EAAE;oBAC1C,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;gBACpB,MAAM,WAAW,GAAc,IAAI,qBAAS,CAC1C,gBAAgB,EAChB,2BAA2B,EAC3B,OAAO,CAAC,IAAI,EACZ,OAAO,CAAC,MAAM,CACf,CAAC;gBACF,QAAQ,OAAO,CAAC,QAAQ,EAAE;oBACxB,kBAAgC,CAAC,CAAC;wBAChC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBACzB,MAAM;qBACP;oBAED,oBAAkC,CAAC,CAAC;wBAClC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAC3B,MAAM;qBACP;iBACF;aACF;SACF;QAED,IAAI,kBAAkB,GAAG,CAAC,EAAE;YAC1B,IAAI,CAAC,SAAS,CAAC,SAAS,CACtB,eAAe,kBAAkB,gBAAgB,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CACtF,CAAC;SACH;QAED,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SACrC;QAED,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SACzC;IACH,CAAC;IAED,IAAc,YAAY;QACxB,MAAM,gBAAgB,GAAgB,MAAM;aACzC,UAAU,CAAC,MAAM,CAAC;aAClB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;QACzD,MAAM,mBAAmB,GAAW,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,IAAI,gBAAgB,CAAC,MAAM,CAClG,KAAK,CACN,EAAE,CAAC;QAEJ,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAES,KAAK,CAAC,eAAe;QAC7B,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;YAC5C,GAAG,EAAE,IAAI,CAAC,gBAAgB;YAC1B,kBAAkB,EAAE,IAAI,CAAC,qBAAqB;SAC/C,CAAC,CAAC;QAEH,IAAI,CAAC,wBAAwB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAEtG,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;YAClD,GAAG,EAAE,IAAI,CAAC,gBAAgB;YAC1B,UAAU,EAAE,IAAI,CAAC,qBAAqB;SACvC,CAAC,CAAC;IACL,CAAC;IAES,QAAQ,CAAC,UAA+B;QAChD,MAAM,WAAW,GAAgC,IAAI,CAAC,UAAU,CAAC,aAAa,CAC5E,UAAU,CAAC,IAAI,EACf,UAAU,CAAC,QAAQ,CACpB,CAAC,OAAO,CAAC;QACV,MAAM,QAAQ,GAAgC,EAAE,CAAC;QACjD,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;YACpC,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAC3B;SACF;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAES,eAAe,CAAC,YAAyC;QACjE,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;QAEhC,IAAI,gBAAgB,GAAW,CAAC,CAAC;QACjC,KAAK,MAAM,CAAC,QAAQ,EAAE,eAAe,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,EAAE;YACvE,MAAM,MAAM,GAAY,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YACxD,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,EAAE;gBACvB,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,QAAQ,eAAe,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC;aACtF;iBAAM;gBACL,gBAAgB,EAAE,CAAC;aACpB;SACF;QAED,IAAI,gBAAgB,GAAG,CAAC,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,GAAG,gBAAgB,iBAAiB,CAAC,CAAC;SACvE;IACH,CAAC;IAES,KAAK,CAAC,mBAAmB,CAAC,QAAgB;QAClD,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAEO,WAAW,CAAC,iBAAyB;QAC3C,MAAM,MAAM,GAAkB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC/F,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,MAAM,CAAC,IAAI,GAAG,CAAC,GAAW,EAAE,EAAgC,EAAE,EAAE;YAC9D,MAAM,UAAU,GAAW,SAAS,GAAG,EAAE,CAAC;YAC1C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YACzC,OAAO,CAAC,GAAG,IAAe,EAAE,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACzF,CAAC,CAAC;IACJ,CAAC;CACF;AAhKD,wBAgKC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as crypto from 'crypto';\r\nimport * as semver from 'semver';\r\nimport * as TEslint from 'eslint';\r\n\r\nimport { LinterBase, ILinterBaseOptions, ITiming } from './LinterBase';\r\nimport { IExtendedSourceFile } from './internalTypings/TypeScriptInternals';\r\nimport { FileError } from '../../pluginFramework/logging/FileError';\r\n\r\ninterface IEslintOptions extends ILinterBaseOptions {\r\n  eslintPackagePath: string;\r\n}\r\n\r\ninterface IEslintTiming {\r\n  enabled: boolean;\r\n  time: (key: string, fn: (...args: unknown[]) => void) => (...args: unknown[]) => void;\r\n}\r\n\r\nconst enum EslintMessageSeverity {\r\n  warning = 1,\r\n  error = 2\r\n}\r\n\r\nexport class Eslint extends LinterBase<TEslint.ESLint.LintResult> {\r\n  private readonly _eslintPackagePath: string;\r\n  private readonly _eslintPackage: typeof TEslint;\r\n  private readonly _eslintTimings: Map<string, string> = new Map<string, string>();\r\n\r\n  private _eslintCli!: TEslint.CLIEngine;\r\n  private _eslint!: TEslint.ESLint;\r\n  private _eslintBaseConfiguration: any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n  private _lintResult!: TEslint.ESLint.LintResult[];\r\n\r\n  public constructor(options: IEslintOptions) {\r\n    super('eslint', options);\r\n\r\n    this._patchTimer(options.eslintPackagePath); // This must happen before the rest of the linter package is loaded\r\n\r\n    this._eslintPackagePath = options.eslintPackagePath;\r\n    this._eslintPackage = require(options.eslintPackagePath);\r\n  }\r\n\r\n  public printVersionHeader(): void {\r\n    this._terminal.writeLine(`Using ESLint version ${this._eslintPackage.Linter.version}`);\r\n\r\n    const majorVersion: number = semver.major(this._eslintPackage.Linter.version);\r\n    if (majorVersion < 7) {\r\n      throw new Error(\r\n        'Heft requires ESLint 7 or newer.  Your ESLint version is too old:\\n' + this._eslintPackagePath\r\n      );\r\n    }\r\n    if (majorVersion > 7) {\r\n      // We don't use writeWarningLine() here because, if the person wants to take their chances with\r\n      // a newer ESLint release, their build should be allowed to succeed.\r\n      this._terminal.writeLine(\r\n        'The ESLint version is newer than the latest version that was tested with Heft; it may not work correctly:'\r\n      );\r\n      this._terminal.writeLine(this._eslintPackagePath);\r\n    }\r\n  }\r\n\r\n  public reportFailures(): void {\r\n    let eslintFailureCount: number = 0;\r\n    const errors: Error[] = [];\r\n    const warnings: Error[] = [];\r\n\r\n    for (const eslintFileResult of this._lintResult) {\r\n      const buildFolderRelativeFilePath: string = path.relative(\r\n        this._buildFolderPath,\r\n        eslintFileResult.filePath\r\n      );\r\n      for (const message of eslintFileResult.messages) {\r\n        eslintFailureCount++;\r\n        // https://eslint.org/docs/developer-guide/nodejs-api#â—†-lintmessage-type\r\n        const formattedMessage: string = message.ruleId\r\n          ? `(${message.ruleId}) ${message.message}`\r\n          : message.message;\r\n        const errorObject: FileError = new FileError(\r\n          formattedMessage,\r\n          buildFolderRelativeFilePath,\r\n          message.line,\r\n          message.column\r\n        );\r\n        switch (message.severity) {\r\n          case EslintMessageSeverity.error: {\r\n            errors.push(errorObject);\r\n            break;\r\n          }\r\n\r\n          case EslintMessageSeverity.warning: {\r\n            warnings.push(errorObject);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (eslintFailureCount > 0) {\r\n      this._terminal.writeLine(\r\n        `Encountered ${eslintFailureCount} ESLint issue${eslintFailureCount > 1 ? 's' : ''}:`\r\n      );\r\n    }\r\n\r\n    for (const error of errors) {\r\n      this._scopedLogger.emitError(error);\r\n    }\r\n\r\n    for (const warning of warnings) {\r\n      this._scopedLogger.emitWarning(warning);\r\n    }\r\n  }\r\n\r\n  protected get cacheVersion(): string {\r\n    const eslintConfigHash: crypto.Hash = crypto\r\n      .createHash('sha1')\r\n      .update(JSON.stringify(this._eslintBaseConfiguration));\r\n    const eslintConfigVersion: string = `${this._eslintPackage.Linter.version}_${eslintConfigHash.digest(\r\n      'hex'\r\n    )}`;\r\n\r\n    return eslintConfigVersion;\r\n  }\r\n\r\n  protected async initializeAsync(): Promise<void> {\r\n    this._eslint = new this._eslintPackage.ESLint({\r\n      cwd: this._buildFolderPath,\r\n      overrideConfigFile: this._linterConfigFilePath\r\n    });\r\n\r\n    this._eslintBaseConfiguration = await this._eslint.calculateConfigForFile(this._linterConfigFilePath);\r\n\r\n    this._eslintCli = new this._eslintPackage.CLIEngine({\r\n      cwd: this._buildFolderPath,\r\n      configFile: this._linterConfigFilePath\r\n    });\r\n  }\r\n\r\n  protected lintFile(sourceFile: IExtendedSourceFile): TEslint.ESLint.LintResult[] {\r\n    const lintResults: TEslint.ESLint.LintResult[] = this._eslintCli.executeOnText(\r\n      sourceFile.text,\r\n      sourceFile.fileName\r\n    ).results;\r\n    const failures: TEslint.ESLint.LintResult[] = [];\r\n    for (const lintResult of lintResults) {\r\n      if (lintResult.messages.length > 0) {\r\n        failures.push(lintResult);\r\n      }\r\n    }\r\n\r\n    return failures;\r\n  }\r\n\r\n  protected lintingFinished(lintFailures: TEslint.ESLint.LintResult[]): void {\r\n    this._lintResult = lintFailures;\r\n\r\n    let omittedRuleCount: number = 0;\r\n    for (const [ruleName, measurementName] of this._eslintTimings.entries()) {\r\n      const timing: ITiming = this.getTiming(measurementName);\r\n      if (timing.duration > 0) {\r\n        this._terminal.writeVerboseLine(`Rule \"${ruleName}\" duration: ${timing.duration}ms`);\r\n      } else {\r\n        omittedRuleCount++;\r\n      }\r\n    }\r\n\r\n    if (omittedRuleCount > 0) {\r\n      this._terminal.writeVerboseLine(`${omittedRuleCount} rules took 0ms`);\r\n    }\r\n  }\r\n\r\n  protected async isFileExcludedAsync(filePath: string): Promise<boolean> {\r\n    return await this._eslint.isPathIgnored(filePath);\r\n  }\r\n\r\n  private _patchTimer(eslintPackagePath: string): void {\r\n    const timing: IEslintTiming = require(path.join(eslintPackagePath, 'lib', 'linter', 'timing'));\r\n    timing.enabled = true;\r\n    timing.time = (key: string, fn: (...args: unknown[]) => void) => {\r\n      const timingName: string = `Eslint${key}`;\r\n      this._eslintTimings.set(key, timingName);\r\n      return (...args: unknown[]) => this._measurePerformance(timingName, () => fn(...args));\r\n    };\r\n  }\r\n}\r\n"]}