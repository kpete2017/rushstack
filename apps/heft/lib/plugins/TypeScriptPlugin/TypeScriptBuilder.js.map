{"version":3,"file":"TypeScriptBuilder.js","sourceRoot":"","sources":["../../../src/plugins/TypeScriptPlugin/TypeScriptBuilder.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,+CAAiC;AACjC,oEAWsC;AAUtC,0FAAuF;AACvF,iDAA8C;AAE9C,qCAAkC;AAClC,qCAAkC;AAElC,uEAAoE;AAEpE,qDAAyE;AAEzE,iFAA8E;AAE9E,sGAAmG;AAgCnG,MAAM,UAAU,GAAW,EAAE,CAAC;AA2B9B,MAAa,iBAAkB,SAAQ,2CAAqD;IA2C1F,YACE,4BAA+C,EAC/C,aAA8C,EAC9C,WAAwB,EACxB,YAAwB;QAExB,KAAK,CAAC,4BAA4B,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;QAhC1D,qBAAgB,GAAwB,IAAI,GAAG,EAAkB,CAAC;QAClE,sBAAiB,GAA+B,IAAI,uDAA0B,EAAE,CAAC;QAiCvF,IAAI,CAAC,6BAA6B,GAAG,IAAI,2DAA4B,CAAC,YAAY,CAAC,CAAC;QACpF,IAAI,CAAC,sCAAsC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;IAClF,CAAC;IAjCD,IAAW,QAAQ;QACjB,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,IAAY,gBAAgB;QAC1B,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,MAAM,UAAU,GAAgB,eAAM,CAAC,aAAa,CAClD,IAAI,CAAC,cAAc,CAAC,YAAY,EAChC,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,iBAAiB,CACvB,CAAC;YACF,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,2BAA2B,IAAI,EAAE,CAAC,CAAC,CAAC;YACzF,MAAM,oBAAoB,GAAW,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE9D,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CACtC,IAAI,CAAC,cAAc,CAAC,gBAAgB,EACpC,MAAM,oBAAoB,OAAO,CAClC,CAAC;SACH;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAcM,KAAK,CAAC,WAAW;QACtB,IAAI,CAAC,iBAAiB,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,CAAC;QAC3E,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;QAE3D,iCAAiC;QACjC,MAAM,2BAA2B,GAAW,IAAI,CAAC,IAAI,CACnD,IAAI,CAAC,cAAc,CAAC,kBAAkB,EACtC,cAAc,CACf,CAAC;QACF,MAAM,WAAW,GAAiB,4BAAQ,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QAC7E,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC,OAAO,CAAC;QAC9C,MAAM,aAAa,GAAyB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAClF,IAAI,CAAC,aAAa,EAAE;YAClB,MAAM,IAAI,KAAK,CACb,4BAA4B,IAAI,CAAC,kBAAkB,wCAAwC;gBACzF,2BAA2B,CAC9B,CAAC;SACH;QACD,IAAI,CAAC,wBAAwB,GAAG,aAAa,CAAC;QAE9C,iGAAiG;QACjG,0EAA0E;QAC1E,IAAI,CAAC,aAAa,GAAG;YACnB,kBAAkB,EAAE,KAAK;SAC1B,CAAC;QACF,IACE,IAAI,CAAC,wBAAwB,CAAC,KAAK,GAAG,CAAC;YACvC,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,KAAK,CAAC,IAAI,IAAI,CAAC,wBAAwB,CAAC,KAAK,IAAI,CAAC,CAAC,EACvF;YACA,IAAI,CAAC,aAAa,CAAC,kBAAkB,GAAG,IAAI,CAAC;SAC9C;QAED,kGAAkG;QAClG,qGAAqG;QACrG,yFAAyF;QACzF,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC;QAEtG,IAAI,CAAC,cAAc,CAAC,gBAAgB,GAAG,wBAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QACnG,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QAC1F,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QAC3F,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc;YACvC,IAAI,CAAC,cAAc,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,+BAA+B;QAEvG,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;SACjF;QAED,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;SACjF;QAED,sGAAsG;QACtG,uGAAuG;QACvG,0FAA0F;QAC1F,IACE,IAAI,CAAC,wBAAwB,CAAC,KAAK,GAAG,CAAC;YACvC,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,KAAK,CAAC,IAAI,IAAI,CAAC,wBAAwB,CAAC,KAAK,GAAG,CAAC,CAAC,EACtF;YACA,+FAA+F;YAC/F,8EAA8E;YAC9E,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAChC,mCAAmC,IAAI,CAAC,kBAAkB,cAAc;gBACtE,gEAAgE,CACnE,CAAC;SACH;aAAM,IAAI,IAAI,CAAC,wBAAwB,CAAC,KAAK,GAAG,CAAC,EAAE;YAClD,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAChC,mCAAmC,IAAI,CAAC,kBAAkB,WAAW;gBACnE,gFAAgF,CACnF,CAAC;SACH;QAED,MAAM,EAAE,GAAuB,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;QAE/E,EAAE,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QAExB,MAAM,oBAAoB,GAAwB,CAChD,eAAuB,EACvB,EAAiB,EACjB,EAAE;YACF,MAAM,UAAU,GAAW,SAAS,eAAe,EAAE,CAAC;YACtD,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAChC,MAAM,MAAM,GAAY,EAAE,EAAE,CAAC;YAC7B,MAAM,SAAS,GAAW,QAAQ,eAAe,EAAE,CAAC;YACpD,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC/B,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,eAAe,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YAC/D,uCACK,MAAM,KACT,QAAQ,EAAE,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,EACrD,KAAK,EAAE,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,IAC1C;QACJ,CAAC,CAAC;QAEF,MAAM,yBAAyB,GAA6B,KAAK,EAC/D,eAAuB,EACvB,EAA0B,EAC1B,EAAE;YACF,MAAM,UAAU,GAAW,SAAS,eAAe,EAAE,CAAC;YACtD,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAChC,MAAM,aAAa,GAAqB,EAAE,EAAE,CAAC;YAC7C,MAAM,MAAM,GAAY,MAAM,aAAa,CAAC;YAC5C,MAAM,SAAS,GAAW,QAAQ,eAAe,EAAE,CAAC;YACpD,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC/B,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,eAAe,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YAC/D,uCACK,MAAM,KACT,QAAQ,EAAE,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,IACrD;QACJ,CAAC,CAAC;QAEF,IAAI,MAAM,GAAuB,SAAS,CAAC;QAC3C,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE;gBACvC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;aACvD;YAED,MAAM,YAAY,GAAkB,MAAM,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YAClF,MAAM,GAAG,IAAI,eAAM,CAAC;gBAClB,EAAE,EAAE,EAAE;gBACN,iBAAiB,EAAE,IAAI,CAAC,cAAc,CAAC,cAAc;gBACrD,YAAY,EAAE,YAAY;gBAC1B,eAAe,EAAE,IAAI,CAAC,cAAc,CAAC,WAAW;gBAChD,oBAAoB,EAAE,IAAI,CAAC,cAAc,CAAC,gBAAgB;gBAC1D,oBAAoB,EAAE,IAAI,CAAC,qBAAqB;gBAChD,gBAAgB,EAAE,IAAI,CAAC,iBAAiB;gBACxC,kBAAkB,EAAE,oBAAoB;aACzC,CAAC,CAAC;SACJ;QAED,IAAI,MAAM,GAAuB,SAAS,CAAC;QAC3C,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE;gBACvC,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;aACvD;YAED,MAAM,YAAY,GAAkB,MAAM,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YAClF,MAAM,GAAG,IAAI,eAAM,CAAC;gBAClB,EAAE,EAAE,EAAE;gBACN,iBAAiB,EAAE,IAAI,CAAC,cAAc,CAAC,cAAc;gBACrD,YAAY,EAAE,YAAY;gBAC1B,eAAe,EAAE,IAAI,CAAC,cAAc,CAAC,WAAW;gBAChD,oBAAoB,EAAE,IAAI,CAAC,cAAc,CAAC,gBAAgB;gBAC1D,oBAAoB,EAAE,IAAI,CAAC,qBAAqB;gBAChD,kBAAkB,EAAE,oBAAoB;aACzC,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,4BAA4B,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7E,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,kBAAkB,EAAE,CAAC;SAC7B;QAED,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,kBAAkB,EAAE,CAAC;SAC7B;QAED,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE;YACjC,MAAM,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAChD;aAAM;YACL,MAAM,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,oBAAoB,EAAE,yBAAyB,CAAC,CAAC;SAC3F;IACH,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,EAAsB,EAAE,oBAAyC;QACtF,mBAAmB;QACnB,MAAM,EACJ,QAAQ,EAAE,mBAAmB,EAC7B,QAAQ,EACR,YAAY,EACb,GAAG,oBAAoB,CAAC,WAAW,EAAE,GAAG,EAAE;YACzC,MAAM,SAAS,GAAkC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YACxE,MAAM,aAAa,GAAuB,IAAI,CAAC,uBAAuB,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;YACtF,OAAO;gBACL,QAAQ,EAAE,SAAS;gBACnB,YAAY,EAAE,aAAa;aAC5B,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,cAAc,mBAAmB,IAAI,CAAC,CAAC;QACjF,YAAY;QAEZ,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAErC,+BAAc,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAEzF,EAAE,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAEpC,OAAO,IAAI,OAAO,CAAC,GAAG,EAAE;YACtB,qBAAqB;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,SAAS,CACpB,EAAsB,EACtB,MAA0B,EAC1B,MAA0B,EAC1B,oBAAyC,EACzC,yBAAmD;QAEnD,iCAAiC;QACjC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QAE1E,mBAAmB;QACnB,MAAM,EACJ,QAAQ,EAAE,mBAAmB,EAC7B,QAAQ,EACR,YAAY,EACb,GAAG,oBAAoB,CAAC,WAAW,EAAE,GAAG,EAAE;YACzC,IAAI,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC;YACrC,MAAM,SAAS,GAAkC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YACxE,MAAM,aAAa,GAA6B,IAAI,CAAC,6BAA6B,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;YAClG,OAAO;gBACL,QAAQ,EAAE,SAAS;gBACnB,YAAY,EAAE,aAAa;aAC5B,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,cAAc,mBAAmB,IAAI,CAAC,CAAC;QACjF,YAAY;QAEZ,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAErC,iBAAiB;QACjB,iGAAiG;QACjG,IAAI,cAAc,GAA2C,SAAS,CAAC;QACvE,IAAI,SAA8B,CAAC;QAEnC,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC/B,cAAc,GAAG,EAAE,CAAC,wBAAwB,CAAC;gBAC3C,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB;gBAC7C,IAAI,EAAE,YAAY;gBAClB,4BAA4B,EAAE,EAAE,CAAC,+BAA+B,CAAC,QAAQ,CAAC;aAC3E,CAAC,CAAC;YACH,SAAS,GAAG,cAAc,CAAC,UAAU,EAAE,CAAC;SACzC;aAAM;YACL,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC;gBAC3B,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB;gBAC7C,IAAI,EAAE,YAAY;gBAClB,4BAA4B,EAAE,EAAE,CAAC,+BAA+B,CAAC,QAAQ,CAAC;aAC3E,CAAC,CAAC;SACJ;QAED,2EAA2E;QAC3E,MAAM,cAAc,GAAqD,cAAc,IAAI,SAAS,CAAC;QAErG,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CACvC,aAAa,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,WAAW,CAAC,QAAQ,CAC/E,cAAc,CACf,SAAS,CACX,CAAC;QACF,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CACvC,UAAU,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CACpG,CAAC;QACF,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CACvC,oCAAoC,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAC9E,CAAC;QACF,YAAY;QAEZ,kBAAkB;QAClB,MAAM,EAAE,QAAQ,EAAE,qBAAqB,EAAE,WAAW,EAAE,cAAc,EAAE,GAAG,oBAAoB,CAC3F,SAAS,EACT,GAAG,EAAE;YACH,MAAM,cAAc,GAA6B;gBAC/C,GAAG,cAAc,CAAC,+BAA+B,EAAE;gBACnD,GAAG,cAAc,CAAC,qBAAqB,EAAE;gBACzC,GAAG,cAAc,CAAC,uBAAuB,EAAE;gBAC3C,GAAG,cAAc,CAAC,oBAAoB,EAAE;gBACxC,GAAG,cAAc,CAAC,sBAAsB,EAAE;aAC3C,CAAC;YACF,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC;QACzC,CAAC,CACF,CAAC;QACF,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,YAAY,qBAAqB,IAAI,CAAC,CAAC;QACjF,YAAY;QAEZ,cAAc;QACd,MAAM,UAAU,GAAwB,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;QACjF,YAAY;QAEZ,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3F,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7F,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CACvC,cAAc,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,KAAK;YAC5D,IAAI,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAC1D,CAAC;QACF,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CACvC,UAAU,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK;YACpD,IAAI,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,8BAA8B,CAC3E,CAAC;QACF,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CACvC,SAAS,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,qBAAqB,CACjE,CAAC;QAEF,wBAAwB;QACxB,kGAAkG;QAClG,MAAM,EAAE,QAAQ,EAAE,yBAAyB,EAAE,WAAW,EAAE,GAAG,oBAAoB,CAAC,aAAa,EAAE,GAAG,EAAE;YACpG,MAAM,cAAc,GAA6B,CAAC,GAAG,cAAc,EAAE,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;YAChG,OAAO,EAAE,WAAW,EAAE,EAAE,CAAC,6BAA6B,CAAC,cAAc,CAAC,EAAE,CAAC;QAC3E,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,gBAAgB,yBAAyB,IAAI,CAAC,CAAC;QACzF,YAAY;QAEZ,eAAe;QACf,MAAM,YAAY,GAAkC,yBAAyB,CAAC,OAAO,EAAE,GAAG,EAAE,CAC1F,aAAK,CAAC,iBAAiB,CACrB,UAAU,CAAC,YAAY,EACvB,IAAI,CAAC,cAAc,CAAC,mBAAmB,EACvC,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAC3B,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CACjF,CACF,CAAC;QACF,YAAY;QAEZ,MAAM,mBAAmB,GAAgB,IAAI,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAErE,MAAM,eAAe,GAAqB,SAA6B,CAAC;QAExE,gBAAgB;QAChB,IAAI,MAAM,EAAE;YACV,MAAM,MAAM,CAAC,mBAAmB,CAAC;gBAC/B,SAAS,EAAE,eAAe;gBAC1B,mBAAmB,EAAE,mBAAmB;gBACxC,YAAY,EAAE,UAAU,CAAC,kBAAkB;aAC5C,CAAC,CAAC;SACJ;QACD,YAAY;QAEZ,gBAAgB;QAChB,IAAI,MAAM,EAAE;YACV,MAAM,MAAM,CAAC,mBAAmB,CAAC;gBAC/B,SAAS,EAAE,eAAe;gBAC1B,mBAAmB,EAAE,mBAAmB;gBACxC,YAAY,EAAE,UAAU,CAAC,kBAAkB;aAC5C,CAAC,CAAC;SACJ;QACD,YAAY;QAEZ,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,MAAM,YAAY,CAAC;QACvD,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CACvC,cAAc,aAAa,OAAO,UAAU,CAAC,YAAY,CAAC,MAAM,SAAS,CAC1E,CAAC;QAEF,uBAAuB;QACvB,MAAM,cAAc,GAAY,IAAI,CAAC,cAAc,CAAC,iBAAiB,KAAK,MAAM,CAAC;QACjF,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG,MAAM,yBAAyB,CAC9F,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe,EAC7C,KAAK,IAAI,EAAE;YACT,MAAM,qBAAqB,GAAW,eAAe,CAAC,wBAAwB,EAAE,CAAC;YACjF,MAAM,YAAY,GAAoB,EAAE,CAAC;YACzC,IAAI,SAAS,GAAW,CAAC,CAAC;YAE1B,MAAM,YAAY,GAAqC;gBACrD,mBAAmB,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,mBAAmB,EAAE;gBAC7D,wBAAwB,EAAE,GAAG,EAAE,CAAC,qBAAqB;gBACrD,oBAAoB,EAAE,CAAC,QAAgB,EAAE,EAAE,CAAC,YAAY,CAAC,oBAAoB,CAAC,QAAQ,CAAC;aACxF,CAAC;YAEF,IAAI,eAAgE,CAAC;YACrE,IAAI,cAAc,EAAE;gBAClB,eAAe,GAAG,CAAC,OAAqC,EAAE,EAAE;oBAC1D,YAAY,CAAC,IAAI,CACf,IAAI,CAAC,iBAAiB;yBACnB,mBAAmB,iCAAM,OAAO,KAAE,qBAAqB,2BAAiC;yBACxF,IAAI,CAAC,GAAG,EAAE;wBACT,SAAS,EAAE,CAAC;oBACd,CAAC,CAAC;yBACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;wBACf,IAAI,CAAC,8BAAU,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;4BACtC,oDAAoD;4BACpD,MAAM,KAAK,CAAC;yBACb;oBACH,CAAC,CAAC,CACL,CAAC;gBACJ,CAAC,CAAC;aACH;iBAAM;gBACL,eAAe,GAAG,CAAC,OAAqC,EAAE,EAAE;oBAC1D,YAAY,CAAC,IAAI,CACf,IAAI,CAAC,iBAAiB;yBACnB,aAAa,CAAC;wBACb,UAAU,EAAE,OAAO,CAAC,cAAc;wBAClC,eAAe,EAAE,OAAO,CAAC,WAAW;qBACrC,CAAC;yBACD,IAAI,CAAC,GAAG,EAAE;wBACT,SAAS,EAAE,CAAC;oBACd,CAAC,CAAC;yBACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;wBACf,IAAI,CAAC,8BAAU,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;4BACtC,oDAAoD;4BACpD,MAAM,KAAK,CAAC;yBACb;oBACH,CAAC,CAAC,CACL,CAAC;gBACJ,CAAC,CAAC;aACH;YAED,KAAK,MAAM,UAAU,IAAI,cAAc,CAAC,cAAc,EAAE,EAAE;gBACxD,MAAM,QAAQ,GAAW,UAAU,CAAC,QAAQ,CAAC;gBAC7C,IAAI,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;oBACrC,MAAM,gCAAgC,GAAW,EAAE,CAAC,mBAAmB,CACrE,EAAE,CAAC,6BAA6B,CAAC,YAAY,EAAE,QAAQ,CAAC,CACzD,CAAC;oBAEF,KAAK,MAAM,EAAE,kBAAkB,EAAE,aAAa,EAAE,mBAAmB,GAAG,KAAK,EAAE,SAAS,EAAE,IAAI,IAAI;yBAC7F,kBAAkB,EAAE;wBACrB,8CAA8C;wBAC9C,IAAI,SAAS,EAAE;4BACb,IAAI,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE;gCACnC,MAAM,cAAc,GAAW,GAAG,gCAAgC,WAAW,CAAC;gCAC9E,eAAe,CAAC;oCACd,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,cAAc,CAAC;oCAC7D,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC;iCACtD,CAAC,CAAC;6BACJ;4BAED,IAAI,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE;gCAChC,MAAM,WAAW,GAAW,GAAG,gCAAgC,OAAO,CAAC;gCACvE,eAAe,CAAC;oCACd,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,WAAW,CAAC;oCAC1D,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,WAAW,CAAC;iCACnD,CAAC,CAAC;6BACJ;yBACF;wBAED,IAAI,QAAQ,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE;4BAC/D,MAAM,aAAa,GAAW,GAAG,gCAAgC,GAAG,mBAAmB,MAAM,CAAC;4BAC9F,eAAe,CAAC;gCACd,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,aAAa,CAAC;gCAC5D,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,CAAC;6BACrD,CAAC,CAAC;yBACJ;wBAED,sEAAsE;wBACtE,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE;4BACjC,MAAM,UAAU,GAAW,GAAG,gCAAgC,GAAG,mBAAmB,EAAE,CAAC;4BACvF,eAAe,CAAC;gCACd,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAU,CAAC;gCACzD,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC;6BAClD,CAAC,CAAC;yBACJ;qBACF;iBACF;aACF;YAED,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAEhC,OAAO,EAAE,SAAS,EAAE,CAAC;QACvB,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CACvC,GAAG,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,iBAAiB,KAAK,gBAAgB,OAAO,aAAa,SAAS,CACrG,CAAC;QAEF,iGAAiG;QACjG,IAAI,CAAC,6BAA6B,CAAC,QAAQ,EAAE,CAAC;QAC9C,YAAY;QAEZ,IAAI,oBAAoB,GAAW,CAAC,CAAC;QACrC,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1B,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAChC,eAAe,WAAW,CAAC,MAAM,oBAAoB,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAC1F,CAAC;YACF,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;gBACpC,MAAM,kBAAkB,GAAmC,IAAI,CAAC,8BAA8B,CAC5F,UAAU,EACV,EAAE,CACH,CAAC;gBAEF,IAAI,kBAAkB,KAAK,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE;oBACtD,oBAAoB,EAAE,CAAC;iBACxB;gBAED,IAAI,CAAC,uBAAuB,CAAC,EAAE,EAAE,UAAU,EAAE,kBAAkB,CAAC,CAAC;aAClE;SACF;QAED,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,cAAc,EAAE,CAAC;SACzB;QAED,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,cAAc,EAAE,CAAC;SACzB;QAED,IAAI,oBAAoB,GAAG,CAAC,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,+BAA+B,oBAAoB,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SACvF;IACH,CAAC;IAEO,uBAAuB,CAC7B,EAAsB,EACtB,UAAkC,EAClC,qBAAqD,IAAI,CAAC,8BAA8B,CAAC,UAAU,EAAE,EAAE,CAAC;QAExG,oCAAoC;QACpC,IAAI,iBAAyB,CAAC;QAC9B,IAAI,WAAkB,CAAC;QACvB,IAAI,UAAU,CAAC,IAAI,EAAE;YACnB,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,6BAA6B,CAAC,UAAU,CAAC,KAAM,CAAC,CAAC;YAC7F,MAAM,OAAO,GAAW,EAAE,CAAC,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YACtF,MAAM,2BAA2B,GAAW,IAAI,CAAC,QAAQ,CACvD,IAAI,CAAC,cAAc,CAAC,WAAW,EAC/B,UAAU,CAAC,IAAI,CAAC,QAAQ,CACzB,CAAC;YACF,MAAM,gBAAgB,GAAW,MAAM,UAAU,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YACrE,WAAW,GAAG,IAAI,qBAAS,CAAC,gBAAgB,EAAE,2BAA2B,EAAE,IAAI,GAAG,CAAC,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;YACpG,iBAAiB,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;SAC5C;aAAM;YACL,iBAAiB,GAAG,EAAE,CAAC,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAClF,WAAW,GAAG,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SAC5C;QAED,QAAQ,kBAAkB,EAAE;YAC1B,KAAK,EAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;gBAC9C,MAAM;aACP;YAED,KAAK,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;gBAClC,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBAChD,MAAM;aACP;YAED,OAAO,CAAC,CAAC;gBACP,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,GAAG,iBAAiB,CAAC,CAAC;gBACzD,MAAM;aACP;SACF;IACH,CAAC;IAEO,8BAA8B,CACpC,UAAkC,EAClC,EAAsB;QAEtB,sEAAsE;QACtE,6DAA6D;QAC7D,EAAE;QACF,gEAAgE;QAChE,EAAE;QACF,yFAAyF;QACzF,0FAA0F;QAC1F,IAAI,UAAU,CAAC,kBAAkB,IAAI,UAAU,CAAC,QAAQ,KAAK,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE;YACxF,OAAO,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC;SACtC;QAED,kEAAkE;QAClE,QAAQ,UAAU,CAAC,IAAI,EAAE;YACvB,KAAK,EAAE,CAAC,WAAW,CAAC,+EAA+E;iBAChG,IAAI,CAAC;YACR,KAAK,EAAE,CAAC,WAAW;iBAChB,6FAA6F,CAAC,IAAI;gBACnG,OAAO,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC;SACxC;QAED,OAAO,UAAU,CAAC,QAAQ,CAAC;IAC7B,CAAC;IAEO,KAAK,CACX,EAAsB,EACtB,QAAuC,EACvC,cAAgE;QAEhE,MAAM,YAAY,GAAmB,EAAE,CAAC;QAExC,MAAM,YAAY,GAA6B,IAAI,GAAG,EAAuB,CAAC;QAC9E,+BAAc,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAEtG,MAAM,iBAAiB,GAAkC,CAAC,QAAgB,EAAE,IAAY,EAAE,EAAE;YAC1F,MAAM,kBAAkB,GAAW,+BAAc,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YAClF,YAAY,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC;QAEF,MAAM,MAAM,GAA2B,cAAc,CAAC,IAAI,CACxD,SAAS,EAAE,qBAAqB;QAChC,iBAAiB,CAClB,CAAC;QAEF,+BAAc,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAE7B,uCACK,MAAM,KACT,kBAAkB,EAAE,YAAY,EAChC,YAAY,IACZ;IACJ,CAAC;IAEO,iBAAiB,CAAC,EAAsB,EAAE,QAAuC;QACvF,IACE,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC;YACrD,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EACrD;YACA,MAAM,IAAI,KAAK,CACb,8GAA8G,CAC/G,CAAC;SACH;QAED,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,MAAM,cAAc,GAAmD,IAAI,GAAG,EAAE,CAAC;QACjF,MAAM,gBAAgB,GAAmC,IAAI,GAAG,EAAE,CAAC;QAEnE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE;YAC5B,MAAM,IAAI,KAAK,CACb,+FAA+F;gBAC7F,mDAAmD,CACtD,CAAC;SACH;QAED,IAAI,IAAI,CAAC,cAAc,CAAC,2BAA2B,EAAE;YACnD,IAAI,CAAC,oBAAoB,CACvB,EAAE,CAAC,UAAU,CAAC,QAAQ,EACtB,QAAQ,CAAC,OAAO,CAAC,MAAO;YACxB,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,CAAC,UAAU,CAAC,QAAQ,EAClE,MAAM,CACP,CAAC;YAEF,MAAM,SAAS,GAAsB;gBACnC,MAAM,EAAE,QAAQ,CAAC,OAAO,CAAC,MAAO;gBAChC,IAAI,EAAE,UAAU;gBAChB,SAAS,EAAE,MAAM;gBACjB,MAAM,EAAE,6BAA6B;aACtC,CAAC;YAEF,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACtD,gBAAgB,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAO,OAAO,EAAE,SAAS,CAAC,CAAC;SACrE;QAED,IAAI,IAAI,CAAC,cAAc,CAAC,2BAA2B,EAAE;YACnD,IAAI,CAAC,oBAAoB,CACvB,EAAE,CAAC,UAAU,CAAC,MAAM,EACpB,QAAQ,CAAC,OAAO,CAAC,MAAO;YACxB,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,CAAC,UAAU,CAAC,MAAM,EAChE,MAAM,CACP,CAAC;YAEF,MAAM,SAAS,GAAsB;gBACnC,MAAM,EAAE,QAAQ,CAAC,OAAO,CAAC,MAAO;gBAChC,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,MAAM;gBACjB,MAAM,EAAE,6BAA6B;aACtC,CAAC;YAEF,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACtD,gBAAgB,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAO,OAAO,EAAE,SAAS,CAAC,CAAC;SACrE;QAED,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAChD,IAAI,CAAC,oBAAoB,CACvB,QAAQ,CAAC,OAAO,CAAC,MAAM,EACvB,QAAQ,CAAC,OAAO,CAAC,MAAO;YACxB,eAAe,CAAC,IAAI;YACpB,yBAAyB,CAAC,SAAS,CACpC,CAAC;YAEF,MAAM,cAAc,GAAsB;gBACxC,MAAM,EAAE,QAAQ,CAAC,OAAO,CAAC,MAAO;gBAChC,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAwC;gBACnF,SAAS,EAAE,KAAK;gBAChB,MAAM,EAAE,eAAe;aACxB,CAAC;YAEF,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;YAC5D,gBAAgB,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAO,MAAM,EAAE,cAAc,CAAC,CAAC;SACzE;QAED,IAAI,IAAI,CAAC,cAAc,CAAC,2BAA2B,EAAE;YACnD,KAAK,MAAM,0BAA0B,IAAI,IAAI,CAAC,cAAc,CAAC,2BAA2B,EAAE;gBACxF,MAAM,UAAU,GAA2B,IAAI,CAAC,gBAAgB,CAC9D,EAAE,EACF,0BAA0B,CAAC,UAAU,CACtC,CAAC;gBAEF,MAAM,SAAS,GAAW,GAAG,0BAA0B,CAAC,aAAa,MAAM,CAAC;gBAC5E,MAAM,gBAAgB,GAAsB;oBAC1C,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,UAAU,CAAwC;oBACtE,MAAM,EAAE,0BAA0B,CAAC,aAAa;oBAChD,SAAS,EAAE,KAAK;oBAChB,MAAM,EAAE,6BAA6B;iBACtC,CAAC;gBAEF,MAAM,YAAY,GAAkC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBACnF,MAAM,WAAW,GAAkC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAEnF,IAAI,YAAY,EAAE;oBAChB,MAAM,IAAI,KAAK,CACb,gBAAgB,0BAA0B,CAAC,UAAU,2BAA2B,YAAY,CAAC,MAAM,oBAAoB,YAAY,CAAC,SAAS,eAAe,YAAY,CAAC,MAAM,GAAG,CACnL,CAAC;iBACH;qBAAM,IAAI,WAAW,EAAE;oBACtB,MAAM,IAAI,KAAK,CACb,kBAAkB,0BAA0B,CAAC,aAAa,kCAAkC,WAAW,CAAC,IAAI,oBAAoB,WAAW,CAAC,SAAS,0BAA0B,WAAW,CAAC,MAAM,GAAG,CACrM,CAAC;iBACH;qBAAM;oBACL,MAAM,YAAY,GAAuB,IAAI,CAAC,oBAAoB,CAChE,UAAU,EACV,0BAA0B,CAAC,aAAa;oBACxC,eAAe,CAAC,KAAK,EACrB,SAAS,CACV,CAAC;oBAEF,IAAI,YAAY,EAAE;wBAChB,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;wBACjD,gBAAgB,CAAC,GAAG,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;qBACtD;iBACF;aACF;SACF;IACH,CAAC;IAEO,oBAAoB,CAC1B,UAAkC,EAClC,aAAqB,EACrB,SAAkB,EAClB,mBAAuC;QAEvC,IAAI,aAAqB,CAAC;QAC1B,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;YAClC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;SAC/E;aAAM;YACL,aAAa,GAAG,aAAa,CAAC;YAC9B,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;SAC9E;QAED,aAAa,GAAG,wBAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QACrD,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,6CAA6C;QAEjG,KAAK,MAAM,wBAAwB,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC9D,IAAI,SAA6B,CAAC;YAElC,IAAI,wBAAwB,CAAC,aAAa,KAAK,aAAa,EAAE;gBAC5D,IAAI,wBAAwB,CAAC,mBAAmB,KAAK,mBAAmB,EAAE;oBACxE,SAAS;wBACP,4DAA4D;4BAC5D,qBAAqB,mBAAmB,IAAI,KAAK,gBAAgB;4BACjE,YAAY,aAAa,KAAK,CAAC;iBAClC;aACF;iBAAM;gBACL,IAAI,YAAgC,CAAC;gBACrC,IAAI,WAA+B,CAAC;gBACpC,IAAI,aAAa,CAAC,UAAU,CAAC,wBAAwB,CAAC,aAAa,CAAC,EAAE;oBACpE,YAAY,GAAG,aAAa,CAAC;oBAC7B,WAAW,GAAG,wBAAwB,CAAC,aAAa,CAAC;iBACtD;qBAAM,IAAI,wBAAwB,CAAC,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;oBAC3E,YAAY,GAAG,wBAAwB,CAAC,aAAa,CAAC;oBACtD,WAAW,GAAG,aAAa,CAAC;iBAC7B;gBAED,IAAI,YAAY,EAAE;oBAChB,SAAS;wBACP,gEAAgE;4BAChE,KAAK,YAAY,UAAU,WAAW,KAAK,CAAC;iBAC/C;aACF;YAED,IAAI,SAAS,EAAE;gBACb,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvD,OAAO,SAAS,CAAC;aAClB;SACF;QAED,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;YAC3B,aAAa;YACb,UAAU;YACV,kBAAkB,EAAE,wBAAI,CAAC,gBAAgB,CACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAClE;YACD,mBAAmB;YAEnB,SAAS;SACV,CAAC,CAAC;QAEH,OAAO,GAAG,aAAa,IAAI,mBAAmB,IAAI,KAAK,EAAE,CAAC;IAC5D,CAAC;IAEO,aAAa,CAAC,EAAsB;QAC1C,MAAM,gBAAgB,GAAyC,EAAE,CAAC,cAAc,CAC9E,IAAI,CAAC,cAAc,CAAC,YAAY,EAChC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAChC,CAAC;QACF,MAAM,aAAa,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QAC7E,MAAM,QAAQ,GAAkC,EAAE,CAAC,0BAA0B,CAC3E,gBAAgB,CAAC,MAAM,EACvB;YACE,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,MAAM;YACzC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ;YACzC,aAAa,EAAE,CACb,UAAkB,EAClB,UAAkC,EAClC,QAAgC,EAChC,QAAgC,EAChC,KAAc,EACd,EAAE,CACF,EAAE,CAAC,UAAU,CACX,UAAU,EACV,UAAU,EACV,QAAQ,EACR,QAAQ;YACR,+BAA+B,CAAC,IAAI,EACpC,aAAa,EACb,KAAK,EACL,IAAI,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,EACjF,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAChE;YACH,yBAAyB,EAAE,IAAI;SAChC,EACD,aAAa,CACd,CAAC;QAEF,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC/B,QAAQ,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;YACpC,QAAQ,CAAC,OAAO,CAAC,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;SAC1D;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,6BAA6B,CACnC,EAAsB,EACtB,QAAuC;QAEvC,IAAI,YAAsC,CAAC;QAE3C,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC/B,YAAY,GAAG,EAAE,CAAC,6BAA6B,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SACnE;aAAM;YACL,YAAY,GAAG,EAAE,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SACxD;QAED,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACxF,YAAY,CAAC,QAAQ,GAAG,CAAC,QAAgB,EAAE,EAAE;YAC3C,IAAI;gBACF,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;aACtD;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,8BAAU,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;oBACrC,OAAO,SAAS,CAAC;iBAClB;qBAAM;oBACL,MAAM,KAAK,CAAC;iBACb;aACF;QACH,CAAC,CAAC;QACF,YAAY,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACrF,YAAY,CAAC,eAAe,GAAG,CAAC,aAAqB,EAAE,EAAE;YACvD,IAAI;gBACF,MAAM,KAAK,GAAoB,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;gBACnF,OAAO,KAAK,CAAC,WAAW,EAAE,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC;aACtD;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,8BAAU,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;oBACrC,OAAO,KAAK,CAAC;iBACd;qBAAM;oBACL,MAAM,KAAK,CAAC;iBACb;aACF;QACH,CAAC,CAAC;QACF,YAAY,CAAC,cAAc,GAAG,CAAC,UAAkB,EAAE,EAAE,CACnD,IAAI,CAAC,iBAAiB,CAAC,6BAA6B,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC;QAE/E,wEAAwE;QACxE,YAAY,CAAC,mBAAmB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;QACzE,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,uBAAuB,CAC7B,EAAsB,EACtB,QAAuC;QAEvC,OAAO,EAAE,CAAC,uBAAuB,CAC/B,QAAQ,CAAC,SAAS,EAClB,QAAQ,CAAC,OAAO,EAChB,EAAE,CAAC,GAAG,EACN,CACE,SAA4C,EAC5C,OAAgD,EAChD,YAAuC,EACvC,UAAiE,EACjE,4BAAoE,EACpE,iBAA2E,EAC3E,EAAE;YACF,IAAI,YAAY,KAAK,SAAS,EAAE;gBAC9B,MAAM,IAAI,iCAAa,CAAC,mEAAmE,CAAC,CAAC;aAC9F;YAED,MAAM,iBAAiB,GAAkC,YAAY,CAAC,SAAS,CAAC;YAChF,YAAY,CAAC,SAAS,GAAG,CACvB,QAAgB;YAChB,4DAA4D;YAC5D,GAAG,IAKF,EACD,EAAE;gBACF,MAAM,kBAAkB,GAAW,+BAAc,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;gBAClF,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,CAAC;YAC5D,CAAC,CAAC;YAEF,OAAO,EAAE,CAAC,8CAA8C,CACtD,SAAS,EACT,OAAO,EACP,YAAY,EACZ,UAAU,EACV,4BAA4B,EAC5B,iBAAiB,CAClB,CAAC;QACJ,CAAC,EACD,CAAC,UAAkC,EAAE,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,EAAE,EAAE,UAAU,CAAC,EACpF,CAAC,UAAkC,EAAE,EAAE;YACrC,IAAI,CAAC,uBAAuB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YAE7C,uFAAuF;YACvF,IACE,UAAU,CAAC,IAAI,KAAK,EAAE,CAAC,WAAW,CAAC,wCAAwC,CAAC,IAAI;gBAChF,UAAU,CAAC,IAAI,KAAK,EAAE,CAAC,WAAW,CAAC,uCAAuC,CAAC,IAAI,EAC/E;gBACA,IAAI,CAAC,6BAA6B,CAAC,QAAQ,EAAE,CAAC;aAC/C;QACH,CAAC,EACD,QAAQ,CAAC,iBAAiB,CAC3B,CAAC;IACJ,CAAC;IAEO,2BAA2B,CAAC,EAAsB;QACxD,EAAE,CAAC,QAAQ,GAAG,CAAC,QAAgB,EAAE,EAAE;YACjC,IAAI,QAAQ,GAAuB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACvE,IAAI,QAAQ,EAAE;gBACZ,OAAO,QAAQ,CAAC;aACjB;iBAAM;gBACL,IAAI;oBACF,MAAM,YAAY,GAAW,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBACvE,IAAI,CAAC,YAAY,EAAE;wBACjB,QAAQ,GAAG,UAAU,CAAC;qBACvB;yBAAM;wBACL,MAAM,UAAU,GAAoD,EAAE,CAAC,yBAAyB,CAC9F,QAAQ,EACR,YAAY,CACb,CAAC;wBACF,IAAI,UAAU,CAAC,KAAK,EAAE;4BACpB,QAAQ,GAAG,UAAU,CAAC;yBACvB;6BAAM;4BACL,QAAQ,GAAG,UAAU,CAAC,MAAgB,CAAC;yBACxC;qBACF;iBACF;gBAAC,OAAO,KAAK,EAAE;oBACd,QAAQ,GAAG,UAAU,CAAC;iBACvB;gBAED,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBAC9C,OAAO,QAAQ,CAAC;aACjB;QACH,CAAC,CAAC;IACJ,CAAC;IAEO,gBAAgB,CAAC,EAAsB,EAAE,cAAsB;QACrE,QAAQ,cAAc,CAAC,WAAW,EAAE,EAAE;YACpC,KAAK,UAAU;gBACb,OAAO,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;YAEhC,KAAK,KAAK;gBACR,OAAO,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC;YAE3B,KAAK,KAAK;gBACR,OAAO,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC;YAE3B,KAAK,QAAQ;gBACX,OAAO,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;YAE9B,KAAK,QAAQ;gBACX,OAAO,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;YAE9B,KAAK,QAAQ;gBACX,OAAO,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;YAE9B;gBACE,MAAM,IAAI,KAAK,CAAC,IAAI,cAAc,oCAAoC,CAAC,CAAC;SAC3E;IACH,CAAC;CACF;AAvgCD,8CAugCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as semver from 'semver';\r\nimport {\r\n  FileSystemStats,\r\n  IFileSystemCreateLinkOptions,\r\n  Terminal,\r\n  JsonFile,\r\n  IPackageJson,\r\n  InternalError,\r\n  ITerminalProvider,\r\n  FileSystem,\r\n  Path,\r\n  AlreadyExistsBehavior\r\n} from '@rushstack/node-core-library';\r\nimport * as crypto from 'crypto';\r\nimport type * as TTypescript from 'typescript';\r\nimport {\r\n  ExtendedTypeScript,\r\n  IExtendedProgram,\r\n  IExtendedSourceFile,\r\n  IResolveModuleNameResolutionHost\r\n} from './internalTypings/TypeScriptInternals';\r\n\r\nimport { SubprocessRunnerBase } from '../../utilities/subprocess/SubprocessRunnerBase';\r\nimport { Async } from '../../utilities/Async';\r\nimport { PerformanceMeasurer, PerformanceMeasurerAsync } from '../../utilities/Performance';\r\nimport { Tslint } from './Tslint';\r\nimport { Eslint } from './Eslint';\r\nimport { IScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\r\nimport { FileError } from '../../pluginFramework/logging/FileError';\r\n\r\nimport { EmitFilesPatch, ICachedEmitModuleKind } from './EmitFilesPatch';\r\nimport { HeftSession } from '../../pluginFramework/HeftSession';\r\nimport { EmitCompletedCallbackManager } from './EmitCompletedCallbackManager';\r\nimport { ISharedTypeScriptConfiguration } from './TypeScriptPlugin';\r\nimport { TypeScriptCachedFileSystem } from '../../utilities/fileSystem/TypeScriptCachedFileSystem';\r\n\r\nexport interface ITypeScriptBuilderConfiguration extends ISharedTypeScriptConfiguration {\r\n  buildFolder: string;\r\n  typeScriptToolPath: string;\r\n  tslintToolPath: string | undefined;\r\n  eslintToolPath: string | undefined;\r\n\r\n  lintingEnabled: boolean;\r\n\r\n  watchMode: boolean;\r\n\r\n  /**\r\n   * The path to the tsconfig file being built.\r\n   */\r\n  tsconfigPath: string;\r\n\r\n  /**\r\n   * The path of project's build cache folder\r\n   */\r\n  buildCacheFolder: string;\r\n\r\n  /**\r\n   * Set this to change the maximum number of file handles that will be opened concurrently for writing.\r\n   * The default is 50.\r\n   */\r\n  maxWriteParallelism: number;\r\n}\r\n\r\ntype TWatchCompilerHost =\r\n  TTypescript.WatchCompilerHostOfFilesAndCompilerOptions<TTypescript.EmitAndSemanticDiagnosticsBuilderProgram>;\r\n\r\nconst EMPTY_JSON: object = {};\r\n\r\ninterface ICompilerCapabilities {\r\n  /**\r\n   * Support for incremental compilation via `ts.createIncrementalProgram()`.\r\n   * Introduced with TypeScript 3.6.\r\n   */\r\n  incrementalProgram: boolean;\r\n}\r\n\r\ninterface IFileToWrite {\r\n  filePath: string;\r\n  data: string;\r\n}\r\n\r\ninterface IModuleKindReason {\r\n  kind: keyof typeof TTypescript.ModuleKind;\r\n  outDir: string;\r\n  extension: '.js' | '.cjs' | '.mjs';\r\n  reason: string;\r\n}\r\n\r\ninterface IExtendedEmitResult extends TTypescript.EmitResult {\r\n  changedSourceFiles: Set<IExtendedSourceFile>;\r\n  filesToWrite: IFileToWrite[];\r\n}\r\n\r\nexport class TypeScriptBuilder extends SubprocessRunnerBase<ITypeScriptBuilderConfiguration> {\r\n  private _typescriptVersion!: string;\r\n  private _typescriptParsedVersion!: semver.SemVer;\r\n\r\n  private _capabilities!: ICompilerCapabilities;\r\n  private _useIncrementalProgram!: boolean;\r\n\r\n  private _eslintEnabled!: boolean;\r\n  private _tslintEnabled!: boolean;\r\n  private _moduleKindsToEmit!: ICachedEmitModuleKind[];\r\n  private _eslintConfigFilePath!: string;\r\n  private _tslintConfigFilePath!: string;\r\n  private _typescriptLogger!: IScopedLogger;\r\n  private _typescriptTerminal!: Terminal;\r\n  private _emitCompletedCallbackManager: EmitCompletedCallbackManager;\r\n\r\n  private __tsCacheFilePath!: string;\r\n  private _tsReadJsonCache: Map<string, object> = new Map<string, object>();\r\n  private _cachedFileSystem: TypeScriptCachedFileSystem = new TypeScriptCachedFileSystem();\r\n\r\n  public get filename(): string {\r\n    return __filename;\r\n  }\r\n\r\n  private get _tsCacheFilePath(): string {\r\n    if (!this.__tsCacheFilePath) {\r\n      const configHash: crypto.Hash = Tslint.getConfigHash(\r\n        this._configuration.tsconfigPath,\r\n        this._typescriptTerminal,\r\n        this._cachedFileSystem\r\n      );\r\n      configHash.update(JSON.stringify(this._configuration.additionalModuleKindsToEmit || {}));\r\n      const serializedConfigHash: string = configHash.digest('hex');\r\n\r\n      this.__tsCacheFilePath = path.posix.join(\r\n        this._configuration.buildCacheFolder,\r\n        `ts_${serializedConfigHash}.json`\r\n      );\r\n    }\r\n\r\n    return this.__tsCacheFilePath;\r\n  }\r\n\r\n  public constructor(\r\n    parentGlobalTerminalProvider: ITerminalProvider,\r\n    configuration: ITypeScriptBuilderConfiguration,\r\n    heftSession: HeftSession,\r\n    emitCallback: () => void\r\n  ) {\r\n    super(parentGlobalTerminalProvider, configuration, heftSession);\r\n\r\n    this._emitCompletedCallbackManager = new EmitCompletedCallbackManager(emitCallback);\r\n    this.registerSubprocessCommunicationManager(this._emitCompletedCallbackManager);\r\n  }\r\n\r\n  public async invokeAsync(): Promise<void> {\r\n    this._typescriptLogger = await this.requestScopedLoggerAsync('typescript');\r\n    this._typescriptTerminal = this._typescriptLogger.terminal;\r\n\r\n    // Determine the compiler version\r\n    const compilerPackageJsonFilename: string = path.join(\r\n      this._configuration.typeScriptToolPath,\r\n      'package.json'\r\n    );\r\n    const packageJson: IPackageJson = JsonFile.load(compilerPackageJsonFilename);\r\n    this._typescriptVersion = packageJson.version;\r\n    const parsedVersion: semver.SemVer | null = semver.parse(this._typescriptVersion);\r\n    if (!parsedVersion) {\r\n      throw new Error(\r\n        `Unable to parse version \"${this._typescriptVersion}\" for TypeScript compiler package in: ` +\r\n          compilerPackageJsonFilename\r\n      );\r\n    }\r\n    this._typescriptParsedVersion = parsedVersion;\r\n\r\n    // Detect what features this compiler supports.  Note that manually comparing major/minor numbers\r\n    // loosens the matching to accept prereleases such as \"3.6.0-dev.20190530\"\r\n    this._capabilities = {\r\n      incrementalProgram: false\r\n    };\r\n    if (\r\n      this._typescriptParsedVersion.major > 3 ||\r\n      (this._typescriptParsedVersion.major === 3 && this._typescriptParsedVersion.minor >= 6)\r\n    ) {\r\n      this._capabilities.incrementalProgram = true;\r\n    }\r\n\r\n    // Disable incremental \"useIncrementalProgram\" in watch mode because its compiler configuration is\r\n    // different, which will invalidate the incremental build cache.  In order to support this, we'd need\r\n    // to delete the cache when switching modes, or else maintain two separate cache folders.\r\n    this._useIncrementalProgram = this._capabilities.incrementalProgram && !this._configuration.watchMode;\r\n\r\n    this._configuration.buildCacheFolder = Path.convertToSlashes(this._configuration.buildCacheFolder);\r\n    this._tslintConfigFilePath = path.resolve(this._configuration.buildFolder, 'tslint.json');\r\n    this._eslintConfigFilePath = path.resolve(this._configuration.buildFolder, '.eslintrc.js');\r\n    this._eslintEnabled = this._tslintEnabled =\r\n      this._configuration.lintingEnabled && !this._configuration.watchMode; // Don't run lint in watch mode\r\n\r\n    if (this._tslintEnabled) {\r\n      this._tslintEnabled = this._cachedFileSystem.exists(this._tslintConfigFilePath);\r\n    }\r\n\r\n    if (this._eslintEnabled) {\r\n      this._eslintEnabled = this._cachedFileSystem.exists(this._eslintConfigFilePath);\r\n    }\r\n\r\n    // Report a warning if the TypeScript version is too old/new.  The current oldest supported version is\r\n    // TypeScript 2.9. Prior to that the \"ts.getConfigFileParsingDiagnostics()\" API is missing; more fixups\r\n    // would be required to deal with that.  We won't do that work unless someone requests it.\r\n    if (\r\n      this._typescriptParsedVersion.major < 2 ||\r\n      (this._typescriptParsedVersion.major === 2 && this._typescriptParsedVersion.minor < 9)\r\n    ) {\r\n      // We don't use writeWarningLine() here because, if the person wants to take their chances with\r\n      // a seemingly unsupported compiler, their build should be allowed to succeed.\r\n      this._typescriptTerminal.writeLine(\r\n        `The TypeScript compiler version ${this._typescriptVersion} is very old` +\r\n          ` and has not been tested with Heft; it may not work correctly.`\r\n      );\r\n    } else if (this._typescriptParsedVersion.major > 4) {\r\n      this._typescriptTerminal.writeLine(\r\n        `The TypeScript compiler version ${this._typescriptVersion} is newer` +\r\n          ` than the latest version that was tested with Heft; it may not work correctly.`\r\n      );\r\n    }\r\n\r\n    const ts: ExtendedTypeScript = require(this._configuration.typeScriptToolPath);\r\n\r\n    ts.performance.enable();\r\n\r\n    const measureTsPerformance: PerformanceMeasurer = <TResult extends object | void>(\r\n      measurementName: string,\r\n      fn: () => TResult\r\n    ) => {\r\n      const beforeName: string = `before${measurementName}`;\r\n      ts.performance.mark(beforeName);\r\n      const result: TResult = fn();\r\n      const afterName: string = `after${measurementName}`;\r\n      ts.performance.mark(afterName);\r\n      ts.performance.measure(measurementName, beforeName, afterName);\r\n      return {\r\n        ...result,\r\n        duration: ts.performance.getDuration(measurementName),\r\n        count: ts.performance.getCount(beforeName)\r\n      };\r\n    };\r\n\r\n    const measureTsPerformanceAsync: PerformanceMeasurerAsync = async <TResult extends object | void>(\r\n      measurementName: string,\r\n      fn: () => Promise<TResult>\r\n    ) => {\r\n      const beforeName: string = `before${measurementName}`;\r\n      ts.performance.mark(beforeName);\r\n      const resultPromise: Promise<TResult> = fn();\r\n      const result: TResult = await resultPromise;\r\n      const afterName: string = `after${measurementName}`;\r\n      ts.performance.mark(afterName);\r\n      ts.performance.measure(measurementName, beforeName, afterName);\r\n      return {\r\n        ...result,\r\n        duration: ts.performance.getDuration(measurementName)\r\n      };\r\n    };\r\n\r\n    let tslint: Tslint | undefined = undefined;\r\n    if (this._tslintEnabled) {\r\n      if (!this._configuration.tslintToolPath) {\r\n        throw new Error('Unable to resolve \"tslint\" package');\r\n      }\r\n\r\n      const tslintLogger: IScopedLogger = await this.requestScopedLoggerAsync('tslint');\r\n      tslint = new Tslint({\r\n        ts: ts,\r\n        tslintPackagePath: this._configuration.tslintToolPath,\r\n        scopedLogger: tslintLogger,\r\n        buildFolderPath: this._configuration.buildFolder,\r\n        buildCacheFolderPath: this._configuration.buildCacheFolder,\r\n        linterConfigFilePath: this._tslintConfigFilePath,\r\n        cachedFileSystem: this._cachedFileSystem,\r\n        measurePerformance: measureTsPerformance\r\n      });\r\n    }\r\n\r\n    let eslint: Eslint | undefined = undefined;\r\n    if (this._eslintEnabled) {\r\n      if (!this._configuration.eslintToolPath) {\r\n        throw new Error('Unable to resolve \"eslint\" package');\r\n      }\r\n\r\n      const eslintLogger: IScopedLogger = await this.requestScopedLoggerAsync('eslint');\r\n      eslint = new Eslint({\r\n        ts: ts,\r\n        eslintPackagePath: this._configuration.eslintToolPath,\r\n        scopedLogger: eslintLogger,\r\n        buildFolderPath: this._configuration.buildFolder,\r\n        buildCacheFolderPath: this._configuration.buildCacheFolder,\r\n        linterConfigFilePath: this._eslintConfigFilePath,\r\n        measurePerformance: measureTsPerformance\r\n      });\r\n    }\r\n\r\n    this._typescriptTerminal.writeLine(`Using TypeScript version ${ts.version}`);\r\n\r\n    if (eslint) {\r\n      eslint.printVersionHeader();\r\n    }\r\n\r\n    if (tslint) {\r\n      tslint.printVersionHeader();\r\n    }\r\n\r\n    if (this._configuration.watchMode) {\r\n      await this._runWatch(ts, measureTsPerformance);\r\n    } else {\r\n      await this._runBuild(ts, eslint, tslint, measureTsPerformance, measureTsPerformanceAsync);\r\n    }\r\n  }\r\n\r\n  public async _runWatch(ts: ExtendedTypeScript, measureTsPerformance: PerformanceMeasurer): Promise<void> {\r\n    //#region CONFIGURE\r\n    const {\r\n      duration: configureDurationMs,\r\n      tsconfig,\r\n      compilerHost\r\n    } = measureTsPerformance('Configure', () => {\r\n      const _tsconfig: TTypescript.ParsedCommandLine = this._loadTsconfig(ts);\r\n      const _compilerHost: TWatchCompilerHost = this._buildWatchCompilerHost(ts, _tsconfig);\r\n      return {\r\n        tsconfig: _tsconfig,\r\n        compilerHost: _compilerHost\r\n      };\r\n    });\r\n    this._typescriptTerminal.writeVerboseLine(`Configure: ${configureDurationMs}ms`);\r\n    //#endregion\r\n\r\n    this._validateTsconfig(ts, tsconfig);\r\n\r\n    EmitFilesPatch.install(ts, tsconfig, this._moduleKindsToEmit, /* useBuildCache */ false);\r\n\r\n    ts.createWatchProgram(compilerHost);\r\n\r\n    return new Promise(() => {\r\n      /* never terminate */\r\n    });\r\n  }\r\n\r\n  public async _runBuild(\r\n    ts: ExtendedTypeScript,\r\n    eslint: Eslint | undefined,\r\n    tslint: Tslint | undefined,\r\n    measureTsPerformance: PerformanceMeasurer,\r\n    measureTsPerformanceAsync: PerformanceMeasurerAsync\r\n  ): Promise<void> {\r\n    // Ensure the cache folder exists\r\n    this._cachedFileSystem.ensureFolder(this._configuration.buildCacheFolder);\r\n\r\n    //#region CONFIGURE\r\n    const {\r\n      duration: configureDurationMs,\r\n      tsconfig,\r\n      compilerHost\r\n    } = measureTsPerformance('Configure', () => {\r\n      this._overrideTypeScriptReadJson(ts);\r\n      const _tsconfig: TTypescript.ParsedCommandLine = this._loadTsconfig(ts);\r\n      const _compilerHost: TTypescript.CompilerHost = this._buildIncrementalCompilerHost(ts, _tsconfig);\r\n      return {\r\n        tsconfig: _tsconfig,\r\n        compilerHost: _compilerHost\r\n      };\r\n    });\r\n    this._typescriptTerminal.writeVerboseLine(`Configure: ${configureDurationMs}ms`);\r\n    //#endregion\r\n\r\n    this._validateTsconfig(ts, tsconfig);\r\n\r\n    //#region PROGRAM\r\n    // There will be only one program here; emit will get a bit abused if we produce multiple outputs\r\n    let builderProgram: TTypescript.BuilderProgram | undefined = undefined;\r\n    let tsProgram: TTypescript.Program;\r\n\r\n    if (this._useIncrementalProgram) {\r\n      builderProgram = ts.createIncrementalProgram({\r\n        rootNames: tsconfig.fileNames,\r\n        options: tsconfig.options,\r\n        projectReferences: tsconfig.projectReferences,\r\n        host: compilerHost,\r\n        configFileParsingDiagnostics: ts.getConfigFileParsingDiagnostics(tsconfig)\r\n      });\r\n      tsProgram = builderProgram.getProgram();\r\n    } else {\r\n      tsProgram = ts.createProgram({\r\n        rootNames: tsconfig.fileNames,\r\n        options: tsconfig.options,\r\n        projectReferences: tsconfig.projectReferences,\r\n        host: compilerHost,\r\n        configFileParsingDiagnostics: ts.getConfigFileParsingDiagnostics(tsconfig)\r\n      });\r\n    }\r\n\r\n    // Prefer the builder program, since it is what gives us incremental builds\r\n    const genericProgram: TTypescript.BuilderProgram | TTypescript.Program = builderProgram || tsProgram;\r\n\r\n    this._typescriptTerminal.writeVerboseLine(\r\n      `I/O Read: ${ts.performance.getDuration('I/O Read')}ms (${ts.performance.getCount(\r\n        'beforeIORead'\r\n      )} files)`\r\n    );\r\n    this._typescriptTerminal.writeVerboseLine(\r\n      `Parse: ${ts.performance.getDuration('Parse')}ms (${ts.performance.getCount('beforeParse')} files)`\r\n    );\r\n    this._typescriptTerminal.writeVerboseLine(\r\n      `Program (includes Read + Parse): ${ts.performance.getDuration('Program')}ms`\r\n    );\r\n    //#endregion\r\n\r\n    //#region ANALYSIS\r\n    const { duration: diagnosticsDurationMs, diagnostics: preDiagnostics } = measureTsPerformance(\r\n      'Analyze',\r\n      () => {\r\n        const rawDiagnostics: TTypescript.Diagnostic[] = [\r\n          ...genericProgram.getConfigFileParsingDiagnostics(),\r\n          ...genericProgram.getOptionsDiagnostics(),\r\n          ...genericProgram.getSyntacticDiagnostics(),\r\n          ...genericProgram.getGlobalDiagnostics(),\r\n          ...genericProgram.getSemanticDiagnostics()\r\n        ];\r\n        return { diagnostics: rawDiagnostics };\r\n      }\r\n    );\r\n    this._typescriptTerminal.writeVerboseLine(`Analyze: ${diagnosticsDurationMs}ms`);\r\n    //#endregion\r\n\r\n    //#region EMIT\r\n    const emitResult: IExtendedEmitResult = this._emit(ts, tsconfig, genericProgram);\r\n    //#endregion\r\n\r\n    this._typescriptTerminal.writeVerboseLine(`Bind: ${ts.performance.getDuration('Bind')}ms`);\r\n    this._typescriptTerminal.writeVerboseLine(`Check: ${ts.performance.getDuration('Check')}ms`);\r\n    this._typescriptTerminal.writeVerboseLine(\r\n      `Transform: ${ts.performance.getDuration('transformTime')}ms ` +\r\n        `(${ts.performance.getCount('beforeTransform')} files)`\r\n    );\r\n    this._typescriptTerminal.writeVerboseLine(\r\n      `Print: ${ts.performance.getDuration('printTime')}ms ` +\r\n        `(${ts.performance.getCount('beforePrint')} files) (Includes Transform)`\r\n    );\r\n    this._typescriptTerminal.writeVerboseLine(\r\n      `Emit: ${ts.performance.getDuration('Emit')}ms (Includes Print)`\r\n    );\r\n\r\n    //#region FINAL_ANALYSIS\r\n    // Need to ensure that we include emit diagnostics, since they might not be part of the other sets\r\n    const { duration: mergeDiagnosticDurationMs, diagnostics } = measureTsPerformance('Diagnostics', () => {\r\n      const rawDiagnostics: TTypescript.Diagnostic[] = [...preDiagnostics, ...emitResult.diagnostics];\r\n      return { diagnostics: ts.sortAndDeduplicateDiagnostics(rawDiagnostics) };\r\n    });\r\n    this._typescriptTerminal.writeVerboseLine(`Diagnostics: ${mergeDiagnosticDurationMs}ms`);\r\n    //#endregion\r\n\r\n    //#region WRITE\r\n    const writePromise: Promise<{ duration: number }> = measureTsPerformanceAsync('Write', () =>\r\n      Async.forEachLimitAsync(\r\n        emitResult.filesToWrite,\r\n        this._configuration.maxWriteParallelism,\r\n        async ({ filePath, data }) =>\r\n          this._cachedFileSystem.writeFile(filePath, data, { ensureFolderExists: true })\r\n      )\r\n    );\r\n    //#endregion\r\n\r\n    const typeScriptFilenames: Set<string> = new Set(tsconfig.fileNames);\r\n\r\n    const extendedProgram: IExtendedProgram = tsProgram as IExtendedProgram;\r\n\r\n    //#region ESLINT\r\n    if (eslint) {\r\n      await eslint.performLintingAsync({\r\n        tsProgram: extendedProgram,\r\n        typeScriptFilenames: typeScriptFilenames,\r\n        changedFiles: emitResult.changedSourceFiles\r\n      });\r\n    }\r\n    //#endregion\r\n\r\n    //#region TSLINT\r\n    if (tslint) {\r\n      await tslint.performLintingAsync({\r\n        tsProgram: extendedProgram,\r\n        typeScriptFilenames: typeScriptFilenames,\r\n        changedFiles: emitResult.changedSourceFiles\r\n      });\r\n    }\r\n    //#endregion\r\n\r\n    const { duration: writeDuration } = await writePromise;\r\n    this._typescriptTerminal.writeVerboseLine(\r\n      `I/O Write: ${writeDuration}ms (${emitResult.filesToWrite.length} files)`\r\n    );\r\n\r\n    //#region HARDLINK/COPY\r\n    const shouldHardlink: boolean = this._configuration.copyFromCacheMode !== 'copy';\r\n    const { duration: hardlinkDuration, linkCount: hardlinkCount } = await measureTsPerformanceAsync(\r\n      shouldHardlink ? 'Hardlink' : 'CopyFromCache',\r\n      async () => {\r\n        const commonSourceDirectory: string = extendedProgram.getCommonSourceDirectory();\r\n        const linkPromises: Promise<void>[] = [];\r\n        let linkCount: number = 0;\r\n\r\n        const resolverHost: IResolveModuleNameResolutionHost = {\r\n          getCurrentDirectory: () => compilerHost.getCurrentDirectory(),\r\n          getCommonSourceDirectory: () => commonSourceDirectory,\r\n          getCanonicalFileName: (filename: string) => compilerHost.getCanonicalFileName(filename)\r\n        };\r\n\r\n        let queueLinkOrCopy: (options: IFileSystemCreateLinkOptions) => void;\r\n        if (shouldHardlink) {\r\n          queueLinkOrCopy = (options: IFileSystemCreateLinkOptions) => {\r\n            linkPromises.push(\r\n              this._cachedFileSystem\r\n                .createHardLinkAsync({ ...options, alreadyExistsBehavior: AlreadyExistsBehavior.Ignore })\r\n                .then(() => {\r\n                  linkCount++;\r\n                })\r\n                .catch((error) => {\r\n                  if (!FileSystem.isNotExistError(error)) {\r\n                    // Only re-throw errors that aren't not-exist errors\r\n                    throw error;\r\n                  }\r\n                })\r\n            );\r\n          };\r\n        } else {\r\n          queueLinkOrCopy = (options: IFileSystemCreateLinkOptions) => {\r\n            linkPromises.push(\r\n              this._cachedFileSystem\r\n                .copyFileAsync({\r\n                  sourcePath: options.linkTargetPath,\r\n                  destinationPath: options.newLinkPath\r\n                })\r\n                .then(() => {\r\n                  linkCount++;\r\n                })\r\n                .catch((error) => {\r\n                  if (!FileSystem.isNotExistError(error)) {\r\n                    // Only re-throw errors that aren't not-exist errors\r\n                    throw error;\r\n                  }\r\n                })\r\n            );\r\n          };\r\n        }\r\n\r\n        for (const sourceFile of genericProgram.getSourceFiles()) {\r\n          const filename: string = sourceFile.fileName;\r\n          if (typeScriptFilenames.has(filename)) {\r\n            const relativeFilenameWithoutExtension: string = ts.removeFileExtension(\r\n              ts.getExternalModuleNameFromPath(resolverHost, filename)\r\n            );\r\n\r\n            for (const { cacheOutFolderPath, outFolderPath, jsExtensionOverride = '.js', isPrimary } of this\r\n              ._moduleKindsToEmit) {\r\n              // Only primary module kinds emit declarations\r\n              if (isPrimary) {\r\n                if (tsconfig.options.declarationMap) {\r\n                  const dtsMapFilename: string = `${relativeFilenameWithoutExtension}.d.ts.map`;\r\n                  queueLinkOrCopy({\r\n                    linkTargetPath: path.join(cacheOutFolderPath, dtsMapFilename),\r\n                    newLinkPath: path.join(outFolderPath, dtsMapFilename)\r\n                  });\r\n                }\r\n\r\n                if (tsconfig.options.declaration) {\r\n                  const dtsFilename: string = `${relativeFilenameWithoutExtension}.d.ts`;\r\n                  queueLinkOrCopy({\r\n                    linkTargetPath: path.join(cacheOutFolderPath, dtsFilename),\r\n                    newLinkPath: path.join(outFolderPath, dtsFilename)\r\n                  });\r\n                }\r\n              }\r\n\r\n              if (tsconfig.options.sourceMap && !sourceFile.isDeclarationFile) {\r\n                const jsMapFilename: string = `${relativeFilenameWithoutExtension}${jsExtensionOverride}.map`;\r\n                queueLinkOrCopy({\r\n                  linkTargetPath: path.join(cacheOutFolderPath, jsMapFilename),\r\n                  newLinkPath: path.join(outFolderPath, jsMapFilename)\r\n                });\r\n              }\r\n\r\n              // Write the .js file last in case something is watching its timestamp\r\n              if (!sourceFile.isDeclarationFile) {\r\n                const jsFilename: string = `${relativeFilenameWithoutExtension}${jsExtensionOverride}`;\r\n                queueLinkOrCopy({\r\n                  linkTargetPath: path.join(cacheOutFolderPath, jsFilename),\r\n                  newLinkPath: path.join(outFolderPath, jsFilename)\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        await Promise.all(linkPromises);\r\n\r\n        return { linkCount };\r\n      }\r\n    );\r\n\r\n    this._typescriptTerminal.writeVerboseLine(\r\n      `${shouldHardlink ? 'Hardlink' : 'Copy from cache'}: ${hardlinkDuration}ms (${hardlinkCount} files)`\r\n    );\r\n\r\n    // In non-watch mode, notify EmitCompletedCallbackManager once after we complete the compile step\r\n    this._emitCompletedCallbackManager.callback();\r\n    //#endregion\r\n\r\n    let typeScriptErrorCount: number = 0;\r\n    if (diagnostics.length > 0) {\r\n      this._typescriptTerminal.writeLine(\r\n        `Encountered ${diagnostics.length} TypeScript issue${diagnostics.length > 1 ? 's' : ''}:`\r\n      );\r\n      for (const diagnostic of diagnostics) {\r\n        const diagnosticCategory: TTypescript.DiagnosticCategory = this._getAdjustedDiagnosticCategory(\r\n          diagnostic,\r\n          ts\r\n        );\r\n\r\n        if (diagnosticCategory === ts.DiagnosticCategory.Error) {\r\n          typeScriptErrorCount++;\r\n        }\r\n\r\n        this._printDiagnosticMessage(ts, diagnostic, diagnosticCategory);\r\n      }\r\n    }\r\n\r\n    if (eslint) {\r\n      eslint.reportFailures();\r\n    }\r\n\r\n    if (tslint) {\r\n      tslint.reportFailures();\r\n    }\r\n\r\n    if (typeScriptErrorCount > 0) {\r\n      throw new Error(`Encountered TypeScript error${typeScriptErrorCount > 1 ? 's' : ''}`);\r\n    }\r\n  }\r\n\r\n  private _printDiagnosticMessage(\r\n    ts: ExtendedTypeScript,\r\n    diagnostic: TTypescript.Diagnostic,\r\n    diagnosticCategory: TTypescript.DiagnosticCategory = this._getAdjustedDiagnosticCategory(diagnostic, ts)\r\n  ): void {\r\n    // Code taken from reference example\r\n    let diagnosticMessage: string;\r\n    let errorObject: Error;\r\n    if (diagnostic.file) {\r\n      const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);\r\n      const message: string = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\r\n      const buildFolderRelativeFilename: string = path.relative(\r\n        this._configuration.buildFolder,\r\n        diagnostic.file.fileName\r\n      );\r\n      const formattedMessage: string = `(TS${diagnostic.code}) ${message}`;\r\n      errorObject = new FileError(formattedMessage, buildFolderRelativeFilename, line + 1, character + 1);\r\n      diagnosticMessage = errorObject.toString();\r\n    } else {\r\n      diagnosticMessage = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\r\n      errorObject = new Error(diagnosticMessage);\r\n    }\r\n\r\n    switch (diagnosticCategory) {\r\n      case ts.DiagnosticCategory.Error: {\r\n        this._typescriptLogger.emitError(errorObject);\r\n        break;\r\n      }\r\n\r\n      case ts.DiagnosticCategory.Warning: {\r\n        this._typescriptLogger.emitWarning(errorObject);\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        this._typescriptTerminal.writeLine(...diagnosticMessage);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _getAdjustedDiagnosticCategory(\r\n    diagnostic: TTypescript.Diagnostic,\r\n    ts: ExtendedTypeScript\r\n  ): TTypescript.DiagnosticCategory {\r\n    // Workaround for https://github.com/microsoft/TypeScript/issues/40058\r\n    // The compiler reports a hard error for issues such as this:\r\n    //\r\n    //    error TS6133: 'x' is declared but its value is never read.\r\n    //\r\n    // These should properly be treated as warnings, because they are purely cosmetic issues.\r\n    // TODO: Maybe heft should provide a config file for managing DiagnosticCategory mappings.\r\n    if (diagnostic.reportsUnnecessary && diagnostic.category === ts.DiagnosticCategory.Error) {\r\n      return ts.DiagnosticCategory.Warning;\r\n    }\r\n\r\n    // These pedantic checks also should not be treated as hard errors\r\n    switch (diagnostic.code) {\r\n      case ts.Diagnostics.Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor\r\n        .code:\r\n      case ts.Diagnostics\r\n        .Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1.code:\r\n        return ts.DiagnosticCategory.Warning;\r\n    }\r\n\r\n    return diagnostic.category;\r\n  }\r\n\r\n  private _emit(\r\n    ts: ExtendedTypeScript,\r\n    tsconfig: TTypescript.ParsedCommandLine,\r\n    genericProgram: TTypescript.BuilderProgram | TTypescript.Program\r\n  ): IExtendedEmitResult {\r\n    const filesToWrite: IFileToWrite[] = [];\r\n\r\n    const changedFiles: Set<IExtendedSourceFile> = new Set<IExtendedSourceFile>();\r\n    EmitFilesPatch.install(ts, tsconfig, this._moduleKindsToEmit, /* useBuildCache */ true, changedFiles);\r\n\r\n    const writeFileCallback: TTypescript.WriteFileCallback = (filePath: string, data: string) => {\r\n      const redirectedFilePath: string = EmitFilesPatch.getRedirectedFilePath(filePath);\r\n      filesToWrite.push({ filePath: redirectedFilePath, data });\r\n    };\r\n\r\n    const result: TTypescript.EmitResult = genericProgram.emit(\r\n      undefined, // Target source file\r\n      writeFileCallback\r\n    );\r\n\r\n    EmitFilesPatch.uninstall(ts);\r\n\r\n    return {\r\n      ...result,\r\n      changedSourceFiles: changedFiles,\r\n      filesToWrite\r\n    };\r\n  }\r\n\r\n  private _validateTsconfig(ts: ExtendedTypeScript, tsconfig: TTypescript.ParsedCommandLine): void {\r\n    if (\r\n      (tsconfig.options.module && !tsconfig.options.outDir) ||\r\n      (!tsconfig.options.module && tsconfig.options.outDir)\r\n    ) {\r\n      throw new Error(\r\n        'If either the module or the outDir option is provided in the tsconfig compilerOptions, both must be provided'\r\n      );\r\n    }\r\n\r\n    this._moduleKindsToEmit = [];\r\n    const specifiedKinds: Map<TTypescript.ModuleKind, IModuleKindReason> = new Map();\r\n    const specifiedOutDirs: Map<string, IModuleKindReason> = new Map();\r\n\r\n    if (!tsconfig.options.module) {\r\n      throw new Error(\r\n        'If the module tsconfig compilerOption is not provided, the builder must be provided with the ' +\r\n          'additionalModuleKindsToEmit configuration option.'\r\n      );\r\n    }\r\n\r\n    if (this._configuration.emitCjsExtensionForCommonJS) {\r\n      this._addModuleKindToEmit(\r\n        ts.ModuleKind.CommonJS,\r\n        tsconfig.options.outDir!,\r\n        /* isPrimary */ tsconfig.options.module === ts.ModuleKind.CommonJS,\r\n        '.cjs'\r\n      );\r\n\r\n      const cjsReason: IModuleKindReason = {\r\n        outDir: tsconfig.options.outDir!,\r\n        kind: 'CommonJS',\r\n        extension: '.cjs',\r\n        reason: 'emitCjsExtensionForCommonJS'\r\n      };\r\n\r\n      specifiedKinds.set(ts.ModuleKind.CommonJS, cjsReason);\r\n      specifiedOutDirs.set(`${tsconfig.options.outDir!}:.cjs`, cjsReason);\r\n    }\r\n\r\n    if (this._configuration.emitMjsExtensionForESModule) {\r\n      this._addModuleKindToEmit(\r\n        ts.ModuleKind.ESNext,\r\n        tsconfig.options.outDir!,\r\n        /* isPrimary */ tsconfig.options.module === ts.ModuleKind.ESNext,\r\n        '.mjs'\r\n      );\r\n\r\n      const mjsReason: IModuleKindReason = {\r\n        outDir: tsconfig.options.outDir!,\r\n        kind: 'ESNext',\r\n        extension: '.mjs',\r\n        reason: 'emitMjsExtensionForESModule'\r\n      };\r\n\r\n      specifiedKinds.set(ts.ModuleKind.CommonJS, mjsReason);\r\n      specifiedOutDirs.set(`${tsconfig.options.outDir!}:.mjs`, mjsReason);\r\n    }\r\n\r\n    if (!specifiedKinds.has(tsconfig.options.module)) {\r\n      this._addModuleKindToEmit(\r\n        tsconfig.options.module,\r\n        tsconfig.options.outDir!,\r\n        /* isPrimary */ true,\r\n        /* jsExtensionOverride */ undefined\r\n      );\r\n\r\n      const tsConfigReason: IModuleKindReason = {\r\n        outDir: tsconfig.options.outDir!,\r\n        kind: ts.ModuleKind[tsconfig.options.module] as keyof typeof TTypescript.ModuleKind,\r\n        extension: '.js',\r\n        reason: 'tsconfig.json'\r\n      };\r\n\r\n      specifiedKinds.set(tsconfig.options.module, tsConfigReason);\r\n      specifiedOutDirs.set(`${tsconfig.options.outDir!}:.js`, tsConfigReason);\r\n    }\r\n\r\n    if (this._configuration.additionalModuleKindsToEmit) {\r\n      for (const additionalModuleKindToEmit of this._configuration.additionalModuleKindsToEmit) {\r\n        const moduleKind: TTypescript.ModuleKind = this._parseModuleKind(\r\n          ts,\r\n          additionalModuleKindToEmit.moduleKind\r\n        );\r\n\r\n        const outDirKey: string = `${additionalModuleKindToEmit.outFolderName}:.js`;\r\n        const moduleKindReason: IModuleKindReason = {\r\n          kind: ts.ModuleKind[moduleKind] as keyof typeof TTypescript.ModuleKind,\r\n          outDir: additionalModuleKindToEmit.outFolderName,\r\n          extension: '.js',\r\n          reason: `additionalModuleKindsToEmit`\r\n        };\r\n\r\n        const existingKind: IModuleKindReason | undefined = specifiedKinds.get(moduleKind);\r\n        const existingDir: IModuleKindReason | undefined = specifiedOutDirs.get(outDirKey);\r\n\r\n        if (existingKind) {\r\n          throw new Error(\r\n            `Module kind \"${additionalModuleKindToEmit.moduleKind}\" is already emitted at ${existingKind.outDir} with extension '${existingKind.extension}' by option ${existingKind.reason}.`\r\n          );\r\n        } else if (existingDir) {\r\n          throw new Error(\r\n            `Output folder \"${additionalModuleKindToEmit.outFolderName}\" already contains module kind ${existingDir.kind} with extension '${existingDir.extension}', specified by option ${existingDir.reason}.`\r\n          );\r\n        } else {\r\n          const outFolderKey: string | undefined = this._addModuleKindToEmit(\r\n            moduleKind,\r\n            additionalModuleKindToEmit.outFolderName,\r\n            /* isPrimary */ false,\r\n            undefined\r\n          );\r\n\r\n          if (outFolderKey) {\r\n            specifiedKinds.set(moduleKind, moduleKindReason);\r\n            specifiedOutDirs.set(outFolderKey, moduleKindReason);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _addModuleKindToEmit(\r\n    moduleKind: TTypescript.ModuleKind,\r\n    outFolderPath: string,\r\n    isPrimary: boolean,\r\n    jsExtensionOverride: string | undefined\r\n  ): string | undefined {\r\n    let outFolderName: string;\r\n    if (path.isAbsolute(outFolderPath)) {\r\n      outFolderName = path.relative(this._configuration.buildFolder, outFolderPath);\r\n    } else {\r\n      outFolderName = outFolderPath;\r\n      outFolderPath = path.resolve(this._configuration.buildFolder, outFolderPath);\r\n    }\r\n\r\n    outFolderPath = Path.convertToSlashes(outFolderPath);\r\n    outFolderPath = outFolderPath.replace(/\\/*$/, '/'); // Ensure the outFolderPath ends with a slash\r\n\r\n    for (const existingModuleKindToEmit of this._moduleKindsToEmit) {\r\n      let errorText: string | undefined;\r\n\r\n      if (existingModuleKindToEmit.outFolderPath === outFolderPath) {\r\n        if (existingModuleKindToEmit.jsExtensionOverride === jsExtensionOverride) {\r\n          errorText =\r\n            'Unable to output two different module kinds with the same ' +\r\n            `module extension (${jsExtensionOverride || '.js'}) to the same ` +\r\n            `folder (\"${outFolderPath}\").`;\r\n        }\r\n      } else {\r\n        let parentFolder: string | undefined;\r\n        let childFolder: string | undefined;\r\n        if (outFolderPath.startsWith(existingModuleKindToEmit.outFolderPath)) {\r\n          parentFolder = outFolderPath;\r\n          childFolder = existingModuleKindToEmit.outFolderPath;\r\n        } else if (existingModuleKindToEmit.outFolderPath.startsWith(outFolderPath)) {\r\n          parentFolder = existingModuleKindToEmit.outFolderPath;\r\n          childFolder = outFolderPath;\r\n        }\r\n\r\n        if (parentFolder) {\r\n          errorText =\r\n            'Unable to output two different module kinds to nested folders ' +\r\n            `(\"${parentFolder}\" and \"${childFolder}\").`;\r\n        }\r\n      }\r\n\r\n      if (errorText) {\r\n        this._typescriptLogger.emitError(new Error(errorText));\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    this._moduleKindsToEmit.push({\r\n      outFolderPath,\r\n      moduleKind,\r\n      cacheOutFolderPath: Path.convertToSlashes(\r\n        path.resolve(this._configuration.buildCacheFolder, outFolderName)\r\n      ),\r\n      jsExtensionOverride,\r\n\r\n      isPrimary\r\n    });\r\n\r\n    return `${outFolderName}:${jsExtensionOverride || '.js'}`;\r\n  }\r\n\r\n  private _loadTsconfig(ts: ExtendedTypeScript): TTypescript.ParsedCommandLine {\r\n    const parsedConfigFile: ReturnType<typeof ts.readConfigFile> = ts.readConfigFile(\r\n      this._configuration.tsconfigPath,\r\n      this._cachedFileSystem.readFile\r\n    );\r\n    const currentFolder: string = path.dirname(this._configuration.tsconfigPath);\r\n    const tsconfig: TTypescript.ParsedCommandLine = ts.parseJsonConfigFileContent(\r\n      parsedConfigFile.config,\r\n      {\r\n        fileExists: this._cachedFileSystem.exists,\r\n        readFile: this._cachedFileSystem.readFile,\r\n        readDirectory: (\r\n          folderPath: string,\r\n          extensions?: ReadonlyArray<string>,\r\n          excludes?: ReadonlyArray<string>,\r\n          includes?: ReadonlyArray<string>,\r\n          depth?: number\r\n        ) =>\r\n          ts.matchFiles(\r\n            folderPath,\r\n            extensions,\r\n            excludes,\r\n            includes,\r\n            /* useCaseSensitiveFileNames */ true,\r\n            currentFolder,\r\n            depth,\r\n            this._cachedFileSystem.readFolderFilesAndDirectories.bind(this._cachedFileSystem),\r\n            this._cachedFileSystem.getRealPath.bind(this._cachedFileSystem)\r\n          ),\r\n        useCaseSensitiveFileNames: true\r\n      },\r\n      currentFolder\r\n    );\r\n\r\n    if (this._useIncrementalProgram) {\r\n      tsconfig.options.incremental = true;\r\n      tsconfig.options.tsBuildInfoFile = this._tsCacheFilePath;\r\n    }\r\n\r\n    return tsconfig;\r\n  }\r\n\r\n  private _buildIncrementalCompilerHost(\r\n    ts: ExtendedTypeScript,\r\n    tsconfig: TTypescript.ParsedCommandLine\r\n  ): TTypescript.CompilerHost {\r\n    let compilerHost: TTypescript.CompilerHost;\r\n\r\n    if (this._useIncrementalProgram) {\r\n      compilerHost = ts.createIncrementalCompilerHost(tsconfig.options);\r\n    } else {\r\n      compilerHost = ts.createCompilerHost(tsconfig.options);\r\n    }\r\n\r\n    compilerHost.realpath = this._cachedFileSystem.getRealPath.bind(this._cachedFileSystem);\r\n    compilerHost.readFile = (filePath: string) => {\r\n      try {\r\n        return this._cachedFileSystem.readFile(filePath, {});\r\n      } catch (error) {\r\n        if (FileSystem.isNotExistError(error)) {\r\n          return undefined;\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    };\r\n    compilerHost.fileExists = this._cachedFileSystem.exists.bind(this._cachedFileSystem);\r\n    compilerHost.directoryExists = (directoryPath: string) => {\r\n      try {\r\n        const stats: FileSystemStats = this._cachedFileSystem.getStatistics(directoryPath);\r\n        return stats.isDirectory() || stats.isSymbolicLink();\r\n      } catch (error) {\r\n        if (FileSystem.isNotExistError(error)) {\r\n          return false;\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    };\r\n    compilerHost.getDirectories = (folderPath: string) =>\r\n      this._cachedFileSystem.readFolderFilesAndDirectories(folderPath).directories;\r\n\r\n    /* Use the Heft config's build folder because it has corrected casing */\r\n    compilerHost.getCurrentDirectory = () => this._configuration.buildFolder;\r\n    return compilerHost;\r\n  }\r\n\r\n  private _buildWatchCompilerHost(\r\n    ts: ExtendedTypeScript,\r\n    tsconfig: TTypescript.ParsedCommandLine\r\n  ): TWatchCompilerHost {\r\n    return ts.createWatchCompilerHost(\r\n      tsconfig.fileNames,\r\n      tsconfig.options,\r\n      ts.sys,\r\n      (\r\n        rootNames: ReadonlyArray<string> | undefined,\r\n        options: TTypescript.CompilerOptions | undefined,\r\n        compilerHost?: TTypescript.CompilerHost,\r\n        oldProgram?: TTypescript.EmitAndSemanticDiagnosticsBuilderProgram,\r\n        configFileParsingDiagnostics?: ReadonlyArray<TTypescript.Diagnostic>,\r\n        projectReferences?: ReadonlyArray<TTypescript.ProjectReference> | undefined\r\n      ) => {\r\n        if (compilerHost === undefined) {\r\n          throw new InternalError('_buildWatchCompilerHost() expects a compilerHost to be configured');\r\n        }\r\n\r\n        const originalWriteFile: TTypescript.WriteFileCallback = compilerHost.writeFile;\r\n        compilerHost.writeFile = (\r\n          filePath: string,\r\n          // Do this with a \"rest\" argument in case the TS API changes\r\n          ...rest: [\r\n            string,\r\n            boolean,\r\n            ((message: string) => void) | undefined,\r\n            readonly TTypescript.SourceFile[] | undefined\r\n          ]\r\n        ) => {\r\n          const redirectedFilePath: string = EmitFilesPatch.getRedirectedFilePath(filePath);\r\n          originalWriteFile.call(this, redirectedFilePath, ...rest);\r\n        };\r\n\r\n        return ts.createEmitAndSemanticDiagnosticsBuilderProgram(\r\n          rootNames,\r\n          options,\r\n          compilerHost,\r\n          oldProgram,\r\n          configFileParsingDiagnostics,\r\n          projectReferences\r\n        );\r\n      },\r\n      (diagnostic: TTypescript.Diagnostic) => this._printDiagnosticMessage(ts, diagnostic),\r\n      (diagnostic: TTypescript.Diagnostic) => {\r\n        this._printDiagnosticMessage(ts, diagnostic);\r\n\r\n        // In watch mode, notify EmitCompletedCallbackManager every time we finish recompiling.\r\n        if (\r\n          diagnostic.code === ts.Diagnostics.Found_0_errors_Watching_for_file_changes.code ||\r\n          diagnostic.code === ts.Diagnostics.Found_1_error_Watching_for_file_changes.code\r\n        ) {\r\n          this._emitCompletedCallbackManager.callback();\r\n        }\r\n      },\r\n      tsconfig.projectReferences\r\n    );\r\n  }\r\n\r\n  private _overrideTypeScriptReadJson(ts: ExtendedTypeScript): void {\r\n    ts.readJson = (filePath: string) => {\r\n      let jsonData: object | undefined = this._tsReadJsonCache.get(filePath);\r\n      if (jsonData) {\r\n        return jsonData;\r\n      } else {\r\n        try {\r\n          const fileContents: string = this._cachedFileSystem.readFile(filePath);\r\n          if (!fileContents) {\r\n            jsonData = EMPTY_JSON;\r\n          } else {\r\n            const parsedFile: ReturnType<typeof ts.parseConfigFileTextToJson> = ts.parseConfigFileTextToJson(\r\n              filePath,\r\n              fileContents\r\n            );\r\n            if (parsedFile.error) {\r\n              jsonData = EMPTY_JSON;\r\n            } else {\r\n              jsonData = parsedFile.config as object;\r\n            }\r\n          }\r\n        } catch (error) {\r\n          jsonData = EMPTY_JSON;\r\n        }\r\n\r\n        this._tsReadJsonCache.set(filePath, jsonData);\r\n        return jsonData;\r\n      }\r\n    };\r\n  }\r\n\r\n  private _parseModuleKind(ts: ExtendedTypeScript, moduleKindName: string): TTypescript.ModuleKind {\r\n    switch (moduleKindName.toLowerCase()) {\r\n      case 'commonjs':\r\n        return ts.ModuleKind.CommonJS;\r\n\r\n      case 'amd':\r\n        return ts.ModuleKind.AMD;\r\n\r\n      case 'umd':\r\n        return ts.ModuleKind.UMD;\r\n\r\n      case 'system':\r\n        return ts.ModuleKind.System;\r\n\r\n      case 'es2015':\r\n        return ts.ModuleKind.ES2015;\r\n\r\n      case 'esnext':\r\n        return ts.ModuleKind.ESNext;\r\n\r\n      default:\r\n        throw new Error(`\"${moduleKindName}\" is not a valid module kind name.`);\r\n    }\r\n  }\r\n}\r\n"]}