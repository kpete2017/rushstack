{"version":3,"file":"EmitFilesPatch.js","sourceRoot":"","sources":["../../../src/plugins/TypeScriptPlugin/EmitFilesPatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { InternalError } from '@rushstack/node-core-library';\r\nimport type * as TTypescript from 'typescript';\r\nimport {\r\n  ExtendedTypeScript,\r\n  IEmitResolver,\r\n  IEmitHost,\r\n  IEmitTransformers,\r\n  IExtendedSourceFile\r\n} from './internalTypings/TypeScriptInternals';\r\n\r\nexport interface ICachedEmitModuleKind {\r\n  moduleKind: TTypescript.ModuleKind;\r\n\r\n  outFolderPath: string;\r\n\r\n  /**\r\n   * TypeScript's output is placed in the \\<project root\\>/.heft/build-cache folder.\r\n   * This is the the path to the subfolder in the build-cache folder that this emit kind\r\n   * written to.\r\n   */\r\n  cacheOutFolderPath: string;\r\n\r\n  /**\r\n   * File extension to use instead of '.js' for emitted ECMAScript files.\r\n   * For example, '.cjs' to indicate commonjs content, or '.mjs' to indicate ECMAScript modules.\r\n   */\r\n  jsExtensionOverride: string | undefined;\r\n\r\n  /**\r\n   * Set to true if this is the emit kind that is specified in the tsconfig.json.\r\n   * Declarations are only emitted for the primary module kind.\r\n   */\r\n  isPrimary: boolean;\r\n}\r\n\r\nexport class EmitFilesPatch {\r\n  private static _patchedTs: ExtendedTypeScript | undefined = undefined;\r\n\r\n  private static _baseEmitFiles: any | undefined = undefined; // eslint-disable-line\r\n  private static _originalOutDir: string | undefined = undefined;\r\n  private static _redirectedOutDir: string | undefined = undefined;\r\n\r\n  public static install(\r\n    ts: ExtendedTypeScript,\r\n    tsconfig: TTypescript.ParsedCommandLine,\r\n    moduleKindsToEmit: ICachedEmitModuleKind[],\r\n    useBuildCache: boolean,\r\n    changedFiles?: Set<IExtendedSourceFile>\r\n  ): void {\r\n    if (EmitFilesPatch._patchedTs === ts) {\r\n      // We already patched this instance of TS\r\n      return;\r\n    }\r\n\r\n    if (EmitFilesPatch._patchedTs !== undefined) {\r\n      throw new InternalError(\r\n        'EmitFilesPatch.install() cannot be called without first uninstalling the existing patch'\r\n      );\r\n    }\r\n\r\n    EmitFilesPatch._patchedTs = ts;\r\n    EmitFilesPatch._baseEmitFiles = ts.emitFiles;\r\n\r\n    let foundPrimary: boolean = false;\r\n    let defaultModuleKind: TTypescript.ModuleKind;\r\n\r\n    for (const moduleKindToEmit of moduleKindsToEmit) {\r\n      if (moduleKindToEmit.isPrimary) {\r\n        if (foundPrimary) {\r\n          throw new Error('Multiple primary module emit kinds encountered.');\r\n        } else {\r\n          foundPrimary = true;\r\n        }\r\n\r\n        defaultModuleKind = moduleKindToEmit.moduleKind;\r\n      }\r\n    }\r\n\r\n    // Override the underlying file emitter to run itself once for each flavor\r\n    // This is a rather inelegant way to convince the TypeScript compiler not to duplicate parse/link/check\r\n    ts.emitFiles = (\r\n      resolver: IEmitResolver,\r\n      host: IEmitHost,\r\n      targetSourceFile: IExtendedSourceFile | undefined,\r\n      emitTransformers: IEmitTransformers,\r\n      emitOnlyDtsFiles?: boolean,\r\n      onlyBuildInfo?: boolean,\r\n      forceDtsEmit?: boolean\r\n    ): TTypescript.EmitResult => {\r\n      if (onlyBuildInfo || emitOnlyDtsFiles) {\r\n        // There should only be one tsBuildInfo and one set of declaration files\r\n        return EmitFilesPatch._baseEmitFiles(\r\n          resolver,\r\n          host,\r\n          targetSourceFile,\r\n          emitTransformers,\r\n          emitOnlyDtsFiles,\r\n          onlyBuildInfo,\r\n          forceDtsEmit\r\n        );\r\n      } else {\r\n        if (targetSourceFile && changedFiles) {\r\n          changedFiles.add(targetSourceFile);\r\n        }\r\n\r\n        let defaultModuleKindResult: TTypescript.EmitResult;\r\n        let emitSkipped: boolean = false;\r\n        for (const moduleKindToEmit of moduleKindsToEmit) {\r\n          const compilerOptions: TTypescript.CompilerOptions = moduleKindToEmit.isPrimary\r\n            ? {\r\n                ...tsconfig.options\r\n              }\r\n            : {\r\n                ...tsconfig.options,\r\n                module: moduleKindToEmit.moduleKind,\r\n\r\n                // Don't emit declarations for secondary module kinds\r\n                declaration: false,\r\n                declarationMap: false\r\n              };\r\n\r\n          if (!compilerOptions.outDir) {\r\n            throw new InternalError('Expected compilerOptions.outDir to be assigned');\r\n          }\r\n\r\n          // Redirect from \"path/to/lib\" --> \"path/to/.heft/build-cache/lib\"\r\n          EmitFilesPatch._originalOutDir =\r\n            compilerOptions.outDir.replace(/([\\\\\\/]+)$/, '') + '/'; /* Ensure trailing slash */\r\n          EmitFilesPatch._redirectedOutDir = useBuildCache\r\n            ? moduleKindToEmit.cacheOutFolderPath\r\n            : moduleKindToEmit.outFolderPath;\r\n\r\n          const flavorResult: TTypescript.EmitResult = EmitFilesPatch._baseEmitFiles(\r\n            resolver,\r\n            {\r\n              ...host,\r\n              writeFile: EmitFilesPatch.wrapWriteFile(host.writeFile, moduleKindToEmit.jsExtensionOverride),\r\n              getCompilerOptions: () => compilerOptions\r\n            },\r\n            targetSourceFile,\r\n            ts.getTransformers(compilerOptions, undefined, emitOnlyDtsFiles),\r\n            emitOnlyDtsFiles,\r\n            onlyBuildInfo,\r\n            forceDtsEmit\r\n          );\r\n\r\n          emitSkipped = emitSkipped || flavorResult.emitSkipped;\r\n          if (moduleKindToEmit.moduleKind === defaultModuleKind) {\r\n            defaultModuleKindResult = flavorResult;\r\n          }\r\n\r\n          EmitFilesPatch._originalOutDir = undefined;\r\n          EmitFilesPatch._redirectedOutDir = undefined;\r\n          // Should results be aggregated, in case for whatever reason the diagnostics are not the same?\r\n        }\r\n        return {\r\n          ...defaultModuleKindResult!,\r\n          emitSkipped\r\n        };\r\n      }\r\n    };\r\n  }\r\n\r\n  public static get isInstalled(): boolean {\r\n    return this._patchedTs !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Wraps the writeFile callback on the IEmitHost to override the .js extension, if applicable\r\n   */\r\n  public static wrapWriteFile(\r\n    baseWriteFile: TTypescript.WriteFileCallback,\r\n    jsExtensionOverride: string | undefined\r\n  ): TTypescript.WriteFileCallback {\r\n    if (!jsExtensionOverride) {\r\n      return baseWriteFile;\r\n    }\r\n\r\n    const replacementExtension: string = `${jsExtensionOverride}$1`;\r\n    return (\r\n      fileName: string,\r\n      data: string,\r\n      writeBOM: boolean,\r\n      onError?: ((message: string) => void) | undefined,\r\n      sourceFiles?: readonly TTypescript.SourceFile[] | undefined\r\n    ) => {\r\n      return baseWriteFile(\r\n        fileName.replace(/\\.js(\\.map)?$/g, replacementExtension),\r\n        data,\r\n        writeBOM,\r\n        onError,\r\n        sourceFiles\r\n      );\r\n    };\r\n  }\r\n\r\n  public static getRedirectedFilePath(filePath: string): string {\r\n    if (!EmitFilesPatch.isInstalled) {\r\n      throw new InternalError(\r\n        'EmitFilesPatch.getRedirectedFilePath() cannot be used unless the patch is installed'\r\n      );\r\n    }\r\n\r\n    // Redirect from \"path/to/lib\" --> \"path/to/.heft/build-cache/lib\"\r\n    let redirectedFilePath: string = filePath;\r\n    if (EmitFilesPatch._redirectedOutDir !== undefined) {\r\n      if (\r\n        /* This is significantly faster than Path.isUnderOrEqual */\r\n        filePath.startsWith(EmitFilesPatch._originalOutDir!)\r\n      ) {\r\n        redirectedFilePath = path.resolve(\r\n          EmitFilesPatch._redirectedOutDir,\r\n          path.relative(EmitFilesPatch._originalOutDir!, filePath)\r\n        );\r\n      } else {\r\n        // The compiler is writing some other output, for example:\r\n        // ./.heft/build-cache/ts_a7cd263b9f06b2440c0f2b2264746621c192f2e2.json\r\n      }\r\n    }\r\n\r\n    return redirectedFilePath;\r\n  }\r\n\r\n  public static uninstall(ts: ExtendedTypeScript): void {\r\n    if (EmitFilesPatch._patchedTs === undefined) {\r\n      throw new InternalError('EmitFilesPatch.uninstall() cannot be called if no patch was installed');\r\n    }\r\n    if (ts !== EmitFilesPatch._patchedTs) {\r\n      throw new InternalError('EmitFilesPatch.uninstall() called for the wrong object');\r\n    }\r\n\r\n    ts.emitFiles = EmitFilesPatch._baseEmitFiles;\r\n\r\n    EmitFilesPatch._patchedTs = undefined;\r\n    EmitFilesPatch._baseEmitFiles = undefined;\r\n  }\r\n}\r\n"]}