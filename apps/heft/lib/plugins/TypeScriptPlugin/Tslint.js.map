{"version":3,"file":"Tslint.js","sourceRoot":"","sources":["../../../src/plugins/TypeScriptPlugin/Tslint.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport type * as TTslint from 'tslint';\r\nimport * as crypto from 'crypto';\r\nimport { Import, Terminal, JsonFile } from '@rushstack/node-core-library';\r\n\r\nimport { LinterBase, ILinterBaseOptions } from './LinterBase';\r\nimport { IExtendedSourceFile, IExtendedProgram } from './internalTypings/TypeScriptInternals';\r\nimport { IExtendedLinter } from './internalTypings/TslintInternals';\r\nimport { FileError } from '../../pluginFramework/logging/FileError';\r\nimport { TypeScriptCachedFileSystem } from '../../utilities/fileSystem/TypeScriptCachedFileSystem';\r\n\r\ninterface ITslintOptions extends ILinterBaseOptions {\r\n  tslintPackagePath: string;\r\n\r\n  cachedFileSystem: TypeScriptCachedFileSystem;\r\n}\r\n\r\nexport class Tslint extends LinterBase<TTslint.RuleFailure> {\r\n  private readonly _tslint: typeof TTslint;\r\n  private readonly _cachedFileSystem: TypeScriptCachedFileSystem;\r\n\r\n  private _tslintConfiguration!: TTslint.Configuration.IConfigurationFile;\r\n  private _linter!: IExtendedLinter;\r\n  private _enabledRules!: TTslint.IRule[];\r\n  private _ruleSeverityMap!: Map<string, TTslint.RuleSeverity>;\r\n  protected _lintResult!: TTslint.LintResult;\r\n\r\n  public constructor(options: ITslintOptions) {\r\n    super('tslint', options);\r\n\r\n    this._tslint = require(options.tslintPackagePath);\r\n    this._cachedFileSystem = options.cachedFileSystem;\r\n  }\r\n\r\n  /**\r\n   * Returns the sha1 hash of the contents of the config file at the provided path and the\r\n   * the configs files that the referenced file extends.\r\n   *\r\n   * @param previousHash - If supplied, the hash is updated with the contents of the\r\n   * file's extended configs and itself before being returned. Passing a digested hash to\r\n   * this parameter will result in an error.\r\n   */\r\n  public static getConfigHash(\r\n    configFilePath: string,\r\n    terminal: Terminal,\r\n    cachedFileSystem: TypeScriptCachedFileSystem,\r\n    previousHash?: crypto.Hash\r\n  ): crypto.Hash {\r\n    interface IMinimalConfig {\r\n      extends?: string | string[];\r\n    }\r\n\r\n    terminal.writeVerboseLine(`Examining config file \"${configFilePath}\"`);\r\n    // if configFilePath is not a json file, assume that it is a package whose package.json\r\n    // specifies a \"main\" file which is a config file, per the \"extends\" spec of tslint.json, found at\r\n    //  https://palantir.github.io/tslint/usage/configuration/\r\n    if (!configFilePath.endsWith('.json')) {\r\n      configFilePath = Import.resolveModule({\r\n        modulePath: configFilePath,\r\n        baseFolderPath: path.dirname(configFilePath)\r\n      });\r\n    }\r\n    const rawConfig: string = cachedFileSystem.readFile(configFilePath);\r\n    const parsedConfig: IMinimalConfig = JsonFile.parseString(rawConfig);\r\n    const extendsProperty: string | string[] | undefined = parsedConfig.extends;\r\n    let hash: crypto.Hash = previousHash || crypto.createHash('sha1');\r\n\r\n    if (extendsProperty instanceof Array) {\r\n      for (const extendFile of extendsProperty) {\r\n        const extendFilePath: string = Import.resolveModule({\r\n          modulePath: extendFile,\r\n          baseFolderPath: path.dirname(configFilePath)\r\n        });\r\n        hash = Tslint.getConfigHash(extendFilePath, terminal, cachedFileSystem, hash);\r\n      }\r\n    } else if (extendsProperty) {\r\n      // note that if we get here, extendsProperty is a string\r\n      const extendsFullPath: string = Import.resolveModule({\r\n        modulePath: extendsProperty,\r\n        baseFolderPath: path.dirname(configFilePath)\r\n      });\r\n      hash = Tslint.getConfigHash(extendsFullPath, terminal, cachedFileSystem, hash);\r\n    }\r\n\r\n    return hash.update(rawConfig);\r\n  }\r\n\r\n  public printVersionHeader(): void {\r\n    this._terminal.writeLine(`Using TSLint version ${this._tslint.Linter.VERSION}`);\r\n  }\r\n\r\n  public reportFailures(): void {\r\n    if (this._lintResult.failures?.length) {\r\n      this._terminal.writeWarningLine(\r\n        `Encountered ${this._lintResult.failures.length} TSLint issues${\r\n          this._lintResult.failures.length > 1 ? 's' : ''\r\n        }:`\r\n      );\r\n\r\n      for (const tslintFailure of this._lintResult.failures) {\r\n        const buildFolderRelativeFilename: string = path.relative(\r\n          this._buildFolderPath,\r\n          tslintFailure.getFileName()\r\n        );\r\n        const { line, character } = tslintFailure.getStartPosition().getLineAndCharacter();\r\n        const formattedFailure: string = `(${tslintFailure.getRuleName()}) ${tslintFailure.getFailure()}`;\r\n        const errorObject: FileError = new FileError(\r\n          formattedFailure,\r\n          buildFolderRelativeFilename,\r\n          line + 1,\r\n          character + 1\r\n        );\r\n        switch (tslintFailure.getRuleSeverity()) {\r\n          case 'error': {\r\n            this._scopedLogger.emitError(errorObject);\r\n            break;\r\n          }\r\n\r\n          case 'warning': {\r\n            this._scopedLogger.emitWarning(errorObject);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected get cacheVersion(): string {\r\n    const tslintConfigHash: crypto.Hash = Tslint.getConfigHash(\r\n      this._linterConfigFilePath,\r\n      this._terminal,\r\n      this._cachedFileSystem\r\n    );\r\n    const tslintConfigVersion: string = `${this._tslint.Linter.VERSION}_${tslintConfigHash.digest('hex')}`;\r\n\r\n    return tslintConfigVersion;\r\n  }\r\n\r\n  protected async initializeAsync(tsProgram: IExtendedProgram): Promise<void> {\r\n    this._tslintConfiguration = this._tslint.Configuration.loadConfigurationFromPath(\r\n      this._linterConfigFilePath\r\n    );\r\n    this._linter = new this._tslint.Linter(\r\n      {\r\n        fix: false,\r\n        rulesDirectory: this._tslintConfiguration.rulesDirectory\r\n      },\r\n      tsProgram\r\n    ) as unknown as IExtendedLinter;\r\n\r\n    this._enabledRules = this._linter.getEnabledRules(this._tslintConfiguration, false);\r\n\r\n    this._ruleSeverityMap = new Map<string, TTslint.RuleSeverity>(\r\n      this._enabledRules.map((rule): [string, TTslint.RuleSeverity] => [\r\n        rule.getOptions().ruleName,\r\n        rule.getOptions().ruleSeverity\r\n      ])\r\n    );\r\n  }\r\n\r\n  protected lintFile(sourceFile: IExtendedSourceFile): TTslint.RuleFailure[] {\r\n    // Some of this code comes from here:\r\n    // https://github.com/palantir/tslint/blob/24d29e421828348f616bf761adb3892bcdf51662/src/linter.ts#L161-L179\r\n    // Modified to only lint files that have changed and that we care about\r\n    const failures: TTslint.RuleFailure[] = this._linter.getAllFailures(sourceFile, this._enabledRules);\r\n\r\n    for (const failure of failures) {\r\n      const severity: TTslint.RuleSeverity | undefined = this._ruleSeverityMap.get(failure.getRuleName());\r\n      if (severity === undefined) {\r\n        throw new Error(`Severity for rule '${failure.getRuleName()}' not found`);\r\n      }\r\n\r\n      failure.setRuleSeverity(severity);\r\n    }\r\n\r\n    return failures;\r\n  }\r\n\r\n  protected lintingFinished(failures: TTslint.RuleFailure[]): void {\r\n    this._linter.failures = failures;\r\n    this._lintResult = this._linter.getResult();\r\n  }\r\n\r\n  protected async isFileExcludedAsync(filePath: string): Promise<boolean> {\r\n    return this._tslint.Configuration.isFileExcluded(filePath, this._tslintConfiguration);\r\n  }\r\n}\r\n"]}