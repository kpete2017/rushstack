{"version":3,"file":"LinterBase.js","sourceRoot":"","sources":["../../../src/plugins/TypeScriptPlugin/LinterBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Terminal, FileSystem, JsonFile } from '@rushstack/node-core-library';\r\n\r\nimport {\r\n  IExtendedSourceFile,\r\n  IExtendedProgram,\r\n  IExtendedTypeScript\r\n} from './internalTypings/TypeScriptInternals';\r\nimport { PerformanceMeasurer } from '../../utilities/Performance';\r\nimport { IScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\r\n\r\nexport interface ILinterBaseOptions {\r\n  ts: IExtendedTypeScript;\r\n  scopedLogger: IScopedLogger;\r\n  buildFolderPath: string;\r\n  buildCacheFolderPath: string;\r\n  linterConfigFilePath: string;\r\n\r\n  /**\r\n   * A performance measurer for the lint run.\r\n   */\r\n  measurePerformance: PerformanceMeasurer;\r\n}\r\n\r\nexport interface IRunLinterOptions {\r\n  tsProgram: IExtendedProgram;\r\n\r\n  /**\r\n   * All of the files that the TypeScript compiler processed.\r\n   */\r\n  typeScriptFilenames: Set<string>;\r\n\r\n  /**\r\n   * The set of files that TypeScript has compiled since the last compilation.\r\n   */\r\n  changedFiles: Set<IExtendedSourceFile>;\r\n}\r\n\r\nexport interface ITiming {\r\n  duration: number;\r\n  hitCount: number;\r\n}\r\n\r\ninterface ITsLintCacheData {\r\n  /**\r\n   * The TSLint version and a hash of the TSLint config files. If either changes,\r\n   * the cache is invalidated.\r\n   */\r\n  cacheVersion: string;\r\n\r\n  /**\r\n   * This is the result of `Array.from(Map<string, string>)`. The first element of\r\n   * each array item is the file's path and the second element is the file's hash.\r\n   */\r\n  fileVersions: [string, string][];\r\n}\r\n\r\nexport abstract class LinterBase<TLintResult> {\r\n  protected readonly _scopedLogger: IScopedLogger;\r\n  protected readonly _terminal: Terminal;\r\n  protected readonly _buildFolderPath: string;\r\n  protected readonly _buildCacheFolderPath: string;\r\n  protected readonly _linterConfigFilePath: string;\r\n  protected readonly _measurePerformance: PerformanceMeasurer;\r\n\r\n  private readonly _ts: IExtendedTypeScript;\r\n  private readonly _linterName: string;\r\n\r\n  public constructor(linterName: string, options: ILinterBaseOptions) {\r\n    this._scopedLogger = options.scopedLogger;\r\n    this._terminal = this._scopedLogger.terminal;\r\n    this._ts = options.ts;\r\n    this._buildFolderPath = options.buildFolderPath;\r\n    this._buildCacheFolderPath = options.buildCacheFolderPath;\r\n    this._linterConfigFilePath = options.linterConfigFilePath;\r\n    this._linterName = linterName;\r\n    this._measurePerformance = options.measurePerformance;\r\n  }\r\n\r\n  protected abstract get cacheVersion(): string;\r\n\r\n  public abstract printVersionHeader(): void;\r\n\r\n  public async performLintingAsync(options: IRunLinterOptions): Promise<void> {\r\n    await this.initializeAsync(options.tsProgram);\r\n\r\n    const tslintConfigVersion: string = this.cacheVersion;\r\n    const cacheFilePath: string = path.join(this._buildCacheFolderPath, `${this._linterName}.json`);\r\n\r\n    let tslintCacheData: ITsLintCacheData | undefined;\r\n    try {\r\n      tslintCacheData = await JsonFile.loadAsync(cacheFilePath);\r\n    } catch (e) {\r\n      if (FileSystem.isNotExistError(e)) {\r\n        tslintCacheData = undefined;\r\n      } else {\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    const cachedNoFailureFileVersions: Map<string, string> = new Map<string, string>(\r\n      tslintCacheData?.cacheVersion === tslintConfigVersion ? tslintCacheData.fileVersions : []\r\n    );\r\n\r\n    const newNoFailureFileVersions: Map<string, string> = new Map<string, string>();\r\n\r\n    //#region Code from TSLint\r\n    // Some of this code comes from here:\r\n    // https://github.com/palantir/tslint/blob/24d29e421828348f616bf761adb3892bcdf51662/src/linter.ts#L161-L179\r\n    // Modified to only lint files that have changed and that we care about\r\n    const lintFailures: TLintResult[] = [];\r\n\r\n    for (const sourceFile of options.tsProgram.getSourceFiles()) {\r\n      const filePath: string = sourceFile.fileName;\r\n\r\n      if (!options.typeScriptFilenames.has(filePath) || (await this.isFileExcludedAsync(filePath))) {\r\n        continue;\r\n      }\r\n\r\n      // Older compilers don't compute the ts.SourceFile.version.  If it is missing, then we can't skip processing\r\n      const version: string = sourceFile.version || '';\r\n      const cachedVersion: string = cachedNoFailureFileVersions.get(filePath) || '';\r\n      if (\r\n        cachedVersion === '' ||\r\n        version === '' ||\r\n        cachedVersion !== version ||\r\n        options.changedFiles.has(sourceFile)\r\n      ) {\r\n        this._measurePerformance(this._linterName, () => {\r\n          const failures: TLintResult[] = this.lintFile(sourceFile);\r\n          if (failures.length === 0) {\r\n            newNoFailureFileVersions.set(filePath, version);\r\n          } else {\r\n            lintFailures.push(...failures);\r\n          }\r\n        });\r\n      } else {\r\n        newNoFailureFileVersions.set(filePath, version);\r\n      }\r\n    }\r\n    //#endregion\r\n\r\n    this.lintingFinished(lintFailures);\r\n\r\n    const updatedTslintCacheData: ITsLintCacheData = {\r\n      cacheVersion: tslintConfigVersion,\r\n      fileVersions: Array.from(newNoFailureFileVersions)\r\n    };\r\n    await JsonFile.saveAsync(updatedTslintCacheData, cacheFilePath, { ensureFolderExists: true });\r\n\r\n    const lintTiming: ITiming = this.getTiming(this._linterName);\r\n    this._terminal.writeVerboseLine(`Lint: ${lintTiming.duration}ms (${lintTiming.hitCount} files)`);\r\n  }\r\n\r\n  public abstract reportFailures(): void;\r\n\r\n  protected getTiming(timingName: string): ITiming {\r\n    return {\r\n      duration: this._ts.performance.getDuration(timingName),\r\n      hitCount: this._ts.performance.getCount(`before${timingName}`)\r\n    };\r\n  }\r\n\r\n  protected abstract initializeAsync(tsProgram: IExtendedProgram): void;\r\n\r\n  protected abstract lintFile(sourceFile: IExtendedSourceFile): TLintResult[];\r\n\r\n  protected abstract lintingFinished(lintFailures: TLintResult[]): void;\r\n\r\n  protected abstract isFileExcludedAsync(filePath: string): Promise<boolean>;\r\n}\r\n"]}