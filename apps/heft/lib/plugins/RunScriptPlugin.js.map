{"version":3,"file":"RunScriptPlugin.js","sourceRoot":"","sources":["../../src/plugins/RunScriptPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,gFAA6E;AAW7E,8CAA2C;AAC3C,sDAAmD;AAuBnD,MAAa,eAAgB,SAAQ,yCAA2D;IAAhG;;QACkB,eAAU,GAAW,iBAAiB,CAAC;QACpC,oBAAe,GAA4B,WAAW,CAAC;QACvD,eAAU,GAAW,YAAY,CAAC;IA2FvD,CAAC;IAzFC;;OAEG;IACO,KAAK,CAAC,4BAA4B,CAC1C,SAAoB,EACpB,qBAA+D,EAC/D,MAAoB,EACpB,WAAwB,EACxB,iBAAoC,EACpC,UAAiC;QAEjC,MAAM,IAAI,CAAC,8BAA8B,CACvC,qBAAqB,EACrB,MAAM,EACN,WAAW,EACX,iBAAiB,EACjB,UAAU,CACX,CAAC;IACJ,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,2BAA2B,CACzC,SAAoB,EACpB,qBAA+D,EAC/D,MAAoB,EACpB,WAAwB,EACxB,iBAAoC,EACpC,UAAgC;QAEhC,MAAM,IAAI,CAAC,8BAA8B,CACvC,qBAAqB,EACrB,MAAM,EACN,WAAW,EACX,iBAAiB,EACjB,UAAU,CACX,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,8BAA8B,CAC1C,qBAA+D,EAC/D,MAAoB,EACpB,WAAwB,EACxB,iBAAoC,EACpC,UAA4B;QAE5B,MAAM,aAAK,CAAC,iBAAiB,CAC3B,qBAAqB,EACrB,qBAAS,CAAC,cAAc,EACxB,KAAK,EAAE,oBAAoB,EAAE,EAAE;YAC7B,wGAAwG;YACxG,oBAAoB;YACpB,MAAM,kBAAkB,GAAW,oBAAoB,CAAC,UAAU,CAAC;YAEnE,oGAAoG;YACpG,mGAAmG;YACnG,sGAAsG;YACtG,sDAAsD;YACtD,MAAM,YAAY,GAAiB,WAAW,CAAC,mBAAmB,CAChE,GAAG,MAAM,CAAC,UAAU,IAAI,oBAAoB,CAAC,QAAQ,EAAE,CACxD,CAAC;YAEF,MAAM,SAAS,GAAiC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YAC5E,IAAI,SAAS,CAAC,GAAG,IAAI,SAAS,CAAC,QAAQ,EAAE;gBACvC,MAAM,IAAI,KAAK,CACb,kBAAkB,kBAAkB,kDAAkD,CACvF,CAAC;aACH;iBAAM,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;gBAChD,MAAM,IAAI,KAAK,CACb,kBAAkB,kBAAkB,oDAAoD,CACzF,CAAC;aACH;YAED,MAAM,gBAAgB,GAAwC;gBAC5D,YAAY,EAAE,YAAY;gBAC1B,SAAS,EAAE,WAAW,CAAC,SAAS;gBAChC,aAAa,EAAE,oBAAoB,CAAC,aAAa;gBACjD,iBAAiB;gBACjB,UAAU;aACX,CAAC;YACF,IAAI,SAAS,CAAC,GAAG,EAAE;gBACjB,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;aACjC;iBAAM,IAAI,SAAS,CAAC,QAAQ,EAAE;gBAC7B,MAAM,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;aAC5C;QACH,CAAC,CACF,CAAC;IACJ,CAAC;CACF;AA9FD,0CA8FC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { HeftEventPluginBase } from '../pluginFramework/HeftEventPluginBase';\r\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\r\nimport { HeftSession } from '../pluginFramework/HeftSession';\r\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\r\nimport {\r\n  IHeftEventActions,\r\n  IHeftConfigurationRunScriptEventAction,\r\n  HeftEvent\r\n} from '../utilities/CoreConfigFiles';\r\nimport { IBuildStageProperties } from '../stages/BuildStage';\r\nimport { ITestStageProperties } from '../stages/TestStage';\r\nimport { Async } from '../utilities/Async';\r\nimport { Constants } from '../utilities/Constants';\r\n\r\n/**\r\n * Interface used by scripts that are run by the RunScriptPlugin.\r\n */\r\ninterface IRunScript<TStageProperties> {\r\n  run?: (options: IRunScriptOptions<TStageProperties>) => void;\r\n  runAsync?: (options: IRunScriptOptions<TStageProperties>) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Options provided to scripts that are run using the RunScriptPlugin.\r\n *\r\n * @beta\r\n */\r\nexport interface IRunScriptOptions<TStageProperties> {\r\n  scopedLogger: ScopedLogger;\r\n  heftConfiguration: HeftConfiguration;\r\n  debugMode: boolean;\r\n  properties: TStageProperties;\r\n  scriptOptions: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n}\r\n\r\nexport class RunScriptPlugin extends HeftEventPluginBase<IHeftConfigurationRunScriptEventAction> {\r\n  public readonly pluginName: string = 'RunScriptPlugin';\r\n  protected readonly eventActionName: keyof IHeftEventActions = 'runScript';\r\n  protected readonly loggerName: string = 'run-script';\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  protected async handleBuildEventActionsAsync(\r\n    heftEvent: HeftEvent,\r\n    runScriptEventActions: IHeftConfigurationRunScriptEventAction[],\r\n    logger: ScopedLogger,\r\n    heftSession: HeftSession,\r\n    heftConfiguration: HeftConfiguration,\r\n    properties: IBuildStageProperties\r\n  ): Promise<void> {\r\n    await this._runScriptsForHeftEventActions(\r\n      runScriptEventActions,\r\n      logger,\r\n      heftSession,\r\n      heftConfiguration,\r\n      properties\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  protected async handleTestEventActionsAsync(\r\n    heftEvent: HeftEvent,\r\n    runScriptEventActions: IHeftConfigurationRunScriptEventAction[],\r\n    logger: ScopedLogger,\r\n    heftSession: HeftSession,\r\n    heftConfiguration: HeftConfiguration,\r\n    properties: ITestStageProperties\r\n  ): Promise<void> {\r\n    await this._runScriptsForHeftEventActions(\r\n      runScriptEventActions,\r\n      logger,\r\n      heftSession,\r\n      heftConfiguration,\r\n      properties\r\n    );\r\n  }\r\n\r\n  private async _runScriptsForHeftEventActions<TStageProperties>(\r\n    runScriptEventActions: IHeftConfigurationRunScriptEventAction[],\r\n    logger: ScopedLogger,\r\n    heftSession: HeftSession,\r\n    heftConfiguration: HeftConfiguration,\r\n    properties: TStageProperties\r\n  ): Promise<void> {\r\n    await Async.forEachLimitAsync(\r\n      runScriptEventActions,\r\n      Constants.maxParallelism,\r\n      async (runScriptEventAction) => {\r\n        // The scriptPath property should be fully resolved since it is included in the resolution logic used by\r\n        // HeftConfiguration\r\n        const resolvedModulePath: string = runScriptEventAction.scriptPath;\r\n\r\n        // Use the HeftEvent.actionId field for the logger since this should identify the HeftEvent that the\r\n        // script is sourced from. This is also a bit more user-friendly and customizable than simply using\r\n        // the script name for the logger. We will also prefix the logger name with the plugin name to clarify\r\n        // that the output is coming from the RunScriptPlugin.\r\n        const scriptLogger: ScopedLogger = heftSession.requestScopedLogger(\r\n          `${logger.loggerName}:${runScriptEventAction.actionId}`\r\n        );\r\n\r\n        const runScript: IRunScript<TStageProperties> = require(resolvedModulePath);\r\n        if (runScript.run && runScript.runAsync) {\r\n          throw new Error(\r\n            `The script at \"${resolvedModulePath}\" exports both a \"run\" and a \"runAsync\" function`\r\n          );\r\n        } else if (!runScript.run && !runScript.runAsync) {\r\n          throw new Error(\r\n            `The script at \"${resolvedModulePath}\" doesn\\'t export a \"run\" or a \"runAsync\" function`\r\n          );\r\n        }\r\n\r\n        const runScriptOptions: IRunScriptOptions<TStageProperties> = {\r\n          scopedLogger: scriptLogger,\r\n          debugMode: heftSession.debugMode,\r\n          scriptOptions: runScriptEventAction.scriptOptions,\r\n          heftConfiguration,\r\n          properties\r\n        };\r\n        if (runScript.run) {\r\n          runScript.run(runScriptOptions);\r\n        } else if (runScript.runAsync) {\r\n          await runScript.runAsync(runScriptOptions);\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n"]}