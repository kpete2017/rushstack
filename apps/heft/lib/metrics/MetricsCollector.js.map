{"version":3,"file":"MetricsCollector.js","sourceRoot":"","sources":["../../src/metrics/MetricsCollector.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,uCAAyB;AACzB,qCAAsD;AACtD,2CAAyC;AACzC,oEAA6D;AA0C7D;;;;GAIG;AACH,MAAa,qBAAqB;IAAlC;QACE;;WAEG;QACI,iBAAY,GAAmC,IAAI,kBAAQ,CAAuB;YACvF,YAAY;YACZ,aAAa;SACd,CAAC,CAAC;QAEH;;WAEG;QACI,UAAK,GAAsB,IAAI,2BAAiB,EAAE,CAAC;QAE1D;;WAEG;QACI,qBAAgB,GAAsB,IAAI,2BAAiB,EAAE,CAAC;IACvE,CAAC;CAAA;AAlBD,sDAkBC;AASD;;;GAGG;AACH,MAAa,gBAAgB;IAA7B;QACkB,UAAK,GAA0B,IAAI,qBAAqB,EAAE,CAAC;QACnE,qBAAgB,GAAY,KAAK,CAAC;IAqE5C,CAAC;IAlEC;;OAEG;IACI,YAAY;QACjB,IAAI,CAAC,YAAY,GAAG,wBAAW,CAAC,GAAG,EAAE,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACI,MAAM,CAAC,OAAe,EAAE,eAA2C;QACxE,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE;YACnC,MAAM,IAAI,iCAAa,CAAC,mEAAmE,CAAC,CAAC;SAC9F;QAED,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,MAAM,IAAI,iCAAa,CAAC,sCAAsC,CAAC,CAAC;SACjE;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,iCAAa,CAAC,qCAAqC,CAAC,CAAC;SAChE;QAED,MAAM,qBAAqB,mBACzB,oBAAoB,EAAE,CAAC,wBAAW,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,IACjE,CAAC,eAAe,IAAI,EAAE,CAAC,CAC3B,CAAC;QAEF,MAAM,WAAW,GAAiB;YAChC,OAAO,EAAE,OAAO;YAChB,oBAAoB,EAAE,qBAAqB,CAAC,oBAAoB;YAChE,SAAS,EAAE,OAAO,CAAC,QAAQ;YAC3B,WAAW,EAAE,OAAO,CAAC,IAAI;YACzB,YAAY,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM;YAC9B,gBAAgB,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK;YACpC,oBAAoB,EAAE,EAAE,CAAC,QAAQ,EAAE;SACpC,CAAC;QAEF,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,UAAU;QACrB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;SACzD;QAED,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,qBAAqB;QAChC,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;QAED,MAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC/B,CAAC;CACF;AAvED,4CAuEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport { AsyncParallelHook, SyncHook } from 'tapable';\r\nimport { performance } from 'perf_hooks';\r\nimport { InternalError } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IMetricsData {\r\n  /**\r\n   * The command that was executed.\r\n   */\r\n  command: string;\r\n\r\n  /**\r\n   * The amount of time the command took to execute, in milliseconds.\r\n   */\r\n  taskTotalExecutionMs: number;\r\n\r\n  /**\r\n   * The name of the operating system provided by NodeJS.\r\n   */\r\n  machineOs: string;\r\n\r\n  /**\r\n   * The processor's architecture.\r\n   */\r\n  machineArch: string;\r\n\r\n  /**\r\n   * The number of processor cores.\r\n   */\r\n  machineCores: number;\r\n\r\n  /**\r\n   * The processor's model name.\r\n   */\r\n  machineProcessor: string;\r\n\r\n  /**\r\n   * The total amount of memory the machine has, in megabytes.\r\n   */\r\n  machineTotalMemoryMB: number;\r\n}\r\n\r\n/**\r\n * Tap these hooks to record build metrics, to a file, for example.\r\n *\r\n * @public\r\n */\r\nexport class MetricsCollectorHooks {\r\n  /**\r\n   * This hook is called when a metric is recorded.\r\n   */\r\n  public recordMetric: SyncHook<string, IMetricsData> = new SyncHook<string, IMetricsData>([\r\n    'metricName',\r\n    'metricsData'\r\n  ]);\r\n\r\n  /**\r\n   * This hook is called when collected metrics should be flushed\r\n   */\r\n  public flush: AsyncParallelHook = new AsyncParallelHook();\r\n\r\n  /**\r\n   * This hook is called when collected metrics should be flushed and no more metrics will be collected.\r\n   */\r\n  public flushAndTeardown: AsyncParallelHook = new AsyncParallelHook();\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IPerformanceData {\r\n  taskTotalExecutionMs: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * A simple performance metrics collector. A plugin is required to pipe data anywhere.\r\n */\r\nexport class MetricsCollector {\r\n  public readonly hooks: MetricsCollectorHooks = new MetricsCollectorHooks();\r\n  private _hasBeenTornDown: boolean = false;\r\n  private _startTimeMs: number | undefined;\r\n\r\n  /**\r\n   * Start metrics log timer.\r\n   */\r\n  public setStartTime(): void {\r\n    this._startTimeMs = performance.now();\r\n  }\r\n\r\n  /**\r\n   * Record metrics to the installed plugin(s).\r\n   *\r\n   * @param command - Describe the user command, e.g. `start` or `build`\r\n   * @param params - Optional parameters\r\n   */\r\n  public record(command: string, performanceData?: Partial<IPerformanceData>): void {\r\n    if (this._startTimeMs === undefined) {\r\n      throw new InternalError('MetricsCollector has not been initialized with setStartTime() yet');\r\n    }\r\n\r\n    if (this._hasBeenTornDown) {\r\n      throw new InternalError('MetricsCollector has been torn down.');\r\n    }\r\n\r\n    if (!command) {\r\n      throw new InternalError('The command name must be specified.');\r\n    }\r\n\r\n    const filledPerformanceData: IPerformanceData = {\r\n      taskTotalExecutionMs: (performance.now() - this._startTimeMs) / 1000,\r\n      ...(performanceData || {})\r\n    };\r\n\r\n    const metricsData: IMetricsData = {\r\n      command: command,\r\n      taskTotalExecutionMs: filledPerformanceData.taskTotalExecutionMs,\r\n      machineOs: process.platform,\r\n      machineArch: process.arch,\r\n      machineCores: os.cpus().length,\r\n      machineProcessor: os.cpus()[0].model,\r\n      machineTotalMemoryMB: os.totalmem()\r\n    };\r\n\r\n    this.hooks.recordMetric.call('inner_loop_heft', metricsData);\r\n  }\r\n\r\n  /**\r\n   * Flushes all pending logged metrics.\r\n   */\r\n  public async flushAsync(): Promise<void> {\r\n    if (this._hasBeenTornDown) {\r\n      throw new Error('MetricsCollector has been torn down.');\r\n    }\r\n\r\n    await this.hooks.flush.promise();\r\n  }\r\n\r\n  /**\r\n   * Flushes all pending logged metrics and closes the MetricsCollector instance.\r\n   */\r\n  public async flushAndTeardownAsync(): Promise<void> {\r\n    if (this._hasBeenTornDown) {\r\n      throw new Error('MetricsCollector has already been torn down.');\r\n    }\r\n\r\n    await this.hooks.flushAndTeardown.promise();\r\n    this._hasBeenTornDown = true;\r\n  }\r\n}\r\n"]}