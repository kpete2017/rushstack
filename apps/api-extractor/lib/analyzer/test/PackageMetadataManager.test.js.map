{"version":3,"file":"PackageMetadataManager.test.js","sourceRoot":"","sources":["../../../src/analyzer/test/PackageMetadataManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { PackageMetadataManager } from '../PackageMetadataManager';\r\nimport { FileSystem, PackageJsonLookup, INodePackageJson, NewlineKind } from '@rushstack/node-core-library';\r\n\r\nconst packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n\r\nfunction resolveInTestPackage(testPackageName: string, ...args: string[]): string {\r\n  return path.resolve(__dirname, 'test-data/tsdoc-metadata-path-inference', testPackageName, ...args);\r\n}\r\n\r\nfunction getPackageMetadata(testPackageName: string): {\r\n  packageFolder: string;\r\n  packageJson: INodePackageJson;\r\n} {\r\n  const packageFolder: string = resolveInTestPackage(testPackageName);\r\n  const packageJson: INodePackageJson | undefined = packageJsonLookup.tryLoadPackageJsonFor(packageFolder);\r\n  if (!packageJson) {\r\n    throw new Error('There should be a package.json file in the test package');\r\n  }\r\n  return { packageFolder, packageJson };\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction firstArgument(mockFn: jest.Mock): any {\r\n  return mockFn.mock.calls[0][0];\r\n}\r\n\r\n/* eslint-disable @typescript-eslint/typedef */\r\n\r\ndescribe('PackageMetadataManager', () => {\r\n  describe('.writeTsdocMetadataFile()', () => {\r\n    const originalWriteFile = FileSystem.writeFile;\r\n    const mockWriteFile: jest.Mock = jest.fn();\r\n    beforeAll(() => {\r\n      FileSystem.writeFile = mockWriteFile;\r\n    });\r\n    afterEach(() => {\r\n      mockWriteFile.mockClear();\r\n    });\r\n    afterAll(() => {\r\n      FileSystem.writeFile = originalWriteFile;\r\n    });\r\n\r\n    it('writes the tsdoc metadata file at the provided path', () => {\r\n      PackageMetadataManager.writeTsdocMetadataFile('/foo/bar', NewlineKind.CrLf);\r\n      expect(firstArgument(mockWriteFile)).toBe('/foo/bar');\r\n    });\r\n  });\r\n\r\n  describe('.resolveTsdocMetadataPath()', () => {\r\n    describe('when an empty tsdocMetadataPath is provided', () => {\r\n      const tsdocMetadataPath: string = '';\r\n      describe('given a package.json where the field \"tsdocMetadata\" is defined', () => {\r\n        it('outputs the tsdoc metadata path as given by \"tsdocMetadata\" relative to the folder of package.json', () => {\r\n          const { packageFolder, packageJson } = getPackageMetadata('package-inferred-from-tsdoc-metadata');\r\n          expect(\r\n            PackageMetadataManager.resolveTsdocMetadataPath(packageFolder, packageJson, tsdocMetadataPath)\r\n          ).toBe(path.resolve(packageFolder, packageJson.tsdocMetadata as string));\r\n        });\r\n      });\r\n      describe('given a package.json where the field \"typings\" is defined and \"tsdocMetadata\" is not defined', () => {\r\n        it('outputs the tsdoc metadata file \"tsdoc-metadata.json\" in the same folder as the path of \"typings\"', () => {\r\n          const { packageFolder, packageJson } = getPackageMetadata('package-inferred-from-typings');\r\n          expect(\r\n            PackageMetadataManager.resolveTsdocMetadataPath(packageFolder, packageJson, tsdocMetadataPath)\r\n          ).toBe(path.resolve(packageFolder, path.dirname(packageJson.typings!), 'tsdoc-metadata.json'));\r\n        });\r\n      });\r\n      describe('given a package.json where the field \"main\" is defined but not \"typings\" nor \"tsdocMetadata\"', () => {\r\n        it('outputs the tsdoc metadata file \"tsdoc-metadata.json\" in the same folder as the path of \"main\"', () => {\r\n          const { packageFolder, packageJson } = getPackageMetadata('package-inferred-from-main');\r\n          expect(\r\n            PackageMetadataManager.resolveTsdocMetadataPath(packageFolder, packageJson, tsdocMetadataPath)\r\n          ).toBe(path.resolve(packageFolder, path.dirname(packageJson.main!), 'tsdoc-metadata.json'));\r\n        });\r\n      });\r\n      describe('given a package.json where the fields \"main\", \"typings\" and \"tsdocMetadata\" are not defined', () => {\r\n        it('outputs the tsdoc metadata file \"tsdoc-metadata.json\" in the folder where package.json is located', () => {\r\n          const { packageFolder, packageJson } = getPackageMetadata('package-default');\r\n          expect(\r\n            PackageMetadataManager.resolveTsdocMetadataPath(packageFolder, packageJson, tsdocMetadataPath)\r\n          ).toBe(path.resolve(packageFolder, 'tsdoc-metadata.json'));\r\n        });\r\n      });\r\n    });\r\n    describe('when a non-empty tsdocMetadataPath is provided', () => {\r\n      const tsdocMetadataPath: string = 'path/to/custom-tsdoc-metadata.json';\r\n      describe('given a package.json where the field \"tsdocMetadata\" is defined', () => {\r\n        it('outputs the tsdoc metadata file at the provided path in the folder where package.json is located', () => {\r\n          const { packageFolder, packageJson } = getPackageMetadata('package-inferred-from-tsdocMetadata');\r\n          expect(\r\n            PackageMetadataManager.resolveTsdocMetadataPath(packageFolder, packageJson, tsdocMetadataPath)\r\n          ).toBe(path.resolve(packageFolder, tsdocMetadataPath));\r\n        });\r\n      });\r\n      describe('given a package.json where the field \"typings\" is defined and \"tsdocMetadata\" is not defined', () => {\r\n        it('outputs the tsdoc metadata file at the provided path in the folder where package.json is located', () => {\r\n          const { packageFolder, packageJson } = getPackageMetadata('package-inferred-from-typings');\r\n          expect(\r\n            PackageMetadataManager.resolveTsdocMetadataPath(packageFolder, packageJson, tsdocMetadataPath)\r\n          ).toBe(path.resolve(packageFolder, tsdocMetadataPath));\r\n        });\r\n      });\r\n      describe('given a package.json where the field \"main\" is defined but not \"typings\" nor \"tsdocMetadata\"', () => {\r\n        it('outputs the tsdoc metadata file at the provided path in the folder where package.json is located', () => {\r\n          const { packageFolder, packageJson } = getPackageMetadata('package-inferred-from-main');\r\n          expect(\r\n            PackageMetadataManager.resolveTsdocMetadataPath(packageFolder, packageJson, tsdocMetadataPath)\r\n          ).toBe(path.resolve(packageFolder, tsdocMetadataPath));\r\n        });\r\n      });\r\n      describe('given a package.json where the fields \"main\", \"typings\" and \"tsdocMetadata\" are not defined', () => {\r\n        it('outputs the tsdoc metadata file at the provided path in the folder where package.json is located', () => {\r\n          const { packageFolder, packageJson } = getPackageMetadata('package-default');\r\n          expect(\r\n            PackageMetadataManager.resolveTsdocMetadataPath(packageFolder, packageJson, tsdocMetadataPath)\r\n          ).toBe(path.resolve(packageFolder, tsdocMetadataPath));\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n/* eslint-enable @typescript-eslint/typedef */\r\n"]}