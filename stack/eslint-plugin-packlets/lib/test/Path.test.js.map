{"version":3,"file":"Path.test.js","sourceRoot":"","sources":["../../src/test/Path.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,kCAA+B;AAE/B,SAAS,WAAW,CAAC,KAAa;IAChC,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AACvC,CAAC;AACD,SAAS,YAAY,CAAC,KAAa;IACjC,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5C,CAAC;AAED,SAAS,uBAAuB,CAAC,IAAY,EAAE,EAAU;IACvD,OAAO,WAAW,CAAC,WAAI,CAAC,0BAA0B,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC7F,CAAC;AAED,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;IACpB,IAAI,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAClC,yEAAyE;QACzE,MAAM,CAAC,uBAAuB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACtD,MAAM,CAAC,uBAAuB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACxD,MAAM,CAAC,uBAAuB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzD,MAAM,CAAC,uBAAuB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC1D,MAAM,CAAC,uBAAuB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5D,MAAM,CAAC,uBAAuB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAChE,MAAM,CAAC,uBAAuB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/D,MAAM,CAAC,uBAAuB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAChE,MAAM,CAAC,uBAAuB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC/D,MAAM,CAAC,uBAAuB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAChE,MAAM,CAAC,uBAAuB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAChE,MAAM,CAAC,uBAAuB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpE,MAAM,CAAC,uBAAuB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Path } from '../Path';\r\n\r\nfunction toPosixPath(value: string): string {\r\n  return value.replace(/[\\\\\\/]/g, '/');\r\n}\r\nfunction toNativePath(value: string): string {\r\n  return value.replace(/[\\\\\\/]/g, path.sep);\r\n}\r\n\r\nfunction relativeCaseInsensitive(from: string, to: string) {\r\n  return toPosixPath(Path['_relativeCaseInsensitive'](toNativePath(from), toNativePath(to)));\r\n}\r\n\r\ndescribe('Path', () => {\r\n  test('_detectCaseSensitive()', () => {\r\n    // NOTE: To ensure these tests are deterministic, only use absolute paths\r\n    expect(relativeCaseInsensitive('/', '/')).toEqual('');\r\n    expect(relativeCaseInsensitive('/', '/a')).toEqual('a');\r\n    expect(relativeCaseInsensitive('/', '/a/')).toEqual('a');\r\n    expect(relativeCaseInsensitive('/', '/a//')).toEqual('a');\r\n    expect(relativeCaseInsensitive('/', '/a/b')).toEqual('a/b');\r\n    expect(relativeCaseInsensitive('/', '/a/b/c')).toEqual('a/b/c');\r\n    expect(relativeCaseInsensitive('/A', '/a/b/c')).toEqual('b/c');\r\n    expect(relativeCaseInsensitive('/A/', '/a/b/c')).toEqual('b/c');\r\n    expect(relativeCaseInsensitive('/A/B', '/a/b/c')).toEqual('c');\r\n    expect(relativeCaseInsensitive('/A/b/C', '/a/b/c')).toEqual('');\r\n    expect(relativeCaseInsensitive('/a/B/c', '/a/b/c')).toEqual('');\r\n    expect(relativeCaseInsensitive('/a/B/c/D', '/a/b/c')).toEqual('..');\r\n    expect(relativeCaseInsensitive('/a/B/c/D', '/a/b/c/e')).toEqual('../e');\r\n  });\r\n});\r\n"]}