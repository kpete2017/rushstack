{"version":3,"file":"ToggleSwitch.js","sourceRoot":"","sources":["../src/ToggleSwitch.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AA2C/B;;GAEG;AACH;IAAkC,gCAAuD;IACvF,sBAAmB,KAAyB;QAA5C,YACE,kBAAM,KAAK,CAAC,SAIb;QAmCD,uGAAuG;QACvG,yGAAyG;QACzG,mBAAmB;QACX,oBAAc,GAAG,UAAC,KAAuB;YAC/C,IAAI,KAAI,CAAC,KAAK,CAAC,cAAc,sBAA8B,EAAE;gBAC3D,KAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,qBAA4B,EAAE,CAAC,CAAC;aAC/D;iBAAM;gBACL,KAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,mBAA2B,EAAE,CAAC,CAAC;aAC9D;YAED,IAAI,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACvB,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAI,EAAE,EAAE,cAAc,EAAE,KAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;aAC1E;QACH,CAAC,CAAC;QAnDA,KAAI,CAAC,KAAK,GAAG;YACX,cAAc,mBAA2B;SAC1C,CAAC;;IACJ,CAAC;IAEM,6BAAM,GAAb;QACE,IAAM,UAAU,GAAwB;YACtC,YAAY,EAAE,MAAM;YACpB,eAAe,EACb,IAAI,CAAC,KAAK,CAAC,cAAc,sBAA8B;gBACrD,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS;gBACtB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU;YAC3B,KAAK,EAAE,MAAM;YACb,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,SAAS;SAClB,CAAC;QACF,IAAM,WAAW,GAAwB;YACvC,YAAY,EAAE,MAAM;YACpB,eAAe,EAAE,SAAS;YAC1B,KAAK,EAAE,MAAM;YACb,MAAM,EAAE,MAAM;SACf,CAAC;QAEF,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,sBAA8B,EAAE;YAC3D,WAAW,CAAC,UAAU,GAAG,KAAK,CAAC;YAC/B,WAAW,CAAC,WAAW,GAAG,MAAM,CAAC;SAClC;aAAM;YACL,WAAW,CAAC,UAAU,GAAG,MAAM,CAAC;YAChC,WAAW,CAAC,WAAW,GAAG,KAAK,CAAC;SACjC;QAED,OAAO,CACL,6BAAK,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,cAAc;YAClD,6BAAK,KAAK,EAAE,WAAW,GAAI,CACvB,CACP,CAAC;IACJ,CAAC;IAgBH,mBAAC;AAAD,CAAC,AAvDD,CAAkC,KAAK,CAAC,SAAS,GAuDhD","sourcesContent":["import * as React from 'react';\r\n\r\n/**\r\n * Slider positions for `ToggleSwitch`.\r\n */\r\nexport const enum ToggleSwitchPosition {\r\n  Left = 'left',\r\n  Right = 'right'\r\n}\r\n\r\n/**\r\n * Event arguments for `IToggleSwitchProps.onToggle`.\r\n */\r\nexport interface IToggleEventArgs {\r\n  sliderPosition: ToggleSwitchPosition;\r\n}\r\n\r\nexport interface IToggleSwitchProps {\r\n  /**\r\n   * The CSS color when the `ToggleSwitch` slider is in the left position.\r\n   * Example value: `\"#800000\"`\r\n   */\r\n  leftColor: string;\r\n\r\n  /**\r\n   * The CSS color when the `ToggleSwitch` slider is in the right position.\r\n   * Example value: `\"#008000\"`\r\n   */\r\n  rightColor: string;\r\n\r\n  /**\r\n   * An event that fires when the `ToggleSwitch` control is clicked.\r\n   */\r\n  onToggle?: (sender: ToggleSwitch, args: IToggleEventArgs) => void;\r\n}\r\n\r\n/**\r\n * Private state for ToggleSwitch.\r\n */\r\ninterface IToggleSwitchState {\r\n  sliderPosition: ToggleSwitchPosition;\r\n}\r\n\r\n/**\r\n * An example component that renders a switch whose slider position can be \"left\" or \"right\".\r\n */\r\nexport class ToggleSwitch extends React.Component<IToggleSwitchProps, IToggleSwitchState> {\r\n  public constructor(props: IToggleSwitchProps) {\r\n    super(props);\r\n    this.state = {\r\n      sliderPosition: ToggleSwitchPosition.Left\r\n    };\r\n  }\r\n\r\n  public render(): React.ReactNode {\r\n    const frameStyle: React.CSSProperties = {\r\n      borderRadius: '10px',\r\n      backgroundColor:\r\n        this.state.sliderPosition === ToggleSwitchPosition.Left\r\n          ? this.props.leftColor\r\n          : this.props.rightColor,\r\n      width: '35px',\r\n      height: '20px',\r\n      cursor: 'pointer'\r\n    };\r\n    const sliderStyle: React.CSSProperties = {\r\n      borderRadius: '10px',\r\n      backgroundColor: '#c0c0c0',\r\n      width: '20px',\r\n      height: '20px'\r\n    };\r\n\r\n    if (this.state.sliderPosition === ToggleSwitchPosition.Left) {\r\n      sliderStyle.marginLeft = '0px';\r\n      sliderStyle.marginRight = 'auto';\r\n    } else {\r\n      sliderStyle.marginLeft = 'auto';\r\n      sliderStyle.marginRight = '0px';\r\n    }\r\n\r\n    return (\r\n      <div style={frameStyle} onClick={this._onClickSlider}>\r\n        <div style={sliderStyle} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // React event handlers should be represented as fields instead of methods to ensure the \"this\" pointer\r\n  // is bound correctly.  This form does not work with virtual/override inheritance, so use regular methods\r\n  // everywhere else.\r\n  private _onClickSlider = (event: React.MouseEvent): void => {\r\n    if (this.state.sliderPosition === ToggleSwitchPosition.Left) {\r\n      this.setState({ sliderPosition: ToggleSwitchPosition.Right });\r\n    } else {\r\n      this.setState({ sliderPosition: ToggleSwitchPosition.Left });\r\n    }\r\n\r\n    if (this.props.onToggle) {\r\n      this.props.onToggle(this, { sliderPosition: this.state.sliderPosition });\r\n    }\r\n  };\r\n}\r\n"]}