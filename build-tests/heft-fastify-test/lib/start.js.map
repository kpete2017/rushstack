{"version":3,"file":"start.js","sourceRoot":"","sources":["../src/start.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,qCAAmD;AAEnD,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;AAChC,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;IAC5B,OAAO,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC;AACH,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;IACtB,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC;AACH,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE;IACnB,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC;AACH,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE;IACpB,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC;AAEH,MAAM,KAAK;IAGT;QACE,IAAI,CAAC,MAAM,GAAG,iBAAO,CAAC;YACpB,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,WAAW;QACvB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;YAC5C,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;QAClD,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACjC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAE7B,IAAI,KAAK,CAAC,KAAK,EAAE;gBACf,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC3B,OAAO,CAAC,KAAK,EAAE,CAAC;aACjB;YACD,OAAO,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,MAAM,KAAK,GAAU,IAAI,KAAK,EAAE,CAAC;AACjC,KAAK,CAAC,KAAK,EAAE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { fastify, FastifyInstance } from 'fastify';\r\n\r\nconsole.error('CHILD STARTING');\r\nprocess.on('beforeExit', () => {\r\n  console.error('CHILD BEFOREEXIT');\r\n});\r\nprocess.on('exit', () => {\r\n  console.error('CHILD EXITED');\r\n});\r\nprocess.on('SIGINT', function () {\r\n  console.error('CHILD SIGINT');\r\n});\r\nprocess.on('SIGTERM', function () {\r\n  console.error('CHILD SIGTERM');\r\n});\r\n\r\nclass MyApp {\r\n  public readonly server: FastifyInstance;\r\n\r\n  public constructor() {\r\n    this.server = fastify({\r\n      logger: true\r\n    });\r\n  }\r\n\r\n  private async _startAsync(): Promise<void> {\r\n    this.server.get('/', async (request, reply) => {\r\n      return { hello: 'world' };\r\n    });\r\n\r\n    console.log('Listening on http://localhost:3000');\r\n    await this.server.listen(3000);\r\n  }\r\n\r\n  public start(): void {\r\n    this._startAsync().catch((error) => {\r\n      process.exitCode = 1;\r\n      this.server.log.error(error);\r\n\r\n      if (error.stack) {\r\n        console.error(error.stack);\r\n        console.error();\r\n      }\r\n      console.error('ERROR: ' + error.toString());\r\n    });\r\n  }\r\n}\r\n\r\nconst myApp: MyApp = new MyApp();\r\nmyApp.start();\r\n"]}