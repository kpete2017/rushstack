{"version":3,"file":"MinifiedIdentifier.test.js","sourceRoot":"","sources":["../../src/test/MinifiedIdentifier.test.ts"],"names":[],"mappings":";;AAAA,8DAI+B;AAE/B,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;YACjC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,MAAM,MAAM,GAAW,qDAAgC,CAAC,0CAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClF,IAAI,MAAM,KAAK,CAAC,EAAE;oBAChB,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,iBAAiB,MAAM,EAAE,CAAC,CAAC;iBACzD;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;YACxB,IAAI,UAAU,GAAW,CAAC,CAAC;YAC3B,MAAM,aAAa,GAAgB,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YAC/D,KAAK,MAAM,OAAO,IAAI,aAAa,EAAE;gBACnC,MAAM,OAAO,GAAW,qDAAgC,CAAC,OAAO,CAAC,CAAC;gBAClE,IAAI,OAAO,GAAG,UAAU,EAAE;oBACxB,UAAU,GAAG,OAAO,CAAC;iBACtB;gBACD,MAAM,MAAM,GAAW,kCAAa,CAAC,OAAO,CAAC,CAAC;gBAC9C,IAAI,MAAM,KAAK,OAAO,EAAE;oBACtB,MAAM,IAAI,KAAK,CAAC,oBAAoB,OAAO,wBAAwB,CAAC,CAAC;iBACtE;aACF;YAED,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,EAAE,EAAE;gBAC5C,MAAM,UAAU,GAAW,kCAAa,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;oBACjC,MAAM,IAAI,KAAK,CAAC,oBAAoB,UAAU,gBAAgB,CAAC,CAAC;iBACjE;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\r\n  getIdentifierInternal,\r\n  getOrdinalFromIdentifierInternal,\r\n  getIdentifier\r\n} from '../MinifiedIdentifier';\r\n\r\ndescribe('MinifiedIdentifier', () => {\r\n  describe('getIdentifierInternal', () => {\r\n    it('Round trips identifiers', () => {\r\n      for (let i: number = 0; i < 100000; i++) {\r\n        const actual: number = getOrdinalFromIdentifierInternal(getIdentifierInternal(i));\r\n        if (actual !== i) {\r\n          throw new Error(`Expected ${i} but received ${actual}`);\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('getIdentifier', () => {\r\n    it('Skips keywords', () => {\r\n      let maxOrdinal: number = 0;\r\n      const shortKeywords: Set<string> = new Set(['do', 'if', 'in']);\r\n      for (const keyword of shortKeywords) {\r\n        const ordinal: number = getOrdinalFromIdentifierInternal(keyword);\r\n        if (ordinal > maxOrdinal) {\r\n          maxOrdinal = ordinal;\r\n        }\r\n        const actual: string = getIdentifier(ordinal);\r\n        if (actual === keyword) {\r\n          throw new Error(`Expected keyword ${keyword} to fail to round trip`);\r\n        }\r\n      }\r\n\r\n      for (let i: number = 0; i <= maxOrdinal; i++) {\r\n        const identifier: string = getIdentifier(i);\r\n        if (shortKeywords.has(identifier)) {\r\n          throw new Error(`Expected keyword ${identifier} to be skipped`);\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n"]}