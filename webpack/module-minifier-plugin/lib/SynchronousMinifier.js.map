{"version":3,"file":"SynchronousMinifier.js","sourceRoot":"","sources":["../src/SynchronousMinifier.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAQ3D,gEAA6D;AAE7D,iDAA+C;AAU/C;;;GAGG;AACH,MAAa,mBAAmB;IAK9B,YAAmB,OAAoC;QACrD,MAAM,EAAE,aAAa,GAAG,EAAE,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;QAE7C,IAAI,CAAC,aAAa,GAAG;YACnB,GAAG,aAAa;YAChB,MAAM,EAAE,aAAa,CAAC,MAAM;gBAC1B,CAAC,CAAC;oBACE,GAAG,aAAa,CAAC,MAAM;iBACxB;gBACH,CAAC,CAAC,EAAE;SACP,CAAC;QAEF,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,OAAmC,EAAE,QAAqC;QACtF,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;QAEzB,MAAM,MAAM,GAA0C,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClF,IAAI,MAAM,EAAE;YACV,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;SACzB;QAED,MAAM,MAAM,GAA8B,mCAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACxF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEpC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACnB,CAAC;CACF;AAtCD,kDAsCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  IModuleMinificationCallback,\r\n  IModuleMinificationRequest,\r\n  IModuleMinificationResult,\r\n  IModuleMinifier\r\n} from './ModuleMinifierPlugin.types';\r\nimport { minifySingleFile } from './terser/MinifySingleFile';\r\nimport { MinifyOptions } from 'terser';\r\nimport './OverrideWebpackIdentifierAllocation';\r\n\r\n/**\r\n * Options for configuring the SynchronousMinifier\r\n * @public\r\n */\r\nexport interface ISynchronousMinifierOptions {\r\n  terserOptions?: MinifyOptions;\r\n}\r\n\r\n/**\r\n * Minifier implementation that synchronously minifies code on the main thread.\r\n * @public\r\n */\r\nexport class SynchronousMinifier implements IModuleMinifier {\r\n  public readonly terserOptions: MinifyOptions;\r\n\r\n  private readonly _resultCache: Map<string, IModuleMinificationResult>;\r\n\r\n  public constructor(options: ISynchronousMinifierOptions) {\r\n    const { terserOptions = {} } = options || {};\r\n\r\n    this.terserOptions = {\r\n      ...terserOptions,\r\n      output: terserOptions.output\r\n        ? {\r\n            ...terserOptions.output\r\n          }\r\n        : {}\r\n    };\r\n\r\n    this._resultCache = new Map();\r\n  }\r\n\r\n  /**\r\n   * Transform that synchronously invokes Terser\r\n   * @param request - The request to process\r\n   * @param callback - The callback to invoke\r\n   */\r\n  public minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void {\r\n    const { hash } = request;\r\n\r\n    const cached: IModuleMinificationResult | undefined = this._resultCache.get(hash);\r\n    if (cached) {\r\n      return callback(cached);\r\n    }\r\n\r\n    const result: IModuleMinificationResult = minifySingleFile(request, this.terserOptions);\r\n    this._resultCache.set(hash, result);\r\n\r\n    callback(result);\r\n  }\r\n}\r\n"]}