{"version":3,"file":"ModuleMinifierPlugin.types.js","sourceRoot":"","sources":["../src/ModuleMinifierPlugin.types.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { RawSourceMap } from 'source-map';\r\nimport { AsyncSeriesWaterfallHook, SyncWaterfallHook } from 'tapable';\r\nimport * as webpack from 'webpack';\r\nimport { ReplaceSource, Source } from 'webpack-sources';\r\n\r\n/**\r\n * Request to the minifier\r\n * @public\r\n */\r\nexport interface IModuleMinificationRequest {\r\n  /**\r\n   * Identity of the request. Will be included in the response.\r\n   */\r\n  hash: string;\r\n  /**\r\n   * The raw code fragment\r\n   */\r\n  code: string;\r\n  /**\r\n   * File name to show for the source code in the source map\r\n   */\r\n  nameForMap: string | undefined;\r\n  /**\r\n   * Reserved variable names, e.g. __WEBPACK_EXTERNAL_MODULE_1__\r\n   */\r\n  externals: string[] | undefined;\r\n}\r\n\r\n/**\r\n * Result from the minifier function when an error is encountered.\r\n * @public\r\n */\r\nexport interface IModuleMinificationErrorResult {\r\n  /**\r\n   * Identity of the request\r\n   */\r\n  hash: string;\r\n  /**\r\n   * The error encountered, to be added to the current compilation's error collection.\r\n   */\r\n  error: Error;\r\n  /**\r\n   * Marker property to always return the same result shape.\r\n   */\r\n  code?: undefined;\r\n  /**\r\n   * Marker property to always return the same result shape.\r\n   */\r\n  map?: undefined;\r\n  /**\r\n   * Marker property to always return the same result shape.\r\n   */\r\n  extractedComments?: undefined;\r\n}\r\n\r\n/**\r\n * Result from the minifier on a successful minification.\r\n * @public\r\n */\r\nexport interface IModuleMinificationSuccessResult {\r\n  /**\r\n   * Identity of the request\r\n   */\r\n  hash: string;\r\n  /**\r\n   * The error property being `undefined` indicates success.\r\n   */\r\n  error: undefined;\r\n  /**\r\n   * The minified code.\r\n   */\r\n  code: string;\r\n  /**\r\n   * Marker property to always return the same result shape.\r\n   */\r\n  map?: RawSourceMap;\r\n  /**\r\n   * The array of extracted comments, usually these are license information for 3rd party libraries.\r\n   */\r\n  extractedComments: string[];\r\n}\r\n\r\n/**\r\n * Result from the minifier.\r\n * @public\r\n */\r\nexport type IModuleMinificationResult = IModuleMinificationErrorResult | IModuleMinificationSuccessResult;\r\n\r\n/**\r\n * Callback passed to a minifier function\r\n * @public\r\n */\r\nexport interface IModuleMinificationCallback {\r\n  (result: IModuleMinificationResult): void;\r\n}\r\n\r\n/**\r\n * Information about a dehydrated webpack ECMAScript asset\r\n * @public\r\n */\r\nexport interface IAssetInfo {\r\n  /**\r\n   * The (minified) boilerplate code for the asset. Will contain a token to be replaced by the minified modules.\r\n   */\r\n  source: Source;\r\n\r\n  /**\r\n   * The name of the asset, used to index into compilation.assets\r\n   */\r\n  fileName: string;\r\n\r\n  /**\r\n   * The extracted comments from the boilerplate. Will usually be empty unless the minifier configuration and a plugin inject a comment that needs extraction in the runtime.\r\n   */\r\n  extractedComments: string[];\r\n\r\n  /**\r\n   * The ids of the modules that are part of the chunk corresponding to this asset\r\n   */\r\n  modules: (string | number)[];\r\n\r\n  /**\r\n   * The raw chunk object from Webpack, in case information from it is necessary for reconstruction\r\n   */\r\n  chunk: webpack.compilation.Chunk;\r\n\r\n  /**\r\n   * The set of external names to postprocess\r\n   */\r\n  externalNames: Map<string, string>;\r\n}\r\n\r\n/**\r\n * Information about a minified module\r\n * @public\r\n */\r\nexport interface IModuleInfo {\r\n  /**\r\n   * The (minified) code of this module. Will be a function expression.\r\n   */\r\n  source: Source;\r\n\r\n  /**\r\n   * The extracted comments from this module, e.g. license information for a 3rd party library.\r\n   */\r\n  extractedComments: string[];\r\n\r\n  /**\r\n   * The raw module object from Webpack, in case information from it is necessary for reconstruction\r\n   */\r\n  module: IExtendedModule;\r\n}\r\n\r\n/**\r\n * Extension of the webpack Module typings with members that are used by this Plugin\r\n * @public\r\n */\r\nexport interface IExtendedModule extends webpack.compilation.Module {\r\n  /**\r\n   * Is this module external?\r\n   */\r\n  external?: boolean;\r\n  /**\r\n   * Id for the module\r\n   */\r\n  // eslint-disable-next-line @rushstack/no-new-null\r\n  id: string | number | null;\r\n  /**\r\n   * Gets a descriptive identifier for the module.\r\n   */\r\n  identifier(): string;\r\n  /**\r\n   * Gets a friendly identifier for the module.\r\n   */\r\n  readableIdentifier(requestShortener: unknown): string;\r\n  /**\r\n   * Path to the physical file this module represents\r\n   */\r\n  resource?: string;\r\n  /**\r\n   * If set, bypass the minifier for this module. Useful if the code is known to already be minified.\r\n   */\r\n  skipMinification?: boolean;\r\n}\r\n\r\ndeclare module 'webpack' {\r\n  // eslint-disable-next-line @typescript-eslint/no-namespace\r\n  namespace compilation {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    interface RuntimeTemplate {\r\n      requestShortener: webpack.compilation.RequestShortener;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    interface RequestShortener {}\r\n  }\r\n}\r\n\r\n/**\r\n * This is the second parameter to the NormalModuleFactory `module` hook\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _INormalModuleFactoryModuleData {\r\n  resourceResolveData?: {\r\n    /**\r\n     * Contents of the description file (package.json) for the module\r\n     */\r\n    descriptionFileData?: {\r\n      /**\r\n       * The name of the package\r\n       */\r\n      name: string;\r\n    };\r\n    /**\r\n     * Absolute path of the description file (package.json) for the module\r\n     */\r\n    descriptionFilePath?: string;\r\n    /**\r\n     * Absolute path of the directory containing the description file (package.json) for the module\r\n     */\r\n    descriptionFileRoot?: string;\r\n    /**\r\n     * Relative path from the description file (package.json) to the module\r\n     */\r\n    relativePath?: string;\r\n  };\r\n}\r\n\r\n/**\r\n * A map from file names to dehydrated assets\r\n * @public\r\n */\r\nexport type IAssetMap = Map<string, IAssetInfo>;\r\n/**\r\n * A map from module ids to minified modules\r\n * @public\r\n */\r\nexport type IModuleMap = Map<string | number, IModuleInfo>;\r\n\r\n/**\r\n * An async function called to minify a module (or dehydrated chunk)\r\n * @public\r\n */\r\nexport interface IModuleMinifierFunction {\r\n  (request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void;\r\n}\r\n\r\n/**\r\n * Object that can be invoked to minify code.\r\n * @public\r\n */\r\nexport interface IModuleMinifier {\r\n  minify: IModuleMinifierFunction;\r\n\r\n  /**\r\n   * Prevents the minifier from shutting down until the returned callback is invoked.\r\n   * The callback may be used to surface errors encountered by the minifier that may not be relevant to a specific file.\r\n   * It should be called to allow the minifier to cleanup\r\n   */\r\n  ref?(): () => Promise<void>;\r\n}\r\n\r\n/**\r\n * Options to the ModuleMinifierPlugin constructor\r\n * @public\r\n */\r\nexport interface IModuleMinifierPluginOptions {\r\n  /**\r\n   * Minifier implementation to use. Required.\r\n   */\r\n  minifier: IModuleMinifier;\r\n\r\n  /**\r\n   * Whether to enable source map processing. If not provided, will attempt to guess based on `mode` and `devtool` in the webpack config.\r\n   * Set to `false` for faster builds at the expense of debuggability.\r\n   */\r\n  sourceMap?: boolean;\r\n\r\n  /**\r\n   * Instructs the plugin to alter the code of modules to maximize portability across compilations.\r\n   */\r\n  usePortableModules?: boolean;\r\n}\r\n\r\n/**\r\n * The set of data remaining to rehydrate in the current compilation\r\n * @public\r\n */\r\nexport interface IDehydratedAssets {\r\n  /**\r\n   * The set of remaining assets to rehydrate. Each tap may remove some or all assets from this collection\r\n   */\r\n  assets: IAssetMap;\r\n\r\n  /**\r\n   * The set of modules to use for rehydrating assets.\r\n   */\r\n  modules: IModuleMap;\r\n}\r\n\r\n/**\r\n * Hooks provided by the ModuleMinifierPlugin\r\n * @public\r\n */\r\nexport interface IModuleMinifierPluginHooks {\r\n  /**\r\n   * Hook invoked at the start of optimizeChunkAssets to rehydrate the minified boilerplate and runtime into chunk assets.\r\n   */\r\n  rehydrateAssets: AsyncSeriesWaterfallHook<IDehydratedAssets, webpack.compilation.Compilation>;\r\n\r\n  /**\r\n   * Hook invoked on a module id to get the final rendered id.\r\n   */\r\n  finalModuleId: SyncWaterfallHook<string | number | undefined>;\r\n\r\n  /**\r\n   * Hook invoked on code after it has been returned from the minifier.\r\n   */\r\n  postProcessCodeFragment: SyncWaterfallHook<ReplaceSource, string>;\r\n}\r\n"]}