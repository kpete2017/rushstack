{"version":3,"file":"GenerateLicenseFileForAsset.js","sourceRoot":"","sources":["../src/GenerateLicenseFileForAsset.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAE7B,qDAA+C;AAG/C;;;;;;;;GAQG;AACH,SAAgB,2BAA2B,CACzC,WAA4C,EAC5C,KAAiB,EACjB,eAA2B;IAE3B,mEAAmE;IACnE,gHAAgH;IAChH,MAAM,QAAQ,GAAgB,IAAI,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC/D,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,OAAO,EAAE;QACpC,MAAM,GAAG,GAA4B,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACnE,IAAI,GAAG,EAAE;YACP,KAAK,MAAM,OAAO,IAAI,GAAG,CAAC,iBAAiB,EAAE;gBAC3C,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACvB;SACF;KACF;IAED,MAAM,SAAS,GAAW,KAAK,CAAC,QAAQ,CAAC;IAEzC,IAAI,MAAM,GAAW,EAAE,CAAC;IAExB,IAAI,QAAQ,CAAC,IAAI,EAAE;QACjB,+FAA+F;QAC/F,MAAM,aAAa,GAAiB,IAAI,8BAAY,EAAE,CAAC;QACvD,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,MAAM,eAAe,GAAW,GAAG,SAAS,cAAc,CAAC;QAC3D,WAAW,CAAC,MAAM,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;QACpD,MAAM,GAAG,0CAA0C,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC;KAC1F;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAjCD,kEAiCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as webpack from 'webpack';\r\nimport { ConcatSource } from 'webpack-sources';\r\nimport { IAssetInfo, IModuleMap, IModuleInfo } from './ModuleMinifierPlugin.types';\r\n\r\n/**\r\n * Generates a companion asset containing all extracted comments. If it is non-empty, returns a banner comment directing users to said companion asset.\r\n *\r\n * @param compilation - The webpack compilation\r\n * @param asset - The asset to process\r\n * @param minifiedModules - The minified modules to pull comments from\r\n * @param assetName - The name of the asset\r\n * @public\r\n */\r\nexport function generateLicenseFileForAsset(\r\n  compilation: webpack.compilation.Compilation,\r\n  asset: IAssetInfo,\r\n  minifiedModules: IModuleMap\r\n): string {\r\n  // Extracted comments from the minified asset and from the modules.\r\n  // The former generally will be nonexistent (since it contains only the runtime), but the modules may have some.\r\n  const comments: Set<string> = new Set(asset.extractedComments);\r\n  for (const moduleId of asset.modules) {\r\n    const mod: IModuleInfo | undefined = minifiedModules.get(moduleId);\r\n    if (mod) {\r\n      for (const comment of mod.extractedComments) {\r\n        comments.add(comment);\r\n      }\r\n    }\r\n  }\r\n\r\n  const assetName: string = asset.fileName;\r\n\r\n  let banner: string = '';\r\n\r\n  if (comments.size) {\r\n    // There are license comments in this chunk, so generate the companion file and inject a banner\r\n    const licenseSource: ConcatSource = new ConcatSource();\r\n    comments.forEach((comment) => {\r\n      licenseSource.add(comment);\r\n    });\r\n    const licenseFileName: string = `${assetName}.LICENSE.txt`;\r\n    compilation.assets[licenseFileName] = licenseSource;\r\n    banner = `/*! For license information please see ${path.basename(licenseFileName)} */\\n`;\r\n  }\r\n\r\n  return banner;\r\n}\r\n"]}