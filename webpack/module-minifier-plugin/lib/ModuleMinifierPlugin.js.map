{"version":3,"file":"ModuleMinifierPlugin.js","sourceRoot":"","sources":["../src/ModuleMinifierPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  CachedSource,\r\n  ConcatSource,\r\n  RawSource,\r\n  ReplaceSource,\r\n  Source,\r\n  SourceMapSource\r\n} from 'webpack-sources';\r\nimport * as webpack from 'webpack';\r\nimport { AsyncSeriesWaterfallHook, SyncWaterfallHook, TapOptions } from 'tapable';\r\nimport {\r\n  CHUNK_MODULES_TOKEN,\r\n  MODULE_WRAPPER_PREFIX,\r\n  MODULE_WRAPPER_SUFFIX,\r\n  STAGE_BEFORE,\r\n  STAGE_AFTER\r\n} from './Constants';\r\nimport { getIdentifier } from './MinifiedIdentifier';\r\nimport {\r\n  IModuleMinifier,\r\n  IModuleMinifierPluginOptions,\r\n  IModuleMinificationResult,\r\n  IModuleMinificationErrorResult,\r\n  IModuleMap,\r\n  IAssetMap,\r\n  IExtendedModule,\r\n  IModuleMinifierPluginHooks,\r\n  IDehydratedAssets\r\n} from './ModuleMinifierPlugin.types';\r\nimport { generateLicenseFileForAsset } from './GenerateLicenseFileForAsset';\r\nimport { rehydrateAsset } from './RehydrateAsset';\r\nimport { PortableMinifierModuleIdsPlugin } from './PortableMinifierIdsPlugin';\r\nimport { createHash } from 'crypto';\r\n\r\n// The name of the plugin, for use in taps\r\nconst PLUGIN_NAME: 'ModuleMinifierPlugin' = 'ModuleMinifierPlugin';\r\n\r\nconst TAP_BEFORE: TapOptions<'promise'> = {\r\n  name: PLUGIN_NAME,\r\n  stage: STAGE_BEFORE\r\n};\r\nconst TAP_AFTER: TapOptions<'sync'> = {\r\n  name: PLUGIN_NAME,\r\n  stage: STAGE_AFTER\r\n};\r\n\r\ninterface IExtendedChunkTemplate {\r\n  hooks: {\r\n    modules: SyncWaterfallHook<Source, webpack.compilation.Chunk>;\r\n  };\r\n}\r\n\r\n/**\r\n * https://github.com/webpack/webpack/blob/30e747a55d9e796ae22f67445ae42c7a95a6aa48/lib/Template.js#L36-47\r\n * @param a first id to be sorted\r\n * @param b second id to be sorted against\r\n * @returns the sort value\r\n */\r\nfunction stringifyIdSortPredicate(a: string | number, b: string | number): -1 | 0 | 1 {\r\n  const aId: string = a + '';\r\n  const bId: string = b + '';\r\n  if (aId < bId) return -1;\r\n  if (aId > bId) return 1;\r\n  return 0;\r\n}\r\n\r\nfunction hashCodeFragment(code: string): string {\r\n  return createHash('sha256').update(code).digest('hex');\r\n}\r\n\r\n/**\r\n * Base implementation of asset rehydration\r\n *\r\n * @param dehydratedAssets The dehydrated assets\r\n * @param compilation The webpack compilation\r\n */\r\nfunction defaultRehydrateAssets(\r\n  dehydratedAssets: IDehydratedAssets,\r\n  compilation: webpack.compilation.Compilation\r\n): IDehydratedAssets {\r\n  const { assets, modules } = dehydratedAssets;\r\n\r\n  // Now assets/modules contain fully minified code. Rehydrate.\r\n  for (const [assetName, info] of assets) {\r\n    const banner: string = /\\.m?js(\\?.+)?$/.test(assetName)\r\n      ? generateLicenseFileForAsset(compilation, info, modules)\r\n      : '';\r\n\r\n    const outputSource: Source = rehydrateAsset(info, modules, banner);\r\n    compilation.assets[assetName] = outputSource;\r\n  }\r\n\r\n  return dehydratedAssets;\r\n}\r\n\r\nfunction isMinificationResultError(\r\n  result: IModuleMinificationResult\r\n): result is IModuleMinificationErrorResult {\r\n  return !!result.error;\r\n}\r\n\r\n/**\r\n * Webpack plugin that minifies code on a per-module basis rather than per-asset. The actual minification is handled by the input `minifier` object.\r\n * @public\r\n */\r\nexport class ModuleMinifierPlugin implements webpack.Plugin {\r\n  public readonly hooks: IModuleMinifierPluginHooks;\r\n  public minifier: IModuleMinifier;\r\n\r\n  private readonly _portableIdsPlugin: PortableMinifierModuleIdsPlugin | undefined;\r\n  private readonly _sourceMap: boolean | undefined;\r\n\r\n  public constructor(options: IModuleMinifierPluginOptions) {\r\n    this.hooks = {\r\n      rehydrateAssets: new AsyncSeriesWaterfallHook(['dehydratedContent', 'compilation']),\r\n\r\n      finalModuleId: new SyncWaterfallHook(['id']),\r\n\r\n      postProcessCodeFragment: new SyncWaterfallHook(['code', 'context'])\r\n    };\r\n\r\n    const { minifier, sourceMap, usePortableModules = false } = options;\r\n\r\n    if (usePortableModules) {\r\n      this._portableIdsPlugin = new PortableMinifierModuleIdsPlugin(this.hooks);\r\n    }\r\n\r\n    this.hooks.rehydrateAssets.tap(PLUGIN_NAME, defaultRehydrateAssets);\r\n    this.minifier = minifier;\r\n\r\n    this._sourceMap = sourceMap;\r\n  }\r\n\r\n  public apply(compiler: webpack.Compiler): void {\r\n    const { _portableIdsPlugin: stableIdsPlugin } = this;\r\n\r\n    const {\r\n      options: { devtool, mode }\r\n    } = compiler;\r\n    // The explicit setting is preferred due to accuracy, but try to guess based on devtool\r\n    const useSourceMaps: boolean =\r\n      typeof this._sourceMap === 'boolean'\r\n        ? this._sourceMap\r\n        : typeof devtool === 'string'\r\n        ? devtool.endsWith('source-map')\r\n        : mode === 'production' && devtool !== false;\r\n\r\n    if (stableIdsPlugin) {\r\n      stableIdsPlugin.apply(compiler);\r\n    }\r\n\r\n    compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation: webpack.compilation.Compilation) => {\r\n      /**\r\n       * Set of local module ids that have been processed.\r\n       */\r\n      const submittedModules: Set<string | number> = new Set();\r\n\r\n      /**\r\n       * The text and comments of all minified modules.\r\n       */\r\n      const minifiedModules: IModuleMap = new Map();\r\n\r\n      /**\r\n       * The text and comments of all minified chunks. Most of these are trivial, but the runtime chunk is a bit larger.\r\n       */\r\n      const minifiedAssets: IAssetMap = new Map();\r\n\r\n      let pendingMinificationRequests: number = 0;\r\n      /**\r\n       * Indicates that all files have been sent to the minifier and therefore that when pending hits 0, assets can be rehydrated.\r\n       */\r\n      let allRequestsIssued: boolean = false;\r\n\r\n      let resolveMinifyPromise: () => void;\r\n\r\n      const getRealId: (id: number | string) => number | string | undefined = (id: number | string) =>\r\n        this.hooks.finalModuleId.call(id);\r\n\r\n      const postProcessCode: (code: ReplaceSource, context: string) => ReplaceSource = (\r\n        code: ReplaceSource,\r\n        context: string\r\n      ) => this.hooks.postProcessCodeFragment.call(code, context);\r\n\r\n      /**\r\n       * Callback to invoke when a file has finished minifying.\r\n       */\r\n      function onFileMinified(): void {\r\n        if (--pendingMinificationRequests === 0 && allRequestsIssued) {\r\n          resolveMinifyPromise();\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Callback to invoke for a chunk during render to replace the modules with CHUNK_MODULES_TOKEN\r\n       */\r\n      function dehydrateAsset(modules: Source, chunk: webpack.compilation.Chunk): Source {\r\n        for (const mod of chunk.modulesIterable) {\r\n          if (mod.id === null || !submittedModules.has(mod.id)) {\r\n            console.error(\r\n              `Chunk ${chunk.id} failed to render module ${mod.id} for ${(mod as IExtendedModule).resource}`\r\n            );\r\n          }\r\n        }\r\n\r\n        // Discard the rendered modules\r\n        return new RawSource(CHUNK_MODULES_TOKEN);\r\n      }\r\n\r\n      const { minifier } = this;\r\n\r\n      const cleanupMinifier: (() => Promise<void>) | undefined = minifier.ref && minifier.ref();\r\n\r\n      const requestShortener: webpack.compilation.RequestShortener =\r\n        compilation.runtimeTemplate.requestShortener;\r\n\r\n      /**\r\n       * Extracts the code for the module and sends it to be minified.\r\n       * Currently source maps are explicitly not supported.\r\n       * @param {Source} source\r\n       * @param {Module} mod\r\n       */\r\n      function minifyModule(source: Source, mod: IExtendedModule): Source {\r\n        const id: string | number | null = mod.id;\r\n\r\n        if (id !== null && !submittedModules.has(id)) {\r\n          // options.chunk contains the current chunk, if needed\r\n          // Render the source, then hash, then persist hash -> module, return a placeholder\r\n\r\n          // Initially populate the map with unminified version; replace during callback\r\n          submittedModules.add(id);\r\n\r\n          const realId: string | number | undefined = getRealId(id);\r\n\r\n          if (realId !== undefined && !mod.skipMinification) {\r\n            const wrapped: ConcatSource = new ConcatSource(\r\n              MODULE_WRAPPER_PREFIX + '\\n',\r\n              source,\r\n              '\\n' + MODULE_WRAPPER_SUFFIX\r\n            );\r\n\r\n            const nameForMap: string = `(modules)/${realId}`;\r\n\r\n            const { source: wrappedCode, map } = useSourceMaps\r\n              ? wrapped.sourceAndMap()\r\n              : {\r\n                  source: wrapped.source(),\r\n                  map: undefined\r\n                };\r\n\r\n            const hash: string = hashCodeFragment(wrappedCode);\r\n\r\n            ++pendingMinificationRequests;\r\n\r\n            minifier.minify(\r\n              {\r\n                hash,\r\n                code: wrappedCode,\r\n                nameForMap: useSourceMaps ? nameForMap : undefined,\r\n                externals: undefined\r\n              },\r\n              (result: IModuleMinificationResult) => {\r\n                if (isMinificationResultError(result)) {\r\n                  compilation.errors.push(result.error);\r\n                } else {\r\n                  try {\r\n                    // Have the source map display the module id instead of the minifier boilerplate\r\n                    const sourceForMap: string = `// ${mod.readableIdentifier(\r\n                      requestShortener\r\n                    )}${wrappedCode.slice(MODULE_WRAPPER_PREFIX.length, -MODULE_WRAPPER_SUFFIX.length)}`;\r\n\r\n                    const { code: minified, map: minifierMap, extractedComments } = result;\r\n\r\n                    const rawOutput: Source = useSourceMaps\r\n                      ? new SourceMapSource(\r\n                          minified, // Code\r\n                          nameForMap, // File\r\n                          minifierMap!, // Base source map\r\n                          sourceForMap, // Source from before transform\r\n                          map!, // Source Map from before transform\r\n                          false // Remove original source\r\n                        )\r\n                      : new RawSource(minified);\r\n\r\n                    const unwrapped: ReplaceSource = new ReplaceSource(rawOutput);\r\n                    const len: number = minified.length;\r\n\r\n                    unwrapped.replace(0, MODULE_WRAPPER_PREFIX.length - 1, '');\r\n                    unwrapped.replace(len - MODULE_WRAPPER_SUFFIX.length, len - 1, '');\r\n\r\n                    const withIds: Source = postProcessCode(unwrapped, mod.identifier());\r\n\r\n                    minifiedModules.set(realId, {\r\n                      source: new CachedSource(withIds),\r\n                      extractedComments,\r\n                      module: mod\r\n                    });\r\n                  } catch (err) {\r\n                    compilation.errors.push(err);\r\n                  }\r\n                }\r\n\r\n                onFileMinified();\r\n              }\r\n            );\r\n          } else {\r\n            // Route any other modules straight through\r\n            minifiedModules.set(realId !== undefined ? realId : id, {\r\n              source: new CachedSource(postProcessCode(new ReplaceSource(source), mod.identifier())),\r\n              extractedComments: [],\r\n              module: mod\r\n            });\r\n          }\r\n        }\r\n\r\n        // Return something so that this stage still produces valid ECMAScript\r\n        return new RawSource('(function(){})');\r\n      }\r\n\r\n      // During code generation, send the generated code to the minifier and replace with a placeholder\r\n      compilation.moduleTemplates.javascript.hooks.package.tap(TAP_AFTER, minifyModule);\r\n\r\n      // This should happen before any other tasks that operate during optimizeChunkAssets\r\n      compilation.hooks.optimizeChunkAssets.tapPromise(\r\n        TAP_BEFORE,\r\n        async (chunks: webpack.compilation.Chunk[]): Promise<void> => {\r\n          // Still need to minify the rendered assets\r\n          for (const chunk of chunks) {\r\n            const externals: string[] = [];\r\n            const externalNames: Map<string, string> = new Map();\r\n\r\n            const chunkModuleSet: Set<string | number> = new Set();\r\n            const allChunkModules: Iterable<IExtendedModule> =\r\n              chunk.modulesIterable as Iterable<IExtendedModule>;\r\n            let hasNonNumber: boolean = false;\r\n            for (const mod of allChunkModules) {\r\n              if (mod.id !== null) {\r\n                if (typeof mod.id !== 'number') {\r\n                  hasNonNumber = true;\r\n                }\r\n                chunkModuleSet.add(mod.id);\r\n\r\n                if (mod.external) {\r\n                  const key: string = `__WEBPACK_EXTERNAL_MODULE_${webpack.Template.toIdentifier(\r\n                    `${mod.id}`\r\n                  )}__`;\r\n                  // The first two identifiers are used for function (module, exports) at the module site\r\n                  const ordinal: number = 2 + externals.length;\r\n                  const miniId: string = getIdentifier(ordinal);\r\n                  externals.push(key);\r\n                  externalNames.set(key, miniId);\r\n                }\r\n              }\r\n            }\r\n\r\n            const chunkModules: (string | number)[] = Array.from(chunkModuleSet);\r\n            // Sort by id before rehydration in case we rehydrate a given chunk multiple times\r\n            chunkModules.sort(\r\n              hasNonNumber\r\n                ? stringifyIdSortPredicate\r\n                : (x: string | number, y: string | number) => (x as number) - (y as number)\r\n            );\r\n\r\n            for (const assetName of chunk.files) {\r\n              const asset: Source = compilation.assets[assetName];\r\n\r\n              // Verify that this is a JS asset\r\n              if (/\\.m?js(\\?.+)?$/.test(assetName)) {\r\n                ++pendingMinificationRequests;\r\n\r\n                const rawCode: string = asset.source() as string;\r\n                const nameForMap: string = `(chunks)/${assetName}`;\r\n\r\n                const hash: string = hashCodeFragment(rawCode);\r\n\r\n                minifier.minify(\r\n                  {\r\n                    hash,\r\n                    code: rawCode,\r\n                    nameForMap: useSourceMaps ? nameForMap : undefined,\r\n                    externals\r\n                  },\r\n                  (result: IModuleMinificationResult) => {\r\n                    if (isMinificationResultError(result)) {\r\n                      compilation.errors.push(result.error);\r\n                      console.error(result.error);\r\n                    } else {\r\n                      try {\r\n                        const { code: minified, map: minifierMap, extractedComments } = result;\r\n\r\n                        let codeForMap: string = rawCode;\r\n                        if (useSourceMaps) {\r\n                          // Pretend the __WEBPACK_CHUNK_MODULES__ token is an array of module ids, so that the source map contains information about the module ids in the chunk\r\n                          codeForMap = codeForMap.replace(\r\n                            CHUNK_MODULES_TOKEN,\r\n                            JSON.stringify(chunkModules, undefined, 2)\r\n                          );\r\n                        }\r\n\r\n                        const rawOutput: Source = useSourceMaps\r\n                          ? new SourceMapSource(\r\n                              minified, // Code\r\n                              nameForMap, // File\r\n                              minifierMap!, // Base source map\r\n                              codeForMap, // Source from before transform\r\n                              undefined, // Source Map from before transform\r\n                              false // Remove original source\r\n                            )\r\n                          : new RawSource(minified);\r\n\r\n                        const withIds: Source = postProcessCode(new ReplaceSource(rawOutput), assetName);\r\n\r\n                        minifiedAssets.set(assetName, {\r\n                          source: new CachedSource(withIds),\r\n                          extractedComments,\r\n                          modules: chunkModules,\r\n                          chunk,\r\n                          fileName: assetName,\r\n                          externalNames\r\n                        });\r\n                      } catch (err) {\r\n                        compilation.errors.push(err);\r\n                      }\r\n                    }\r\n\r\n                    onFileMinified();\r\n                  }\r\n                );\r\n              } else {\r\n                // Skip minification for all other assets, though the modules still are\r\n                minifiedAssets.set(assetName, {\r\n                  // Still need to restore ids\r\n                  source: postProcessCode(new ReplaceSource(asset), assetName),\r\n                  extractedComments: [],\r\n                  modules: chunkModules,\r\n                  chunk,\r\n                  fileName: assetName,\r\n                  externalNames\r\n                });\r\n              }\r\n            }\r\n          }\r\n\r\n          allRequestsIssued = true;\r\n\r\n          if (pendingMinificationRequests) {\r\n            await new Promise<void>((resolve) => {\r\n              resolveMinifyPromise = resolve;\r\n            });\r\n          }\r\n\r\n          // Handle any error from the minifier.\r\n          if (cleanupMinifier) {\r\n            await cleanupMinifier();\r\n          }\r\n\r\n          // All assets and modules have been minified, hand them off to be rehydrated\r\n\r\n          // Clone the maps for safety, even though we won't be using them in the plugin anymore\r\n          const assets: IAssetMap = new Map(minifiedAssets);\r\n          const modules: IModuleMap = new Map(minifiedModules);\r\n\r\n          await this.hooks.rehydrateAssets.promise(\r\n            {\r\n              assets,\r\n              modules\r\n            },\r\n            compilation\r\n          );\r\n        }\r\n      );\r\n\r\n      for (const template of [compilation.chunkTemplate, compilation.mainTemplate]) {\r\n        (template as unknown as IExtendedChunkTemplate).hooks.modules.tap(TAP_AFTER, dehydrateAsset);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}