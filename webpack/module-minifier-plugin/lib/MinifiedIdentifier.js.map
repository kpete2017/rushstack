{"version":3,"file":"MinifiedIdentifier.js","sourceRoot":"","sources":["../src/MinifiedIdentifier.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n// TODO: Allow dynamic override of these values in the input to the minifier\r\nimport { IDENTIFIER_LEADING_DIGITS, IDENTIFIER_TRAILING_DIGITS } from './Constants';\r\n\r\n// Set of ECMAScript reserved keywords (past and present): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar\r\nconst RESERVED_KEYWORDS: string[] = [\r\n  'abstract',\r\n  'arguments',\r\n  'boolean',\r\n  'break',\r\n  'byte',\r\n  'case',\r\n  'catch',\r\n  'char',\r\n  'class',\r\n  'const',\r\n  'continue',\r\n  'debugger',\r\n  'default',\r\n  'delete',\r\n  'do',\r\n  'double',\r\n  'else',\r\n  'enum',\r\n  'export',\r\n  'extends',\r\n  'false',\r\n  'final',\r\n  'finally',\r\n  'float',\r\n  'for',\r\n  'function',\r\n  'get',\r\n  'goto',\r\n  'if',\r\n  'implements',\r\n  'import',\r\n  'in',\r\n  'instanceof',\r\n  'int',\r\n  'interface',\r\n  'let',\r\n  'long',\r\n  'native',\r\n  'new',\r\n  'null',\r\n  'package',\r\n  'private',\r\n  'protected',\r\n  'public',\r\n  'return',\r\n  'set',\r\n  'short',\r\n  'static',\r\n  'super',\r\n  'switch',\r\n  'synchronized',\r\n  'this',\r\n  'throw',\r\n  'throws',\r\n  'transient',\r\n  'true',\r\n  'try',\r\n  'typeof',\r\n  'var',\r\n  'void',\r\n  'volatile',\r\n  'while',\r\n  'with',\r\n  'yield'\r\n];\r\n\r\n/**\r\n * Gets a base54 string suitable for use as a JavaScript identifier, not accounting for reserved keywords\r\n * @param ordinal The number to convert to a base54 identifier\r\n */\r\nexport function getIdentifierInternal(ordinal: number): string {\r\n  let ret: string = IDENTIFIER_LEADING_DIGITS[ordinal % 54];\r\n\r\n  ordinal = (ordinal / 54) | 0; // eslint-disable-line no-bitwise\r\n  while (ordinal > 0) {\r\n    --ordinal;\r\n    ret += IDENTIFIER_TRAILING_DIGITS[ordinal & 0x3f]; // eslint-disable-line no-bitwise\r\n    ordinal >>>= 6; // eslint-disable-line no-bitwise\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nconst leadingCharIndex: Map<number, number> = new Map();\r\nfor (let i: number = 0; i < 64; i++) {\r\n  leadingCharIndex.set(IDENTIFIER_LEADING_DIGITS.charCodeAt(i), i);\r\n}\r\n\r\nconst trailingCharIndex: Map<number, number> = new Map();\r\nfor (let i: number = 0; i < 64; i++) {\r\n  trailingCharIndex.set(IDENTIFIER_TRAILING_DIGITS.charCodeAt(i), i);\r\n}\r\n\r\n/**\r\n * Converts an identifier into the ordinal that would produce it, not accounting for reserved keywords\r\n * Returns NaN if the result would exceed 31 bits\r\n */\r\nexport function getOrdinalFromIdentifierInternal(identifier: string): number {\r\n  let ordinal: number = 0;\r\n\r\n  for (let i: number = identifier.length - 1; i > 0; i--) {\r\n    if (ordinal >= 0x2000000) {\r\n      return NaN;\r\n    }\r\n\r\n    ordinal <<= 6; // eslint-disable-line no-bitwise\r\n    ordinal += trailingCharIndex.get(identifier.charCodeAt(i))! + 1;\r\n  }\r\n\r\n  if (ordinal >= 0x2000000) {\r\n    return NaN;\r\n  }\r\n\r\n  ordinal *= 54;\r\n  ordinal += leadingCharIndex.get(identifier.charCodeAt(0))!;\r\n  return ordinal;\r\n}\r\n\r\n/**\r\n * getIdentifier(n) would otherwise return each of these specified ECMAScript reserved keywords, which are not legal identifiers.\r\n */\r\nconst RESERVED_ORDINALS: number[] = ((): number[] => {\r\n  const reserved: number[] = [];\r\n  for (const keyword of RESERVED_KEYWORDS) {\r\n    const ordinal: number = getOrdinalFromIdentifierInternal(keyword);\r\n    if (!isNaN(ordinal)) {\r\n      reserved.push(ordinal);\r\n    }\r\n  }\r\n  return reserved.sort((x: number, y: number) => x - y);\r\n})();\r\n\r\n/**\r\n * Gets a base54 string suitable for use as a JavaScript identifier, omitting those that are valid ECMAScript keywords\r\n * Not guaranteed not to collide if `ordinal` >= 100000\r\n *\r\n * @param ordinal The number to convert to a base54 identifier\r\n */\r\nexport function getIdentifier(ordinal: number): string {\r\n  // Need to skip over reserved keywords\r\n  for (\r\n    let i: number = 0, len: number = RESERVED_ORDINALS.length;\r\n    i < len && ordinal >= RESERVED_ORDINALS[i];\r\n    i++\r\n  ) {\r\n    ++ordinal;\r\n  }\r\n\r\n  return getIdentifierInternal(ordinal);\r\n}\r\n"]}