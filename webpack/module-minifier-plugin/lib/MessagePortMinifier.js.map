{"version":3,"file":"MessagePortMinifier.js","sourceRoot":"","sources":["../src/MessagePortMinifier.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAU3D;;;GAGG;AACH,MAAa,mBAAmB;IAK9B,YAAmB,IAAiB;QAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,MAAM,SAAS,GAA+C,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;QAE5F,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAmD,EAAE,EAAE;YACzE,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;gBAC/B,MAAM,mBAAmB,GAAkC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAE,CAAC;gBACxF,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC/B,KAAK,MAAM,QAAQ,IAAI,mBAAmB,EAAE;oBAC1C,QAAQ,CAAC,OAAO,CAAC,CAAC;iBACnB;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,OAAmC,EAAE,QAAqC;QACtF,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;QAEzB,MAAM,SAAS,GAA8C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvF,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,OAAO;SACR;QAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEtC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;CACF;AAvCD,kDAuCC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  IModuleMinificationCallback,\r\n  IModuleMinificationRequest,\r\n  IModuleMinificationResult,\r\n  IModuleMinifier\r\n} from './ModuleMinifierPlugin.types';\r\nimport { MessagePort } from 'worker_threads';\r\n\r\n/**\r\n * Minifier implementation that outsources requests to the other side of a MessagePort\r\n * @public\r\n */\r\nexport class MessagePortMinifier implements IModuleMinifier {\r\n  public readonly port: MessagePort;\r\n\r\n  private readonly _callbacks: Map<string, IModuleMinificationCallback[]>;\r\n\r\n  public constructor(port: MessagePort) {\r\n    this.port = port;\r\n\r\n    const callbacks: Map<string, IModuleMinificationCallback[]> = (this._callbacks = new Map());\r\n\r\n    port.on('message', (message: IModuleMinificationResult | number | false) => {\r\n      if (typeof message === 'object') {\r\n        const callbacksForRequest: IModuleMinificationCallback[] = callbacks.get(message.hash)!;\r\n        callbacks.delete(message.hash);\r\n        for (const callback of callbacksForRequest) {\r\n          callback(message);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * No-op code transform.\r\n   * @param request - The request to process\r\n   * @param callback - The callback to invoke\r\n   */\r\n  public minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void {\r\n    const { hash } = request;\r\n\r\n    const callbacks: IModuleMinificationCallback[] | undefined = this._callbacks.get(hash);\r\n    if (callbacks) {\r\n      callbacks.push(callback);\r\n      return;\r\n    }\r\n\r\n    this._callbacks.set(hash, [callback]);\r\n\r\n    this.port.postMessage(request);\r\n  }\r\n}\r\n"]}