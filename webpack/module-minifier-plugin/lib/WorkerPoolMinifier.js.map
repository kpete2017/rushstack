{"version":3,"file":"WorkerPoolMinifier.js","sourceRoot":"","sources":["../src/WorkerPoolMinifier.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  IModuleMinificationCallback,\r\n  IModuleMinificationResult,\r\n  IModuleMinificationRequest,\r\n  IModuleMinifier\r\n} from './ModuleMinifierPlugin.types';\r\nimport { MinifyOptions } from 'terser';\r\nimport { Worker } from 'worker_threads';\r\nimport { WorkerPool } from './workerPool/WorkerPool';\r\nimport { cpus } from 'os';\r\n\r\nimport './OverrideWebpackIdentifierAllocation';\r\n\r\n/**\r\n * Options for configuring the WorkerPoolMinifier\r\n * @public\r\n */\r\nexport interface IWorkerPoolMinifierOptions {\r\n  /**\r\n   * Maximum number of worker threads to use. Will never use more than there are modules to process.\r\n   * Defaults to os.cpus().length\r\n   */\r\n  maxThreads?: number;\r\n  /**\r\n   * The options to forward to Terser.\r\n   * `output.comments` is currently not configurable and will always extract license comments to a separate file.\r\n   */\r\n  terserOptions?: MinifyOptions;\r\n}\r\n\r\n/**\r\n * Minifier implementation that uses a thread pool for minification.\r\n * @public\r\n */\r\nexport class WorkerPoolMinifier implements IModuleMinifier {\r\n  private readonly _pool: WorkerPool;\r\n\r\n  private _refCount: number;\r\n  private _deduped: number;\r\n  private _minified: number;\r\n  private readonly _resultCache: Map<string, IModuleMinificationResult>;\r\n  private readonly _activeRequests: Map<string, IModuleMinificationCallback[]>;\r\n\r\n  public constructor(options: IWorkerPoolMinifierOptions) {\r\n    const { maxThreads = cpus().length, terserOptions = {} } = options || {};\r\n\r\n    const activeRequests: Map<string, IModuleMinificationCallback[]> = new Map();\r\n    const resultCache: Map<string, IModuleMinificationResult> = new Map();\r\n    const terserPool: WorkerPool = new WorkerPool({\r\n      id: 'Minifier',\r\n      maxWorkers: maxThreads,\r\n      prepareWorker: (worker: Worker) => {\r\n        worker.on('message', (message: IModuleMinificationResult) => {\r\n          const callbacks: IModuleMinificationCallback[] | undefined = activeRequests.get(message.hash)!;\r\n          activeRequests.delete(message.hash);\r\n          resultCache.set(message.hash, message);\r\n          for (const callback of callbacks) {\r\n            callback(message);\r\n          }\r\n          terserPool.checkinWorker(worker);\r\n        });\r\n      },\r\n      workerData: terserOptions,\r\n      workerScriptPath: require.resolve('./workerPool/MinifierWorker')\r\n    });\r\n\r\n    this._activeRequests = activeRequests;\r\n    this._refCount = 0;\r\n    this._resultCache = resultCache;\r\n    this._pool = terserPool;\r\n\r\n    this._deduped = 0;\r\n    this._minified = 0;\r\n  }\r\n\r\n  public get maxThreads(): number {\r\n    return this._pool.maxWorkers;\r\n  }\r\n\r\n  public set maxThreads(threads: number) {\r\n    this._pool.maxWorkers = threads;\r\n  }\r\n\r\n  /**\r\n   * Transform code by farming it out to a worker pool.\r\n   * @param request - The request to process\r\n   * @param callback - The callback to invoke\r\n   */\r\n  public minify(request: IModuleMinificationRequest, callback: IModuleMinificationCallback): void {\r\n    const { hash } = request;\r\n\r\n    const cached: IModuleMinificationResult | undefined = this._resultCache.get(hash);\r\n    if (cached) {\r\n      ++this._deduped;\r\n      return callback(cached);\r\n    }\r\n\r\n    const { _activeRequests: activeRequests } = this;\r\n    const callbacks: IModuleMinificationCallback[] | undefined = activeRequests.get(hash);\r\n    if (callbacks) {\r\n      ++this._deduped;\r\n      callbacks.push(callback);\r\n      return;\r\n    }\r\n\r\n    activeRequests.set(hash, [callback]);\r\n    ++this._minified;\r\n\r\n    this._pool\r\n      .checkoutWorkerAsync(true)\r\n      .then((worker) => {\r\n        worker.postMessage(request);\r\n      })\r\n      .catch((error: Error) => {\r\n        const errorCallbacks: IModuleMinificationCallback[] = activeRequests.get(hash)!;\r\n        for (const errorCallback of errorCallbacks) {\r\n          errorCallback({\r\n            hash,\r\n            error,\r\n            code: undefined,\r\n            map: undefined,\r\n            extractedComments: undefined\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  public ref(): () => Promise<void> {\r\n    if (++this._refCount === 1) {\r\n      this._pool.reset();\r\n    }\r\n\r\n    return async () => {\r\n      if (--this._refCount === 0) {\r\n        await this._pool.finishAsync();\r\n        console.log(`Module minification: ${this._deduped} Deduped, ${this._minified} Processed`);\r\n      }\r\n    };\r\n  }\r\n}\r\n"]}