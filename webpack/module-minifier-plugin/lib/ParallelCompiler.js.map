{"version":3,"file":"ParallelCompiler.js","sourceRoot":"","sources":["../src/ParallelCompiler.ts"],"names":[],"mappings":"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","sourcesContent":["import { MinifyOptions } from 'terser';\r\nimport { cpus } from 'os';\r\nimport { resolve } from 'path';\r\nimport { Configuration } from 'webpack';\r\nimport { WorkerPoolMinifier } from './WorkerPoolMinifier';\r\nimport { WorkerPool } from './workerPool/WorkerPool';\r\nimport { Worker } from 'worker_threads';\r\nimport { IModuleMinificationRequest, IModuleMinificationResult } from './ModuleMinifierPlugin.types';\r\n\r\nexport interface IParallelWebpackOptions {\r\n  cacheDirectory?: string;\r\n  configFilePath: string;\r\n  maxCompilationThreads?: number;\r\n  sourceMap?: boolean | undefined;\r\n  terserOptions?: MinifyOptions;\r\n  usePortableModules?: boolean;\r\n}\r\n\r\n/**\r\n * Formats a delta of `process.hrtime.bigint()` values as a string\r\n * @param timeNs\r\n */\r\nfunction formatTime(timeNs: bigint): string {\r\n  let unit: string = 'ns';\r\n  let fraction: bigint = 0n;\r\n  if (timeNs > 1e3) {\r\n    unit = 'us';\r\n    fraction = timeNs % 1000n;\r\n    timeNs /= 1000n;\r\n  }\r\n  if (timeNs > 1e3) {\r\n    unit = 'ms';\r\n    fraction = timeNs % 1000n;\r\n    timeNs /= 1000n;\r\n  }\r\n  if (timeNs > 1e3) {\r\n    unit = 's';\r\n    fraction = timeNs % 1000n;\r\n    timeNs /= 1000n;\r\n  }\r\n\r\n  return `${timeNs}.${('000' + fraction).slice(-3, -1)} ${unit}`;\r\n}\r\n\r\nexport async function runParallel(options: IParallelWebpackOptions): Promise<void> {\r\n  const resolvedPath: string = resolve(options.configFilePath);\r\n\r\n  const rawConfig: Configuration | Configuration[] = require(resolvedPath); // eslint-disable-line @typescript-eslint/no-var-requires\r\n  const configArray: Configuration[] = Array.isArray(rawConfig) ? rawConfig : [rawConfig];\r\n  const configCount: number = configArray.length;\r\n\r\n  const totalCpus: number = cpus().length;\r\n\r\n  // TODO: Use all cores if not minifying\r\n  const {\r\n    maxCompilationThreads: maxConfiguredCompilationThreads = Math.max(\r\n      totalCpus > 8 ? (totalCpus * 3) >> 2 : totalCpus >> 1,\r\n      1\r\n    ),\r\n    sourceMap,\r\n    usePortableModules\r\n  } = options;\r\n\r\n  const maxCompilationThreads: number = Math.min(configCount, maxConfiguredCompilationThreads);\r\n\r\n  const maxCompressionThreads: number = Math.max(1, totalCpus - maxCompilationThreads);\r\n\r\n  const minifier: WorkerPoolMinifier = new WorkerPoolMinifier({\r\n    terserOptions: options.terserOptions,\r\n    maxThreads: maxCompressionThreads\r\n  });\r\n\r\n  const minifierCleanup: () => Promise<void> = minifier.ref();\r\n\r\n  const webpackPool: WorkerPool = new WorkerPool({\r\n    id: 'Webpack',\r\n    maxWorkers: maxCompilationThreads,\r\n    onWorkerDestroyed: (): void => {\r\n      // Allocate the webpack worker to terser\r\n      minifier.maxThreads++;\r\n    },\r\n    workerScriptPath: require.resolve('./workerPool/WebpackWorker'),\r\n    workerData: {\r\n      configFilePath: resolvedPath,\r\n      sourceMap,\r\n      usePortableModules\r\n    }\r\n  });\r\n\r\n  let processed: number = 0;\r\n  const startTime: bigint = process.hrtime.bigint();\r\n\r\n  for (let i: number = 0; i < configCount; i++) {\r\n    const webpackWorker: Worker = await webpackPool.checkoutWorkerAsync(true);\r\n\r\n    const sendMinifierResult: (result: IModuleMinificationResult) => void = (\r\n      result: IModuleMinificationResult\r\n    ): void => {\r\n      webpackWorker.postMessage(result);\r\n    };\r\n\r\n    const workerOnMessage: (message: IModuleMinificationRequest | number) => void = (\r\n      message: IModuleMinificationRequest | number\r\n    ): void => {\r\n      if (typeof message === 'object') {\r\n        return minifier.minify(message, sendMinifierResult);\r\n      }\r\n\r\n      ++processed;\r\n      console.log(\r\n        `${processed}/${configCount} complete (${formatTime(process.hrtime.bigint() - startTime)})`\r\n      );\r\n\r\n      webpackWorker.off('message', workerOnMessage);\r\n      webpackPool.checkinWorker(webpackWorker);\r\n    };\r\n\r\n    webpackWorker.on('message', workerOnMessage);\r\n    webpackWorker.postMessage(i);\r\n  }\r\n\r\n  await webpackPool.finishAsync();\r\n\r\n  await minifierCleanup();\r\n}\r\n"]}