{"version":3,"file":"TypeUuid.test.js","sourceRoot":"","sources":["../../src/test/TypeUuid.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,0CAAuC;AAEvC,MAAM,KAAK,GAAW,sCAAsC,CAAC;AAC7D,MAAM,KAAK,GAAW,sCAAsC,CAAC;AAE7D,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACvD,MAAM,CAAC;SAAG;QACV,MAAM,CAAE,SAAQ,CAAC;SAAG;QAEpB,MAAM,CAAE,SAAQ,CAAC;YACf,YAAmB,CAAS;gBAC1B,KAAK,EAAE,CAAC;YACV,CAAC;SACF;QAED,mBAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACjC,mBAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAEjC,MAAM,CAAC,GAAM,IAAI,CAAC,EAAE,CAAC;QACrB,MAAM,CAAC,GAAM,IAAI,CAAC,EAAE,CAAC;QACrB,MAAM,CAAC,GAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAExB,MAAM,CAAC,mBAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,CAAC,mBAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,sCAAsC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACxF,MAAM,CAAC,mBAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC7C,MAAM,CAAC;SAAG;QACV,mBAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACjC,MAAM,CAAC,GAAG,EAAE,CAAC,mBAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACtC,MAAM,CAAC,mBAAQ,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/D,MAAM,CAAC,mBAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACzC,MAAM,KAAK,GAAW,sCAAsC,CAAC;QAE7D,MAAM,CAAC;YACE,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,QAAgB;gBACjD,OAAO,mBAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAChD,CAAC;SACF;QACD,MAAM,EAAE;YACC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,QAAgB;gBACjD,OAAO,mBAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAChD,CAAC;SACF;QAED,mBAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACjC,mBAAQ,CAAC,aAAa,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAElC,MAAM,CAAC,GAAO,IAAI,EAAE,EAAE,CAAC;QACvB,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TypeUuid } from '../TypeUuid';\r\n\r\nconst UuidA: string = '122f9816-15c2-480f-8c12-ed94d586b653';\r\nconst UuidC: string = 'db7dae9b-38d2-4a0a-a62f-ac6b71c2c575';\r\n\r\ndescribe('TypeUuid', () => {\r\n  test('correctly identifies types with inheritance', () => {\r\n    class A {}\r\n    class B extends A {}\r\n\r\n    class C extends B {\r\n      public constructor(x: number) {\r\n        super();\r\n      }\r\n    }\r\n\r\n    TypeUuid.registerClass(A, UuidA);\r\n    TypeUuid.registerClass(C, UuidC);\r\n\r\n    const a: A = new A();\r\n    const b: B = new B();\r\n    const c: C = new C(123);\r\n\r\n    expect(TypeUuid.isInstanceOf(a, UuidA)).toEqual(true);\r\n    expect(TypeUuid.isInstanceOf(b, 'b205484a-fe48-4f40-bbd4-d7d46525637f')).toEqual(false);\r\n    expect(TypeUuid.isInstanceOf(c, UuidC)).toEqual(true);\r\n  });\r\n  test('forbids multiple type assignments', () => {\r\n    class A {}\r\n    TypeUuid.registerClass(A, UuidA);\r\n    expect(() => TypeUuid.registerClass(A, UuidC)).toThrow(/already registered/);\r\n  });\r\n  test('handles undefined and null', () => {\r\n    expect(TypeUuid.isInstanceOf(undefined, UuidA)).toEqual(false);\r\n    expect(TypeUuid.isInstanceOf(null, UuidA)).toEqual(false);\r\n  });\r\n  test('works with Symbol.hasInstance', () => {\r\n    const uuidQ: string = 'c9d85505-40de-4553-8da2-6604dccdc65f';\r\n\r\n    class Q {\r\n      public static [Symbol.hasInstance](instance: object): boolean {\r\n        return TypeUuid.isInstanceOf(instance, uuidQ);\r\n      }\r\n    }\r\n    class Q2 {\r\n      public static [Symbol.hasInstance](instance: object): boolean {\r\n        return TypeUuid.isInstanceOf(instance, uuidQ);\r\n      }\r\n    }\r\n\r\n    TypeUuid.registerClass(Q, uuidQ);\r\n    TypeUuid.registerClass(Q2, uuidQ);\r\n\r\n    const q: Q2 = new Q2();\r\n    expect(q instanceof Q).toEqual(true);\r\n  });\r\n});\r\n"]}