{"version":3,"file":"Async.test.js","sourceRoot":"","sources":["../../src/test/Async.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Async } from '../Async';\r\n\r\ndescribe('Async', () => {\r\n  describe('mapAsync', () => {\r\n    it('returns the same result as built-in Promise.all', async () => {\r\n      const array: number[] = [1, 2, 3, 4, 5, 6, 7, 8];\r\n      const fn: (item: number) => Promise<string> = async (item) => `result ${item}`;\r\n\r\n      expect(await Async.mapAsync(array, fn)).toEqual(await Promise.all(array.map(fn)));\r\n    });\r\n\r\n    it('passes an index parameter to the callback function', async () => {\r\n      const array: number[] = [1, 2, 3];\r\n      const fn: (item: number, index: number) => Promise<string> = jest.fn(async (item) => `result ${item}`);\r\n\r\n      await Async.mapAsync(array, fn);\r\n      expect(fn).toHaveBeenNthCalledWith(1, 1, 0);\r\n      expect(fn).toHaveBeenNthCalledWith(2, 2, 1);\r\n      expect(fn).toHaveBeenNthCalledWith(3, 3, 2);\r\n    });\r\n\r\n    it('returns the same result as built-in Promise.all', async () => {\r\n      const array: number[] = [1, 2, 3, 4, 5, 6, 7, 8];\r\n      const fn: (item: number) => Promise<string> = async (item) => `result ${item}`;\r\n\r\n      expect(await Async.mapAsync(array, fn)).toEqual(await Promise.all(array.map(fn)));\r\n    });\r\n\r\n    it('if concurrency is set, ensures no more than N operations occur in parallel', async () => {\r\n      let running: number = 0;\r\n      let maxRunning: number = 0;\r\n\r\n      const array: number[] = [1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\n      const fn: (item: number) => Promise<string> = async (item) => {\r\n        running++;\r\n        await Async.sleep(1);\r\n        maxRunning = Math.max(maxRunning, running);\r\n        running--;\r\n        return `result ${item}`;\r\n      };\r\n\r\n      expect(await Async.mapAsync(array, fn, { concurrency: 3 })).toEqual([\r\n        'result 1',\r\n        'result 2',\r\n        'result 3',\r\n        'result 4',\r\n        'result 5',\r\n        'result 6',\r\n        'result 7',\r\n        'result 8'\r\n      ]);\r\n      expect(maxRunning).toEqual(3);\r\n    });\r\n  });\r\n\r\n  describe('forEachAsync', () => {\r\n    it('if concurrency is set, ensures no more than N operations occur in parallel', async () => {\r\n      let running: number = 0;\r\n      let maxRunning: number = 0;\r\n\r\n      const array: number[] = [1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\n      const fn: (item: number) => Promise<void> = jest.fn(async (item) => {\r\n        running++;\r\n        await Async.sleep(1);\r\n        maxRunning = Math.max(maxRunning, running);\r\n        running--;\r\n      });\r\n\r\n      await Async.forEachAsync(array, fn, { concurrency: 3 });\r\n      expect(fn).toHaveBeenCalledTimes(8);\r\n      expect(maxRunning).toEqual(3);\r\n    });\r\n\r\n    it('rejects if any operation rejects', async () => {\r\n      const array: number[] = [1, 2, 3];\r\n\r\n      const fn: (item: number) => Promise<void> = jest.fn(async (item) => {\r\n        await Async.sleep(1);\r\n        if (item === 3) throw new Error('Something broke');\r\n      });\r\n\r\n      await expect(() => Async.forEachAsync(array, fn, { concurrency: 3 })).rejects.toThrowError(\r\n        'Something broke'\r\n      );\r\n      expect(fn).toHaveBeenCalledTimes(3);\r\n    });\r\n\r\n    it('rejects if any operation synchronously throws', async () => {\r\n      const array: number[] = [1, 2, 3];\r\n\r\n      // The compiler is (rightly) very concerned about us claiming that this synchronous\r\n      // function is going to return a promise. This situation is not very likely in a\r\n      // TypeScript project, but it's such a common problem in JavaScript projects that\r\n      // it's worth doing an explicit test.\r\n      const fn: (item: number) => Promise<void> = jest.fn((item) => {\r\n        if (item === 3) throw new Error('Something broke');\r\n      }) as unknown as (item: number) => Promise<void>;\r\n\r\n      await expect(() => Async.forEachAsync(array, fn, { concurrency: 3 })).rejects.toThrowError(\r\n        'Something broke'\r\n      );\r\n      expect(fn).toHaveBeenCalledTimes(3);\r\n    });\r\n  });\r\n});\r\n"]}