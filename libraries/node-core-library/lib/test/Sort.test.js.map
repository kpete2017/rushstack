{"version":3,"file":"Sort.test.js","sourceRoot":"","sources":["../../src/test/Sort.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Sort } from '../Sort';\r\n\r\ntest('Sort.compareByValue', () => {\r\n  const array: number[] = [3, 6, 2];\r\n  array.sort(Sort.compareByValue); // [2, 3, 6]\r\n});\r\n\r\ntest('Sort.compareByValue cases', () => {\r\n  const values: unknown[] = [undefined, null, -1, 1];\r\n  const results: string[] = [];\r\n  for (let i: number = 0; i < values.length; ++i) {\r\n    for (let j: number = 0; j < values.length; ++j) {\r\n      const x: unknown = values[i];\r\n      const y: unknown = values[j];\r\n      let relation: string = '?';\r\n      switch (Sort.compareByValue(x, y)) {\r\n        case -1:\r\n          relation = '<';\r\n          break;\r\n        case 0:\r\n          relation = '=';\r\n          break;\r\n        case 1:\r\n          relation = '>';\r\n          break;\r\n      }\r\n      results.push(`${x} ${relation} ${y}`);\r\n    }\r\n  }\r\n  expect(results).toMatchSnapshot();\r\n});\r\n\r\ntest('Sort.sortBy', () => {\r\n  const array: string[] = ['aaa', 'bb', 'c'];\r\n  Sort.sortBy(array, (x) => x.length); // [ 'c', 'bb', 'aaa' ]\r\n});\r\n\r\ntest('Sort.isSortedBy', () => {\r\n  const array: string[] = ['a', 'bb', 'ccc'];\r\n  Sort.isSortedBy(array, (x) => x.length); // true\r\n});\r\n\r\ntest('Sort.sortMapKeys', () => {\r\n  const map: Map<string, number> = new Map<string, number>();\r\n  map.set('zebra', 1);\r\n  map.set('goose', 2);\r\n  map.set('aardvark', 3);\r\n  Sort.sortMapKeys(map);\r\n  expect(Array.from(map.keys())).toEqual(['aardvark', 'goose', 'zebra']);\r\n});\r\n\r\ntest('Sort.sortSetBy', () => {\r\n  const set: Set<string> = new Set<string>();\r\n  set.add('aaa');\r\n  set.add('bb');\r\n  set.add('c');\r\n  Sort.sortSetBy(set, (x) => x.length);\r\n  expect(Array.from(set)).toEqual(['c', 'bb', 'aaa']);\r\n});\r\n\r\ntest('Sort.sortSet', () => {\r\n  const set: Set<string> = new Set<string>();\r\n  set.add('zebra');\r\n  set.add('goose');\r\n  set.add('aardvark');\r\n  Sort.sortSet(set);\r\n  expect(Array.from(set)).toEqual(['aardvark', 'goose', 'zebra']);\r\n});\r\n"]}