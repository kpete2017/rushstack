{"version":3,"file":"Executable.test.js","sourceRoot":"","sources":["../../src/test/Executable.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as child_process from 'child_process';\r\n\r\nimport { Executable, IExecutableSpawnSyncOptions } from '../Executable';\r\nimport { FileSystem } from '../FileSystem';\r\nimport { PosixModeBits } from '../PosixModeBits';\r\nimport { Text } from '../Text';\r\n\r\n// The PosixModeBits are intended to be used with bitwise operations.\r\n/* eslint-disable no-bitwise */\r\n\r\n// Use src/test/test-data instead of lib/test/test-data\r\nconst executableFolder: string = path.join(__dirname, '..', '..', 'src', 'test', 'test-data', 'executable');\r\n\r\nlet environment: NodeJS.ProcessEnv;\r\n\r\nif (os.platform() === 'win32') {\r\n  environment = {\r\n    PATH: [\r\n      path.join(executableFolder, 'skipped'),\r\n      path.join(executableFolder, 'success'),\r\n      path.join(executableFolder, 'fail'),\r\n      path.dirname(process.execPath) // the folder where node.exe can be found\r\n    ].join(path.delimiter),\r\n\r\n    PATHEXT: '.COM;.EXE;.BAT;.CMD;.VBS',\r\n\r\n    TEST_VAR: '123'\r\n  };\r\n} else {\r\n  environment = {\r\n    PATH: [\r\n      path.join(executableFolder, 'skipped'),\r\n      path.join(executableFolder, 'success'),\r\n      path.join(executableFolder, 'fail'),\r\n      path.dirname(process.execPath), // the folder where node.exe can be found\r\n      // These are needed because our example script needs to find bash\r\n      '/usr/local/bin',\r\n      '/usr/bin',\r\n      '/bin'\r\n    ].join(path.delimiter),\r\n\r\n    TEST_VAR: '123'\r\n  };\r\n}\r\n\r\nconst options: IExecutableSpawnSyncOptions = {\r\n  environment: environment,\r\n  currentWorkingDirectory: executableFolder,\r\n  stdio: 'pipe'\r\n};\r\n\r\nbeforeAll(() => {\r\n  // Make sure the test folder exists where we expect it\r\n  expect(FileSystem.exists(executableFolder)).toEqual(true);\r\n\r\n  // Git's core.filemode setting wrongly defaults to true on Windows.  This design flaw makes\r\n  // it completely impractical to store POSIX file permissions in a cross-platform Git repo.\r\n  // So instead we set them before the test runs, and then revert them after the test completes.\r\n  if (os.platform() !== 'win32') {\r\n    FileSystem.changePosixModeBits(\r\n      path.join(executableFolder, 'success', 'npm-binary-wrapper'),\r\n      PosixModeBits.AllRead | PosixModeBits.AllWrite | PosixModeBits.AllExecute\r\n    );\r\n    FileSystem.changePosixModeBits(\r\n      path.join(executableFolder, 'success', 'bash-script.sh'),\r\n      PosixModeBits.AllRead | PosixModeBits.AllWrite | PosixModeBits.AllExecute\r\n    );\r\n  }\r\n});\r\n\r\nafterAll(() => {\r\n  // Revert the permissions to the defaults\r\n  if (os.platform() !== 'win32') {\r\n    FileSystem.changePosixModeBits(\r\n      path.join(executableFolder, 'success', 'npm-binary-wrapper'),\r\n      PosixModeBits.AllRead | PosixModeBits.AllWrite\r\n    );\r\n    FileSystem.changePosixModeBits(\r\n      path.join(executableFolder, 'success', 'bash-script.sh'),\r\n      PosixModeBits.AllRead | PosixModeBits.AllWrite\r\n    );\r\n  }\r\n});\r\n\r\ntest('Executable.tryResolve() pathless', () => {\r\n  const resolved: string | undefined = Executable.tryResolve('npm-binary-wrapper', options);\r\n  expect(resolved).toBeDefined();\r\n  const resolvedRelative: string = Text.replaceAll(path.relative(executableFolder, resolved!), '\\\\', '/');\r\n\r\n  if (os.platform() === 'win32') {\r\n    // On Windows, we should find npm-binary-wrapper.cmd instead of npm-binary-wrapper\r\n    expect(resolvedRelative).toEqual('success/npm-binary-wrapper.cmd');\r\n  } else {\r\n    expect(resolvedRelative).toEqual('success/npm-binary-wrapper');\r\n  }\r\n\r\n  // We should not find the \"missing-extension\" at all, because its file extension\r\n  // is not executable on Windows (and the execute bit is missing on Unix)\r\n  expect(Executable.tryResolve('missing-extension', options)).toBeUndefined();\r\n});\r\n\r\ntest('Executable.tryResolve() with path', () => {\r\n  const resolved: string | undefined = Executable.tryResolve('./npm-binary-wrapper', options);\r\n  expect(resolved).toBeUndefined();\r\n});\r\n\r\nfunction executeNpmBinaryWrapper(args: string[]): string[] {\r\n  const result: child_process.SpawnSyncReturns<string> = Executable.spawnSync(\r\n    'npm-binary-wrapper',\r\n    args,\r\n    options\r\n  );\r\n  expect(result.error).toBeUndefined();\r\n\r\n  expect(result.stderr).toBeDefined();\r\n  expect(result.stderr.toString()).toEqual('');\r\n\r\n  expect(result.stdout).toBeDefined();\r\n  const outputLines: string[] = result.stdout\r\n    .toString()\r\n    .split(/[\\r\\n]+/g)\r\n    .map((x) => x.trim());\r\n\r\n  let lineIndex: number = 0;\r\n  if (os.platform() === 'win32') {\r\n    expect(outputLines[lineIndex++]).toEqual('Executing npm-binary-wrapper.cmd with args:');\r\n  } else {\r\n    expect(outputLines[lineIndex++]).toEqual('Executing npm-binary-wrapper with args:');\r\n  }\r\n  // console.log('npm-binary-wrapper.cmd ARGS: ' + outputLines[lineIndex]);\r\n  ++lineIndex; // skip npm-binary-wrapper's args\r\n\r\n  expect(outputLines[lineIndex++]).toEqual('Executing javascript-file.js with args:');\r\n\r\n  const stringifiedArgv: string = outputLines[lineIndex++];\r\n  expect(stringifiedArgv.substr(0, 2)).toEqual('[\"');\r\n\r\n  const argv: string[] = JSON.parse(stringifiedArgv);\r\n  // Discard the first two array entries whose path is nondeterministic\r\n  argv.shift(); // the path to node.exe\r\n  argv.shift(); // the path to javascript-file.js\r\n\r\n  return argv;\r\n}\r\n\r\ntest('Executable.spawnSync(\"npm-binary-wrapper\") simple', () => {\r\n  const args: string[] = ['arg1', 'arg2', 'arg3'];\r\n  expect(executeNpmBinaryWrapper(args)).toEqual(args);\r\n});\r\n\r\ntest('Executable.spawnSync(\"npm-binary-wrapper\") edge cases 1', () => {\r\n  // Characters that confuse the CreateProcess() WIN32 API's encoding\r\n  const args: string[] = ['', '/', ' \\t ', '\"a', 'b\"', '\"c\"', '\\\\\"\\\\d', '!', '!TEST_VAR!'];\r\n  expect(executeNpmBinaryWrapper(args)).toEqual(args);\r\n});\r\n\r\ntest('Executable.spawnSync(\"npm-binary-wrapper\") edge cases 2', () => {\r\n  // All ASCII punctuation\r\n  const args: string[] = [\r\n    // Characters that are impossible to escape for cmd.exe:\r\n    // %^&|<>  newline\r\n    '~!@#$*()_+`={}[]:\";\\'?,./',\r\n    '~!@#$*()_+`={}[]:\";\\'?,./'\r\n  ];\r\n  expect(executeNpmBinaryWrapper(args)).toEqual(args);\r\n});\r\n\r\ntest('Executable.spawnSync(\"npm-binary-wrapper\") edge cases 2', () => {\r\n  // All ASCII punctuation\r\n  const args: string[] = [\r\n    // Characters that are impossible to escape for cmd.exe:\r\n    // %^&|<>  newline\r\n    '~!@#$*()_+`={}[]:\";\\'?,./',\r\n    '~!@#$*()_+`={}[]:\";\\'?,./'\r\n  ];\r\n  expect(executeNpmBinaryWrapper(args)).toEqual(args);\r\n});\r\n\r\ntest('Executable.spawnSync(\"npm-binary-wrapper\") bad characters', () => {\r\n  if (os.platform() === 'win32') {\r\n    expect(() => {\r\n      executeNpmBinaryWrapper(['abc%123']);\r\n    }).toThrowError(\r\n      'The command line argument \"abc%123\" contains a special character \"%\"' +\r\n        ' that cannot be escaped for the Windows shell'\r\n    );\r\n    expect(() => {\r\n      executeNpmBinaryWrapper(['abc<>123']);\r\n    }).toThrowError(\r\n      'The command line argument \"abc<>123\" contains a special character \"<\"' +\r\n        ' that cannot be escaped for the Windows shell'\r\n    );\r\n  }\r\n});\r\n\r\ntest('Executable.spawn(\"npm-binary-wrapper\")', async () => {\r\n  const executablePath: string = path.join(executableFolder, 'success', 'npm-binary-wrapper');\r\n\r\n  await expect(\r\n    (() => {\r\n      const childProcess: child_process.ChildProcess = Executable.spawn(executablePath, ['1', '2', '3'], {\r\n        environment,\r\n        currentWorkingDirectory: executableFolder\r\n      });\r\n\r\n      return new Promise<string>((resolve, reject) => {\r\n        childProcess.on('exit', (code: number) => {\r\n          resolve(`Exit with code=${code}`);\r\n        });\r\n        childProcess.on('error', (error: Error) => {\r\n          reject(`Failed with error: ${error.message}`);\r\n        });\r\n      });\r\n    })()\r\n  ).resolves.toBe('Exit with code=0');\r\n});\r\n"]}