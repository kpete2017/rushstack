{"version":3,"file":"Enum.test.js","sourceRoot":"","sources":["../../src/test/Enum.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Enum } from '../Enum';\r\n\r\n// Bidirectional map\r\nenum NumericEnum {\r\n  Apple = 1,\r\n  Banana\r\n}\r\n\r\n// Unidirectional map\r\nenum StringEnum {\r\n  Apple = 'apple',\r\n  Banana = 'banana'\r\n}\r\n\r\nenum MixedEnum {\r\n  // Bidirectional map\r\n  Apple = 1,\r\n  // Unidirectional map\r\n  Banana = 'banana'\r\n}\r\n\r\ndescribe('Enum', () => {\r\n  test('tryGetValueByKey', () => {\r\n    // NumericEnum\r\n    const numeric1: NumericEnum | undefined = Enum.tryGetValueByKey(NumericEnum, 'Apple');\r\n    expect(numeric1).toBe(NumericEnum.Apple);\r\n\r\n    const numeric2: NumericEnum | undefined = Enum.tryGetValueByKey(NumericEnum, 'Coconut');\r\n    expect(numeric2).toBeUndefined();\r\n\r\n    // StringEnum\r\n    const string1: StringEnum | undefined = Enum.tryGetValueByKey(StringEnum, 'Apple');\r\n    expect(string1).toBe(StringEnum.Apple);\r\n\r\n    const string2: StringEnum | undefined = Enum.tryGetValueByKey(StringEnum, 'Coconut');\r\n    expect(string2).toBeUndefined();\r\n\r\n    // MixedEnum\r\n    const mixed1: MixedEnum | undefined = Enum.tryGetValueByKey(MixedEnum, 'Apple');\r\n    expect(mixed1).toBe(MixedEnum.Apple);\r\n\r\n    const mixed2: MixedEnum | undefined = Enum.tryGetValueByKey(MixedEnum, 'Banana');\r\n    expect(mixed2).toBe(MixedEnum.Banana);\r\n\r\n    const mixed3: MixedEnum | undefined = Enum.tryGetValueByKey(MixedEnum, 'Coconut');\r\n    expect(mixed3).toBeUndefined();\r\n  });\r\n\r\n  test('tryGetKeyByNumber', () => {\r\n    // NumericEnum\r\n    const numeric1: string | undefined = Enum.tryGetKeyByNumber(NumericEnum, NumericEnum.Apple as number);\r\n    expect(numeric1).toBe('Apple');\r\n\r\n    const numeric2: string | undefined = Enum.tryGetKeyByNumber(NumericEnum, -1);\r\n    expect(numeric2).toBeUndefined();\r\n\r\n    // StringEnum\r\n\r\n    // Not allowed because values must be numeric:\r\n    // const string1: string | undefined = Enum.tryGetKeyByNumber(StringEnum, StringEnum.Apple);\r\n\r\n    const string2: string | undefined = Enum.tryGetKeyByNumber(StringEnum, -1);\r\n    expect(string2).toBeUndefined();\r\n\r\n    // MixedEnum\r\n    const mixed1: string | undefined = Enum.tryGetKeyByNumber(MixedEnum, MixedEnum.Apple);\r\n    expect(mixed1).toBe('Apple');\r\n\r\n    // Not allowed because values must be numeric:\r\n    // const mixed2: string | undefined = Enum.tryGetKeyByNumber(MixedEnum, MixedEnum.Banana);\r\n\r\n    const mixed3: string | undefined = Enum.tryGetKeyByNumber(MixedEnum, -1);\r\n    expect(mixed3).toBeUndefined();\r\n  });\r\n});\r\n"]}