{"version":3,"file":"Path.test.js","sourceRoot":"","sources":["../../src/test/Path.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;AAE3D,uCAAyB;AACzB,2CAA6B;AAC7B,kCAA+B;AAE/B,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;IACpB,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,EAAE;YAC7B,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;gBACzB,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC5D,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC9D,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAE/D,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC7D,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC/D,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAEhE,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEvD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACtD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;YACtB,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC1B,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACnD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEzD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACpD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACxD,MAAM,CAAC,WAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC1B,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACxD,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzD,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC1D,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC/D,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAE/D,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,EAAE;gBAC7B,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC1D,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC3D,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACjE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aAClE;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACrC,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,2BAA2B,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC3E,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,2BAA2B,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC3E,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,8BAA8B,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC9E,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACpE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC1D,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC1B,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC5D,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACnE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACnE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAE/D,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,EAAE;gBAC7B,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACjE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC7D,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACrE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACrE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACjE,MAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aACpE;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;YACjB,MAAM,CACJ,WAAI,CAAC,eAAe,CAAC,EAAE,aAAa,EAAE,0BAA0B,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAC5F,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;YAC/B,MAAM,CACJ,IAAI,CAAC,UAAU,CACb,WAAI,CAAC,eAAe,CAAC,EAAE,aAAa,EAAE,0BAA0B,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAC5F,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACb,MAAM,CACJ,WAAI,CAAC,eAAe,CAAC;gBACnB,aAAa,EAAE,8CAA8C;gBAC7D,UAAU,EAAE,0BAA0B;aACvC,CAAC,CACH,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport { Path } from '../Path';\r\n\r\ndescribe('Path', () => {\r\n  describe('isUnder', () => {\r\n    if (os.platform() === 'win32') {\r\n      test('Windows paths', () => {\r\n        expect(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\a')).toEqual(true);\r\n        expect(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\a\\\\')).toEqual(true);\r\n        expect(Path.isUnder('C:\\\\a\\\\b\\\\c.txt', 'C:\\\\a')).toEqual(true);\r\n\r\n        expect(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\b')).toEqual(false);\r\n        expect(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\b\\\\')).toEqual(false);\r\n        expect(Path.isUnder('C:\\\\a\\\\b\\\\c.txt', 'C:\\\\b')).toEqual(false);\r\n\r\n        expect(Path.isUnder('C:\\\\a\\\\b.txt', 'D:\\\\a')).toEqual(false);\r\n      });\r\n    }\r\n\r\n    test('POSIX-style paths', () => {\r\n      expect(Path.isUnder('/a/b.txt', '/a')).toEqual(true);\r\n      expect(Path.isUnder('/a/b.txt', '/a/')).toEqual(true);\r\n      expect(Path.isUnder('/a/b/c.txt', '/a')).toEqual(true);\r\n\r\n      expect(Path.isUnder('/a/b.txt', '/b')).toEqual(false);\r\n      expect(Path.isUnder('/a/b.txt', '/b/')).toEqual(false);\r\n      expect(Path.isUnder('/a/b/c.txt', '/b')).toEqual(false);\r\n    });\r\n    test('Edge cases', () => {\r\n      expect(Path.isUnder('/a', '/a')).toEqual(false);\r\n      expect(Path.isUnder('.', '.')).toEqual(false);\r\n      expect(Path.isUnder('', '')).toEqual(false);\r\n    });\r\n    test('Relative paths', () => {\r\n      expect(Path.isUnder('a/b/c', 'a/b')).toEqual(true);\r\n      expect(Path.isUnder('./a/b/c', './a/b')).toEqual(true);\r\n      expect(Path.isUnder('../a/b/c', '../a/b')).toEqual(true);\r\n\r\n      expect(Path.isUnder('a/b', 'a/b/c')).toEqual(false);\r\n      expect(Path.isUnder('./a/b', './a/b/c')).toEqual(false);\r\n      expect(Path.isUnder('../a/b', '../a/b/c')).toEqual(false);\r\n    });\r\n  });\r\n\r\n  describe('isDownwardRelative', () => {\r\n    test('Positive cases', () => {\r\n      expect(Path.isDownwardRelative('folder')).toEqual(true);\r\n      expect(Path.isDownwardRelative('folder/')).toEqual(true);\r\n      expect(Path.isDownwardRelative('./folder')).toEqual(true);\r\n      expect(Path.isDownwardRelative('./folder/file')).toEqual(true);\r\n      expect(Path.isDownwardRelative('./folder/file')).toEqual(true);\r\n\r\n      if (os.platform() === 'win32') {\r\n        expect(Path.isDownwardRelative('folder\\\\')).toEqual(true);\r\n        expect(Path.isDownwardRelative('.\\\\folder')).toEqual(true);\r\n        expect(Path.isDownwardRelative('.\\\\folder\\\\file')).toEqual(true);\r\n        expect(Path.isDownwardRelative('.\\\\folder\\\\file')).toEqual(true);\r\n      }\r\n    });\r\n    test('Degenerate positive cases', () => {\r\n      expect(Path.isDownwardRelative('folder/degenerate...')).toEqual(true);\r\n      expect(Path.isDownwardRelative('folder/...degenerate')).toEqual(true);\r\n      expect(Path.isDownwardRelative('folder/...degenerate...')).toEqual(true);\r\n      expect(Path.isDownwardRelative('folder/degenerate.../file')).toEqual(true);\r\n      expect(Path.isDownwardRelative('folder/...degenerate/file')).toEqual(true);\r\n      expect(Path.isDownwardRelative('folder/...degenerate.../file')).toEqual(true);\r\n      expect(Path.isDownwardRelative('...degenerate/file')).toEqual(true);\r\n      expect(Path.isDownwardRelative('.../file')).toEqual(true);\r\n      expect(Path.isDownwardRelative('...')).toEqual(true);\r\n    });\r\n    test('Negative cases', () => {\r\n      expect(Path.isDownwardRelative('../folder')).toEqual(false);\r\n      expect(Path.isDownwardRelative('../folder/folder')).toEqual(false);\r\n      expect(Path.isDownwardRelative('folder/../folder')).toEqual(false);\r\n      expect(Path.isDownwardRelative('/folder/file')).toEqual(false);\r\n\r\n      if (os.platform() === 'win32') {\r\n        expect(Path.isDownwardRelative('C:/folder/file')).toEqual(false);\r\n        expect(Path.isDownwardRelative('..\\\\folder')).toEqual(false);\r\n        expect(Path.isDownwardRelative('..\\\\folder\\\\folder')).toEqual(false);\r\n        expect(Path.isDownwardRelative('folder\\\\..\\\\folder')).toEqual(false);\r\n        expect(Path.isDownwardRelative('\\\\folder\\\\file')).toEqual(false);\r\n        expect(Path.isDownwardRelative('C:\\\\folder\\\\file')).toEqual(false);\r\n      }\r\n    });\r\n  });\r\n  describe('formatConcisely', () => {\r\n    test('tests', () => {\r\n      expect(\r\n        Path.formatConcisely({ pathToConvert: '/folder1/folder2/folder3', baseFolder: '/folder1' })\r\n      ).toEqual('./folder2/folder3');\r\n      expect(\r\n        path.isAbsolute(\r\n          Path.formatConcisely({ pathToConvert: '/folder1/folder2/folder3', baseFolder: '/folder4' })\r\n        )\r\n      ).toBe(true);\r\n      expect(\r\n        Path.formatConcisely({\r\n          pathToConvert: '/folder1/folder2/folder3/folder4/../file.txt',\r\n          baseFolder: '/folder1/folder2/folder3'\r\n        })\r\n      ).toEqual('./file.txt');\r\n    });\r\n  });\r\n});\r\n"]}