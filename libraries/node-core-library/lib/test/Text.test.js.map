{"version":3,"file":"Text.test.js","sourceRoot":"","sources":["../../src/test/Text.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Text } from '../Text';\r\n\r\ndescribe('Text', () => {\r\n  describe('padEnd', () => {\r\n    test(\"Throws an exception if the padding character isn't a single character\", () => {\r\n      expect(() => Text.padEnd('123', 1, '')).toThrow();\r\n      expect(() => Text.padEnd('123', 1, '  ')).toThrow();\r\n    });\r\n\r\n    test(\"Doesn't change the string if it's already at or greater than the minimum length\", () => {\r\n      expect(Text.padEnd('12345', 5)).toEqual('12345');\r\n      expect(Text.padEnd('123456', 5)).toEqual('123456');\r\n      expect(Text.padEnd('12345', 5, '0')).toEqual('12345');\r\n      expect(Text.padEnd('123456', 5, '0')).toEqual('123456');\r\n    });\r\n\r\n    test('Appends the default character (spaces) to the end of a string', () => {\r\n      expect(Text.padEnd('', 5)).toEqual('     ');\r\n      expect(Text.padEnd('123', 5)).toEqual('123  ');\r\n    });\r\n\r\n    test('Appends the characters to the end of a string', () => {\r\n      expect(Text.padEnd('', 5, '0')).toEqual('00000');\r\n      expect(Text.padEnd('123', 5, '0')).toEqual('12300');\r\n    });\r\n  });\r\n\r\n  describe('padStart', () => {\r\n    test(\"Throws an exception if the padding character isn't a single character\", () => {\r\n      expect(() => Text.padStart('123', 1, '')).toThrow();\r\n      expect(() => Text.padStart('123', 1, '  ')).toThrow();\r\n    });\r\n\r\n    test(\"Doesn't change the string if it's already at or greater than the minimum length\", () => {\r\n      expect(Text.padStart('12345', 5)).toEqual('12345');\r\n      expect(Text.padStart('123456', 5)).toEqual('123456');\r\n      expect(Text.padStart('12345', 5, '0')).toEqual('12345');\r\n      expect(Text.padStart('123456', 5, '0')).toEqual('123456');\r\n    });\r\n\r\n    test('Appends the default character (spaces) to the end of a string', () => {\r\n      expect(Text.padStart('', 5)).toEqual('     ');\r\n      expect(Text.padStart('123', 5)).toEqual('  123');\r\n    });\r\n\r\n    test('Appends the characters to the end of a string', () => {\r\n      expect(Text.padStart('', 5, '0')).toEqual('00000');\r\n      expect(Text.padStart('123', 5, '0')).toEqual('00123');\r\n    });\r\n  });\r\n\r\n  describe('truncateWithEllipsis', () => {\r\n    test('Throws an exception if the maximum length is less than zero', () => {\r\n      expect(() => Text.truncateWithEllipsis('123', -1)).toThrow();\r\n    });\r\n\r\n    test(\"Doesn't change the string if it's already shorter than the maximum length\", () => {\r\n      expect(Text.truncateWithEllipsis('', 2)).toEqual('');\r\n      expect(Text.truncateWithEllipsis('1', 2)).toEqual('1');\r\n      expect(Text.truncateWithEllipsis('12', 2)).toEqual('12');\r\n\r\n      expect(Text.truncateWithEllipsis('123', 5)).toEqual('123');\r\n      expect(Text.truncateWithEllipsis('1234', 5)).toEqual('1234');\r\n    });\r\n\r\n    test('Truncates strings', () => {\r\n      expect(Text.truncateWithEllipsis('123', 0)).toEqual('');\r\n      expect(Text.truncateWithEllipsis('123', 2)).toEqual('12');\r\n      expect(Text.truncateWithEllipsis('12345', 5)).toEqual('12345');\r\n      expect(Text.truncateWithEllipsis('123456', 5)).toEqual('12...');\r\n    });\r\n  });\r\n\r\n  describe('convertToLf', () => {\r\n    test('degenerate adjacent newlines', () => {\r\n      expect(Text.convertToLf('')).toEqual('');\r\n      expect(Text.convertToLf('\\n')).toEqual('\\n');\r\n      expect(Text.convertToLf('\\r')).toEqual('\\n');\r\n      expect(Text.convertToLf('\\n\\n')).toEqual('\\n\\n');\r\n      expect(Text.convertToLf('\\r\\n')).toEqual('\\n');\r\n      expect(Text.convertToLf('\\n\\r')).toEqual('\\n');\r\n      expect(Text.convertToLf('\\r\\r')).toEqual('\\n\\n');\r\n      expect(Text.convertToLf('\\n\\n\\n')).toEqual('\\n\\n\\n');\r\n      expect(Text.convertToLf('\\r\\n\\n')).toEqual('\\n\\n');\r\n      expect(Text.convertToLf('\\n\\r\\n')).toEqual('\\n\\n');\r\n      expect(Text.convertToLf('\\r\\r\\n')).toEqual('\\n\\n');\r\n      expect(Text.convertToLf('\\n\\n\\r')).toEqual('\\n\\n');\r\n      expect(Text.convertToLf('\\r\\n\\r')).toEqual('\\n\\n');\r\n      expect(Text.convertToLf('\\n\\r\\r')).toEqual('\\n\\n');\r\n      expect(Text.convertToLf('\\r\\r\\r')).toEqual('\\n\\n\\n');\r\n    });\r\n    test('degenerate mixed newlines', () => {\r\n      expect(Text.convertToLf('\\nX\\n\\r')).toEqual('\\nX\\n');\r\n      expect(Text.convertToLf('\\rX\\r')).toEqual('\\nX\\n');\r\n      expect(Text.convertToLf('\\r \\n')).toEqual('\\n \\n');\r\n    });\r\n  });\r\n});\r\n"]}