{"version":3,"file":"PackageJsonLookup.test.js","sourceRoot":"","sources":["../../src/test/PackageJsonLookup.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,4DAAyD;AAIzD,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE;YACZ,MAAM,CAAC,qCAAiB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACxC,MAAM,iBAAiB,GAAsB,IAAI,qCAAiB,EAAE,CAAC;YACrE,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,6BAA6B,CAAC,CAAC;YACnF,MAAM,WAAW,GAA6B,iBAAiB,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;YACtG,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,IAAI,WAAW,EAAE;gBACf,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBACpD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAE7C,gFAAgF;gBAChF,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;aAC5D;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;YACpE,MAAM,iBAAiB,GAAsB,IAAI,qCAAiB,EAAE,CAAC;YACrE,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,wCAAwC,CAAC,CAAC;YAC9F,MAAM,WAAW,GACf,iBAAiB,CAAC,yBAAyB,CAAC,cAAc,CAAC,CAAC;YAC9D,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,IAAI,WAAW,EAAE;gBACf,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBACpD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;gBAE9C,gFAAgF;gBAChF,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;aAC5D;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACzC,MAAM,iBAAiB,GAAsB,IAAI,qCAAiB,EAAE,CAAC;YACrE,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iDAAiD,CAAC,CAAC;YAEvG,6EAA6E;YAC7E,MAAM,WAAW,GAAuB,iBAAiB,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;YACjG,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,MAAM,CAAC,WAAY,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAEzE,MAAM,SAAS,GAAuB,iBAAiB,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;YAErG,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,mCAA4B,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { PackageJsonLookup } from '../PackageJsonLookup';\r\nimport { IPackageJson, INodePackageJson } from '../IPackageJson';\r\nimport { FileConstants } from '../Constants';\r\n\r\ndescribe('PackageJsonLookup', () => {\r\n  describe('basic tests', () => {\r\n    test('', () => {\r\n      expect(PackageJsonLookup.loadOwnPackageJson(__dirname).name).toEqual('@rushstack/node-core-library');\r\n    });\r\n\r\n    test('tryLoadPackageJsonFor() test', () => {\r\n      const packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n      const sourceFilePath: string = path.join(__dirname, './test-data/example-package');\r\n      const packageJson: IPackageJson | undefined = packageJsonLookup.tryLoadPackageJsonFor(sourceFilePath);\r\n      expect(packageJson).toBeDefined();\r\n      if (packageJson) {\r\n        expect(packageJson.name).toEqual('example-package');\r\n        expect(packageJson.version).toEqual('1.0.0');\r\n\r\n        // The \"nonstandardField\" should have been trimmed because loadExtraFields=false\r\n        expect(packageJson).not.toHaveProperty('nonstandardField');\r\n      }\r\n    });\r\n\r\n    test('tryLoadNodePackageJsonFor() test package with no version', () => {\r\n      const packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n      const sourceFilePath: string = path.join(__dirname, './test-data/example-package-no-version');\r\n      const packageJson: INodePackageJson | undefined =\r\n        packageJsonLookup.tryLoadNodePackageJsonFor(sourceFilePath);\r\n      expect(packageJson).toBeDefined();\r\n      if (packageJson) {\r\n        expect(packageJson.name).toEqual('example-package');\r\n        expect(packageJson.version).not.toBeDefined();\r\n\r\n        // The \"nonstandardField\" should have been trimmed because loadExtraFields=false\r\n        expect(packageJson).not.toHaveProperty('nonstandardField');\r\n      }\r\n    });\r\n\r\n    test('tryGetPackageFolderFor() test', () => {\r\n      const packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n      const sourceFilePath: string = path.join(__dirname, './test-data/example-package/src/ExampleFile.txt');\r\n\r\n      // Example: C:\\rushstack\\libraries\\node-core-library\\src\\test\\example-package\r\n      const foundFolder: string | undefined = packageJsonLookup.tryGetPackageFolderFor(sourceFilePath);\r\n      expect(foundFolder).toBeDefined();\r\n      expect(foundFolder!.search(/[\\\\/]example-package$/i)).toBeGreaterThan(0);\r\n\r\n      const foundFile: string | undefined = packageJsonLookup.tryGetPackageJsonFilePathFor(sourceFilePath);\r\n\r\n      expect(foundFile).toEqual(path.join(foundFolder || '', FileConstants.PackageJson));\r\n    });\r\n  });\r\n});\r\n"]}