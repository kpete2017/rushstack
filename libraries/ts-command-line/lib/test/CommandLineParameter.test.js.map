{"version":3,"file":"CommandLineParameter.test.js","sourceRoot":"","sources":["../../src/test/CommandLineParameter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\n\r\nimport { CommandLineAction, CommandLineParser, DynamicCommandLineParser, DynamicCommandLineAction } from '..';\r\n\r\nfunction createParser(): DynamicCommandLineParser {\r\n  const commandLineParser: DynamicCommandLineParser = new DynamicCommandLineParser({\r\n    toolFilename: 'example',\r\n    toolDescription: 'An example project'\r\n  });\r\n  commandLineParser.defineFlagParameter({\r\n    parameterLongName: '--global-flag',\r\n    parameterShortName: '-g',\r\n    description: 'A flag that affects all actions'\r\n  });\r\n\r\n  const action: DynamicCommandLineAction = new DynamicCommandLineAction({\r\n    actionName: 'do:the-job',\r\n    summary: 'does the job',\r\n    documentation: 'a longer description'\r\n  });\r\n  commandLineParser.addAction(action);\r\n\r\n  // Choice\r\n  action.defineChoiceParameter({\r\n    parameterLongName: '--choice',\r\n    parameterShortName: '-c',\r\n    description: 'A choice',\r\n    alternatives: ['one', 'two', 'three', 'default'],\r\n    environmentVariable: 'ENV_CHOICE'\r\n  });\r\n  action.defineChoiceParameter({\r\n    parameterLongName: '--choice-with-default',\r\n    description: 'A choice with a default. This description ends with a \"quoted word\"',\r\n    alternatives: ['one', 'two', 'three', 'default'],\r\n    environmentVariable: 'ENV_CHOICE2',\r\n    defaultValue: 'default'\r\n  });\r\n\r\n  // Flag\r\n  action.defineFlagParameter({\r\n    parameterLongName: '--flag',\r\n    parameterShortName: '-f',\r\n    description: 'A flag',\r\n    environmentVariable: 'ENV_FLAG'\r\n  });\r\n\r\n  // Integer\r\n  action.defineIntegerParameter({\r\n    parameterLongName: '--integer',\r\n    parameterShortName: '-i',\r\n    description: 'An integer',\r\n    argumentName: 'NUMBER',\r\n    environmentVariable: 'ENV_INTEGER'\r\n  });\r\n  action.defineIntegerParameter({\r\n    parameterLongName: '--integer-with-default',\r\n    description: 'An integer with a default',\r\n    argumentName: 'NUMBER',\r\n    environmentVariable: 'ENV_INTEGER2',\r\n    defaultValue: 123\r\n  });\r\n  action.defineIntegerParameter({\r\n    parameterLongName: '--integer-required',\r\n    description: 'An integer',\r\n    argumentName: 'NUMBER',\r\n    // Not yet supported\r\n    // environmentVariable: 'ENV_INTEGER_REQUIRED',\r\n    required: true\r\n  });\r\n\r\n  // String\r\n  action.defineStringParameter({\r\n    parameterLongName: '--string',\r\n    parameterShortName: '-s',\r\n    description: 'A string',\r\n    argumentName: 'TEXT',\r\n    environmentVariable: 'ENV_STRING'\r\n  });\r\n  action.defineStringParameter({\r\n    parameterLongName: '--string-with-default',\r\n    description: 'A string with a default',\r\n    argumentName: 'TEXT',\r\n    environmentVariable: 'ENV_STRING2',\r\n    defaultValue: '123'\r\n  });\r\n  action.defineStringParameter({\r\n    parameterLongName: '--string-with-undocumented-synonym',\r\n    description: 'A string with an undocumented synonym',\r\n    argumentName: 'TEXT',\r\n    undocumentedSynonyms: ['--undocumented-synonym']\r\n  });\r\n\r\n  // String List\r\n  action.defineStringListParameter({\r\n    parameterLongName: '--string-list',\r\n    parameterShortName: '-l',\r\n    description: 'This parameter be specified multiple times to make a list of strings',\r\n    argumentName: 'LIST_ITEM',\r\n    environmentVariable: 'ENV_STRING_LIST'\r\n  });\r\n  return commandLineParser;\r\n}\r\n\r\nfunction expectPropertiesToMatchSnapshot(object: {}, propertyNames: string[]): void {\r\n  const snapshotObject: {} = {};\r\n\r\n  for (const propertyName of propertyNames) {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    (snapshotObject as any)[propertyName] = (object as any)[propertyName];\r\n  }\r\n  expect(snapshotObject).toMatchSnapshot();\r\n}\r\n\r\nconst snapshotPropertyNames: string[] = [\r\n  'description',\r\n  'kind',\r\n  'longName',\r\n  'shortName',\r\n  'value',\r\n  'kind',\r\n  'argumentName',\r\n  'environmentVariable',\r\n  'required',\r\n  'defaultValue',\r\n  'values'\r\n];\r\n\r\ndescribe('CommandLineParameter', () => {\r\n  it('prints the global help', () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const helpText: string = colors.stripColors(commandLineParser.renderHelpText());\r\n    expect(helpText).toMatchSnapshot();\r\n  });\r\n\r\n  it('prints the action help', () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const helpText: string = colors.stripColors(commandLineParser.getAction('do:the-job').renderHelpText());\r\n    expect(helpText).toMatchSnapshot();\r\n  });\r\n\r\n  it('parses an input with ALL parameters', async () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const action: CommandLineAction = commandLineParser.getAction('do:the-job');\r\n\r\n    const args: string[] = [\r\n      '--global-flag',\r\n      'do:the-job',\r\n      '--choice',\r\n      'two',\r\n      '--flag',\r\n      '--integer',\r\n      '123',\r\n      '--integer-required',\r\n      '321',\r\n      '--string',\r\n      'hello',\r\n      '--string-list',\r\n      'first',\r\n      '--string-list',\r\n      'second'\r\n    ];\r\n\r\n    await commandLineParser.execute(args);\r\n\r\n    expect(commandLineParser.selectedAction).toBe(action);\r\n\r\n    expectPropertiesToMatchSnapshot(\r\n      commandLineParser.getFlagParameter('--global-flag'),\r\n      snapshotPropertyNames\r\n    );\r\n\r\n    expectPropertiesToMatchSnapshot(action.getChoiceParameter('--choice'), snapshotPropertyNames);\r\n    expectPropertiesToMatchSnapshot(\r\n      action.getChoiceParameter('--choice-with-default'),\r\n      snapshotPropertyNames\r\n    );\r\n    expectPropertiesToMatchSnapshot(action.getFlagParameter('--flag'), snapshotPropertyNames);\r\n    expectPropertiesToMatchSnapshot(action.getIntegerParameter('--integer'), snapshotPropertyNames);\r\n    expectPropertiesToMatchSnapshot(\r\n      action.getIntegerParameter('--integer-with-default'),\r\n      snapshotPropertyNames\r\n    );\r\n    expectPropertiesToMatchSnapshot(action.getIntegerParameter('--integer-required'), snapshotPropertyNames);\r\n    expectPropertiesToMatchSnapshot(action.getStringParameter('--string'), snapshotPropertyNames);\r\n    expectPropertiesToMatchSnapshot(\r\n      action.getStringParameter('--string-with-default'),\r\n      snapshotPropertyNames\r\n    );\r\n    expectPropertiesToMatchSnapshot(action.getStringListParameter('--string-list'), snapshotPropertyNames);\r\n\r\n    const copiedArgs: string[] = [];\r\n    for (const parameter of action.parameters) {\r\n      copiedArgs.push(`### ${parameter.longName} output: ###`);\r\n      parameter.appendToArgList(copiedArgs);\r\n    }\r\n    expect(copiedArgs).toMatchSnapshot();\r\n  });\r\n\r\n  it('parses an input with NO parameters', async () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const action: CommandLineAction = commandLineParser.getAction('do:the-job');\r\n    const args: string[] = ['do:the-job', '--integer-required', '123'];\r\n\r\n    await commandLineParser.execute(args);\r\n\r\n    expect(commandLineParser.selectedAction).toBe(action);\r\n\r\n    expectPropertiesToMatchSnapshot(\r\n      commandLineParser.getFlagParameter('--global-flag'),\r\n      snapshotPropertyNames\r\n    );\r\n\r\n    expectPropertiesToMatchSnapshot(action.getChoiceParameter('--choice'), snapshotPropertyNames);\r\n    expectPropertiesToMatchSnapshot(\r\n      action.getChoiceParameter('--choice-with-default'),\r\n      snapshotPropertyNames\r\n    );\r\n    expectPropertiesToMatchSnapshot(action.getFlagParameter('--flag'), snapshotPropertyNames);\r\n    expectPropertiesToMatchSnapshot(action.getIntegerParameter('--integer'), snapshotPropertyNames);\r\n    expectPropertiesToMatchSnapshot(\r\n      action.getIntegerParameter('--integer-with-default'),\r\n      snapshotPropertyNames\r\n    );\r\n    expectPropertiesToMatchSnapshot(action.getIntegerParameter('--integer-required'), snapshotPropertyNames);\r\n    expectPropertiesToMatchSnapshot(action.getStringParameter('--string'), snapshotPropertyNames);\r\n    expectPropertiesToMatchSnapshot(\r\n      action.getStringParameter('--string-with-default'),\r\n      snapshotPropertyNames\r\n    );\r\n    expectPropertiesToMatchSnapshot(action.getStringListParameter('--string-list'), snapshotPropertyNames);\r\n\r\n    const copiedArgs: string[] = [];\r\n    for (const parameter of action.parameters) {\r\n      copiedArgs.push(`### ${parameter.longName} output: ###`);\r\n      parameter.appendToArgList(copiedArgs);\r\n    }\r\n    expect(copiedArgs).toMatchSnapshot();\r\n  });\r\n\r\n  it('parses each parameter from an environment variable', async () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const action: CommandLineAction = commandLineParser.getAction('do:the-job');\r\n\r\n    action.defineStringListParameter({\r\n      parameterLongName: '--json-string-list',\r\n      description: 'Test JSON parsing',\r\n      argumentName: 'LIST_ITEM',\r\n      environmentVariable: 'ENV_JSON_STRING_LIST'\r\n    });\r\n\r\n    const args: string[] = ['do:the-job', '--integer-required', '1'];\r\n\r\n    process.env.ENV_CHOICE = 'one';\r\n    process.env.ENV_CHOICE2 = 'two';\r\n    process.env.ENV_FLAG = '1';\r\n    process.env.ENV_INTEGER = '111';\r\n    process.env.ENV_INTEGER2 = '222';\r\n    process.env.ENV_INTEGER_REQUIRED = '333';\r\n    process.env.ENV_STRING = 'Hello, world!';\r\n    process.env.ENV_STRING2 = 'Hello, world!';\r\n    process.env.ENV_STRING_LIST = 'simple text';\r\n    process.env.ENV_JSON_STRING_LIST = ' [ 1, true, \"Hello, world!\" ] ';\r\n\r\n    await commandLineParser.execute(args);\r\n\r\n    expect(commandLineParser.selectedAction).toBe(action);\r\n\r\n    const copiedArgs: string[] = [];\r\n    for (const parameter of action.parameters) {\r\n      copiedArgs.push(`### ${parameter.longName} output: ###`);\r\n      parameter.appendToArgList(copiedArgs);\r\n    }\r\n    expect(copiedArgs).toMatchSnapshot();\r\n  });\r\n\r\n  it('allows an undocumented synonym', async () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const action: CommandLineAction = commandLineParser.getAction('do:the-job');\r\n\r\n    const args: string[] = [\r\n      'do:the-job',\r\n      '--undocumented-synonym',\r\n      'undocumented-value',\r\n      '--integer-required',\r\n      '6'\r\n    ];\r\n\r\n    await commandLineParser.execute(args);\r\n\r\n    expect(commandLineParser.selectedAction).toBe(action);\r\n\r\n    const copiedArgs: string[] = [];\r\n    for (const parameter of action.parameters) {\r\n      copiedArgs.push(`### ${parameter.longName} output: ###`);\r\n      parameter.appendToArgList(copiedArgs);\r\n    }\r\n    expect(copiedArgs).toMatchSnapshot();\r\n  });\r\n});\r\n"]}