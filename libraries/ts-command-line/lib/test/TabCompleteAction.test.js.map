{"version":3,"file":"TabCompleteAction.test.js","sourceRoot":"","sources":["../../src/test/TabCompleteAction.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamicCommandLineParser, DynamicCommandLineAction } from '..';\r\nimport { TabCompleteAction } from '../providers/TabCompletionAction';\r\nimport { ICommandLineStringDefinition } from '../parameters/CommandLineDefinition';\r\n\r\n/**\r\n * Provides the parameter configuration for '--variant'.\r\n */\r\nconst VARIANT_PARAMETER: ICommandLineStringDefinition = {\r\n  parameterLongName: '--variant',\r\n  argumentName: 'VARIANT',\r\n  description: 'Run command using a variant installation configuration',\r\n  environmentVariable: 'RUSH_VARIANT'\r\n};\r\n\r\nasync function arrayFromAsyncIteractorAsync(iterator: AsyncIterable<string>): Promise<string[]> {\r\n  const ret: string[] = [];\r\n\r\n  for await (const val of iterator) {\r\n    ret.push(val);\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction getCommandLineParser(): DynamicCommandLineParser {\r\n  const commandLineParser: DynamicCommandLineParser = new DynamicCommandLineParser({\r\n    toolFilename: 'rush',\r\n    toolDescription: 'Rush: a scalable monorepo manager for the web',\r\n    enableTabCompletionAction: true\r\n  });\r\n\r\n  const addAction: DynamicCommandLineAction = new DynamicCommandLineAction({\r\n    actionName: 'add',\r\n    summary: 'Adds a dependency to the package.json and runs rush upgrade.',\r\n    documentation: 'Adds a dependency to the package.json and runs rush upgrade.'\r\n  });\r\n  commandLineParser.addAction(addAction);\r\n  addAction.defineStringParameter({\r\n    parameterLongName: '--package',\r\n    parameterShortName: '-p',\r\n    required: true,\r\n    argumentName: 'PACKAGE',\r\n    description:\r\n      '(Required) The name of the package which should be added as a dependency.' +\r\n      ' A SemVer version specifier can be appended after an \"@\" sign.  WARNING: Symbol characters' +\r\n      \" are usually interpreted by your shell, so it's recommended to use quotes.\" +\r\n      ' For example, write \"rush add --package \"example@^1.2.3\"\" instead of \"rush add --package example@^1.2.3\".'\r\n  });\r\n  addAction.defineFlagParameter({\r\n    parameterLongName: '--exact',\r\n    description:\r\n      'If specified, the SemVer specifier added to the' +\r\n      ' package.json will be an exact version (e.g. without tilde or caret).'\r\n  });\r\n  addAction.defineFlagParameter({\r\n    parameterLongName: '--caret',\r\n    description:\r\n      'If specified, the SemVer specifier added to the' +\r\n      ' package.json will be a prepended with a \"caret\" specifier (\"^\").'\r\n  });\r\n  addAction.defineFlagParameter({\r\n    parameterLongName: '--dev',\r\n    description:\r\n      'If specified, the package will be added to the \"devDependencies\" section of the package.json'\r\n  });\r\n  addAction.defineFlagParameter({\r\n    parameterLongName: '--make-consistent',\r\n    parameterShortName: '-m',\r\n    description:\r\n      'If specified, other packages with this dependency will have their package.json' +\r\n      ' files updated to use the same version of the dependency.'\r\n  });\r\n  addAction.defineFlagParameter({\r\n    parameterLongName: '--skip-update',\r\n    parameterShortName: '-s',\r\n    description:\r\n      'If specified, the \"rush update\" command will not be run after updating the package.json files.'\r\n  });\r\n  addAction.defineFlagParameter({\r\n    parameterLongName: '--all',\r\n    description: 'If specified, the dependency will be added to all projects.'\r\n  });\r\n\r\n  const buildAction: DynamicCommandLineAction = new DynamicCommandLineAction({\r\n    actionName: 'build',\r\n    summary: \"Build all projects that haven't been built.\",\r\n    documentation: \"Build all projects that haven't been built.\"\r\n  });\r\n  commandLineParser.addAction(buildAction);\r\n  buildAction.defineStringParameter({\r\n    parameterLongName: '--parallelism',\r\n    parameterShortName: '-p',\r\n    argumentName: 'COUNT',\r\n    description: 'Specifies the maximum number of concurrent processes to launch during a build.'\r\n  });\r\n  buildAction.defineStringListParameter({\r\n    parameterLongName: '--to',\r\n    parameterShortName: '-t',\r\n    argumentName: 'PROJECT1',\r\n    description: 'Run command in the specified project and all of its dependencies.',\r\n    completions: async (): Promise<string[]> => {\r\n      return ['abc', 'def', 'hij'];\r\n    }\r\n  });\r\n  buildAction.defineStringListParameter({\r\n    parameterLongName: '--from',\r\n    parameterShortName: '-f',\r\n    argumentName: 'PROJECT2',\r\n    description:\r\n      'Run command in the specified project and all projects that directly or indirectly depend on the ' +\r\n      'specified project.'\r\n  });\r\n\r\n  const changeAction: DynamicCommandLineAction = new DynamicCommandLineAction({\r\n    actionName: 'change',\r\n    summary:\r\n      'Records changes made to projects, indicating how the package version number should be bumped ' +\r\n      'for the next publish.',\r\n    documentation: 'Asks a series of questions and then generates a <branchname>-<timestamp>.json file.'\r\n  });\r\n  commandLineParser.addAction(changeAction);\r\n  changeAction.defineFlagParameter({\r\n    parameterLongName: '--verify',\r\n    parameterShortName: '-v',\r\n    description: 'Verify the change file has been generated and that it is a valid JSON file'\r\n  });\r\n  changeAction.defineFlagParameter({\r\n    parameterLongName: '--no-fetch',\r\n    description: 'Skips fetching the baseline branch before running \"git diff\" to detect changes.'\r\n  });\r\n  changeAction.defineStringParameter({\r\n    parameterLongName: '--target-branch',\r\n    parameterShortName: '-b',\r\n    argumentName: 'BRANCH',\r\n    description: 'If this parameter is specified, compare the checked out branch with the specified branch.'\r\n  });\r\n  changeAction.defineFlagParameter({\r\n    parameterLongName: '--overwrite',\r\n    description: `If a changefile already exists, overwrite without prompting.`\r\n  });\r\n  changeAction.defineStringParameter({\r\n    parameterLongName: '--email',\r\n    argumentName: 'EMAIL',\r\n    description:\r\n      'The email address to use in changefiles. If this parameter is not provided, the email address ' +\r\n      'will be detected or prompted for in interactive mode.'\r\n  });\r\n  changeAction.defineFlagParameter({\r\n    parameterLongName: '--bulk',\r\n    description:\r\n      'If this flag is specified, apply the same change message and bump type to all changed projects. '\r\n  });\r\n  changeAction.defineStringParameter({\r\n    parameterLongName: '--message',\r\n    argumentName: 'MESSAGE',\r\n    description: `The message to apply to all changed projects.`\r\n  });\r\n  changeAction.defineChoiceParameter({\r\n    parameterLongName: '--bump-type',\r\n    alternatives: ['major', 'minor', 'patch', 'none'],\r\n    description: `The bump type to apply to all changed projects.`\r\n  });\r\n\r\n  const installAction: DynamicCommandLineAction = new DynamicCommandLineAction({\r\n    actionName: 'install',\r\n    summary: 'Install package dependencies for all projects in the repo according to the shrinkwrap file.',\r\n    documentation:\r\n      'Longer description: Install package dependencies for all projects in the repo according ' +\r\n      'to the shrinkwrap file.'\r\n  });\r\n  commandLineParser.addAction(installAction);\r\n  installAction.defineFlagParameter({\r\n    parameterLongName: '--purge',\r\n    parameterShortName: '-p',\r\n    description: 'Perform \"rush purge\" before starting the installation'\r\n  });\r\n  installAction.defineFlagParameter({\r\n    parameterLongName: '--bypass-policy',\r\n    description: 'Overrides enforcement of the \"gitPolicy\" rules from rush.json (use honorably!)'\r\n  });\r\n  installAction.defineFlagParameter({\r\n    parameterLongName: '--no-link',\r\n    description: 'If \"--no-link\" is specified, then project symlinks will NOT be created'\r\n  });\r\n  installAction.defineIntegerParameter({\r\n    parameterLongName: '--network-concurrency',\r\n    argumentName: 'COUNT',\r\n    description: 'If specified, limits the maximum number of concurrent network requests.'\r\n  });\r\n  installAction.defineFlagParameter({\r\n    parameterLongName: '--debug-package-manager',\r\n    description: 'Activates verbose logging for the package manager.'\r\n  });\r\n  installAction.defineIntegerParameter({\r\n    parameterLongName: '--max-install-attempts',\r\n    argumentName: 'NUMBER',\r\n    description: `Overrides the default maximum number of install attempts.`,\r\n    defaultValue: 3\r\n  });\r\n  installAction.defineStringParameter(VARIANT_PARAMETER);\r\n\r\n  commandLineParser.defineFlagParameter({\r\n    parameterLongName: '--debug',\r\n    parameterShortName: '-d',\r\n    description: 'Show the full call stack if an error occurs while executing the tool'\r\n  });\r\n\r\n  return commandLineParser;\r\n}\r\n\r\nconst commandLineParser: DynamicCommandLineParser = getCommandLineParser();\r\nconst tc: TabCompleteAction = new TabCompleteAction(commandLineParser.actions, commandLineParser.parameters);\r\n\r\ndescribe('Gets TabCompletion(s)', () => {\r\n  it(`gets completion(s) for rush <tab>`, async () => {\r\n    const commandLine: string = 'rush ';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = ['add', 'build', 'change', 'install', '--debug', '-d'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`gets completion(s) for rush a<tab>`, async () => {\r\n    const commandLine: string = 'rush a';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = ['add'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`gets completion(s) for rush -d a<tab>`, async () => {\r\n    const commandLine: string = 'rush -d a';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = ['add'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`gets completion(s) for rush build <tab>`, async () => {\r\n    const commandLine: string = 'rush build ';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    expect(actual.indexOf('-t') !== -1).toBe(true);\r\n    expect(actual.indexOf('--to') !== -1).toBe(true);\r\n    expect(actual.indexOf('-f') !== -1).toBe(true);\r\n    expect(actual.indexOf('--from') !== -1).toBe(true);\r\n  });\r\n\r\n  it(`gets completion(s) for rush build -<tab>`, async () => {\r\n    const commandLine: string = 'rush build -';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    expect(actual.indexOf('-t') !== -1).toBe(true);\r\n    expect(actual.indexOf('--to') !== -1).toBe(true);\r\n    expect(actual.indexOf('-f') !== -1).toBe(true);\r\n    expect(actual.indexOf('--from') !== -1).toBe(true);\r\n  });\r\n\r\n  it(`gets completion(s) for rush build -t <tab>`, async () => {\r\n    const commandLine: string = 'rush build -t ';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = ['abc', 'def', 'hij'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`gets completion(s) for rush build -t a<tab>`, async () => {\r\n    const commandLine: string = 'rush build -t a';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = ['abc'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`gets completion(s) for rush --debug build -t a<tab>`, async () => {\r\n    const commandLine: string = 'rush --debug build -t a';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = ['abc'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`gets completion(s) for rush change --bump-type <tab>`, async () => {\r\n    const commandLine: string = 'rush change --bump-type ';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = ['major', 'minor', 'patch', 'none'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`gets completion(s) for rush change --bulk <tab>`, async () => {\r\n    const commandLine: string = 'rush change --bulk ';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    expect(actual.indexOf('--bulk') !== -1).toBe(true);\r\n    expect(actual.indexOf('--message') !== -1).toBe(true);\r\n    expect(actual.indexOf('--bump-type') !== -1).toBe(true);\r\n    expect(actual.indexOf('--verify') !== -1).toBe(true);\r\n  });\r\n\r\n  it(`gets completion(s) for rush change --bump-type m<tab>`, async () => {\r\n    const commandLine: string = 'rush change --bump-type m';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = ['major', 'minor'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`gets completion(s) for rush change --message <tab>`, async () => {\r\n    const commandLine: string = 'rush change --message ';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = [];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`gets completion(s) for rush change --message \"my change log message\" --bump-type <tab>`, async () => {\r\n    const commandLine: string = 'rush change --message \"my change log message\" --bump-type ';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = ['major', 'minor', 'patch', 'none'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`gets completion(s) for rush change --message \"my change log message\" --bump-type m<tab>`, async () => {\r\n    const commandLine: string = 'rush change --message \"my change log message\" --bump-type m';\r\n    const actual: string[] = await arrayFromAsyncIteractorAsync(\r\n      tc.getCompletions(commandLine.trim(), commandLine.length)\r\n    );\r\n\r\n    const expected: string[] = ['major', 'minor'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n});\r\n\r\ndescribe(`Tokenize command line`, () => {\r\n  it(`tokenizes \"rush change -\"`, () => {\r\n    const commandLine: string = 'rush change -';\r\n    const actual: string[] = tc.tokenizeCommandLine(commandLine.trim());\r\n\r\n    const expected: string[] = ['rush', 'change', '-'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n\r\n  it(`tokenizes 'rush change -m \"my change log\"'`, () => {\r\n    const commandLine: string = 'rush change -m \"my change log\"';\r\n    const actual: string[] = tc.tokenizeCommandLine(commandLine.trim());\r\n\r\n    const expected: string[] = ['rush', 'change', '-m', 'my change log'];\r\n\r\n    expect(actual.sort()).toEqual(expected.sort());\r\n  });\r\n});\r\n"]}