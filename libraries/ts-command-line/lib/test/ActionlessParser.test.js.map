{"version":3,"file":"ActionlessParser.test.js","sourceRoot":"","sources":["../../src/test/ActionlessParser.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,0BAAiE;AAEjE,MAAM,eAAgB,SAAQ,qBAAiB;IAG7C;QACE,KAAK,CAAC;YACJ,YAAY,EAAE,SAAS;YACvB,eAAe,EAAE,oBAAoB;SACtC,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACnC,iBAAiB,EAAE,QAAQ;YAC3B,WAAW,EAAE,UAAU;SACxB,CAAC,CAAC;IACL,CAAC;CACF;AAED,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC5C,EAAE,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;QAC7B,MAAM,iBAAiB,GAAoB,IAAI,eAAe,EAAE,CAAC;QAEjE,MAAM,iBAAiB,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE5C,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,aAAa,EAAE,CAAC;QACzD,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,iBAAiB,GAAoB,IAAI,eAAe,EAAE,CAAC;QAEjE,iBAAiB,CAAC,0BAA0B,CAAC;YAC3C,WAAW,EAAE,uBAAuB;SACrC,CAAC,CAAC;QAEH,MAAM,iBAAiB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;QAExE,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,aAAa,EAAE,CAAC;QACzD,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChD,MAAM,CAAC,iBAAiB,CAAC,SAAU,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { CommandLineParser, CommandLineFlagParameter } from '..';\r\n\r\nclass TestCommandLine extends CommandLineParser {\r\n  public flag!: CommandLineFlagParameter;\r\n\r\n  public constructor() {\r\n    super({\r\n      toolFilename: 'example',\r\n      toolDescription: 'An example project'\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this.flag = this.defineFlagParameter({\r\n      parameterLongName: '--flag',\r\n      description: 'The flag'\r\n    });\r\n  }\r\n}\r\n\r\ndescribe('Actionless CommandLineParser', () => {\r\n  it('parses a flag', async () => {\r\n    const commandLineParser: TestCommandLine = new TestCommandLine();\r\n\r\n    await commandLineParser.execute(['--flag']);\r\n\r\n    expect(commandLineParser.selectedAction).toBeUndefined();\r\n    expect(commandLineParser.flag.value).toBe(true);\r\n  });\r\n\r\n  it('parses a flag and remainder', async () => {\r\n    const commandLineParser: TestCommandLine = new TestCommandLine();\r\n\r\n    commandLineParser.defineCommandLineRemainder({\r\n      description: 'remainder description'\r\n    });\r\n\r\n    await commandLineParser.execute(['--flag', 'the', 'remaining', 'args']);\r\n\r\n    expect(commandLineParser.selectedAction).toBeUndefined();\r\n    expect(commandLineParser.flag.value).toBe(true);\r\n    expect(commandLineParser.remainder!.values).toEqual(['the', 'remaining', 'args']);\r\n  });\r\n});\r\n"]}