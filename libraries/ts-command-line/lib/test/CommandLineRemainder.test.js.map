{"version":3,"file":"CommandLineRemainder.test.js","sourceRoot":"","sources":["../../src/test/CommandLineRemainder.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;AAE3D,+CAAiC;AAIjC,oFAAiF;AACjF,oFAAiF;AAEjF,SAAS,YAAY;IACnB,MAAM,iBAAiB,GAA6B,IAAI,mDAAwB,CAAC;QAC/E,YAAY,EAAE,SAAS;QACvB,eAAe,EAAE,oBAAoB;KACtC,CAAC,CAAC;IACH,iBAAiB,CAAC,mBAAmB,CAAC;QACpC,iBAAiB,EAAE,WAAW;QAC9B,WAAW,EAAE,iCAAiC;KAC/C,CAAC,CAAC;IAEH,MAAM,MAAM,GAA6B,IAAI,mDAAwB,CAAC;QACpE,UAAU,EAAE,KAAK;QACjB,OAAO,EAAE,cAAc;QACvB,aAAa,EAAE,sBAAsB;KACtC,CAAC,CAAC;IACH,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAEpC,MAAM,CAAC,qBAAqB,CAAC;QAC3B,iBAAiB,EAAE,SAAS;QAC5B,WAAW,EAAE,UAAU;QACvB,YAAY,EAAE,MAAM;KACrB,CAAC,CAAC;IAEH,qFAAqF;IACrF,MAAM,CAAC,0BAA0B,CAAC;QAChC,WAAW,EAAE,sBAAsB;KACpC,CAAC,CAAC;IAEH,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAED,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,iBAAiB,GAAsB,YAAY,EAAE,CAAC;QAC5D,MAAM,QAAQ,GAAW,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,cAAc,EAAE,CAAC,CAAC;QAChF,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,iBAAiB,GAAsB,YAAY,EAAE,CAAC;QAC5D,MAAM,QAAQ,GAAW,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC;QACjG,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,iBAAiB,GAAsB,YAAY,EAAE,CAAC;QAC5D,MAAM,MAAM,GAAsB,iBAAiB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACrE,MAAM,IAAI,GAAa,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;QAEnF,MAAM,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEtC,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEtD,MAAM,UAAU,GAAa,EAAE,CAAC;QAChC,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,UAAU,EAAE;YACzC,UAAU,CAAC,IAAI,CAAC,OAAO,SAAS,CAAC,QAAQ,cAAc,CAAC,CAAC;YACzD,SAAS,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;SACvC;QAED,UAAU,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QAC7C,MAAM,CAAC,SAAU,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAE9C,MAAM,CAAC,UAAU,CAAC,CAAC,eAAe,EAAE,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\n\r\nimport { CommandLineAction } from '../providers/CommandLineAction';\r\nimport { CommandLineParser } from '../providers/CommandLineParser';\r\nimport { DynamicCommandLineParser } from '../providers/DynamicCommandLineParser';\r\nimport { DynamicCommandLineAction } from '../providers/DynamicCommandLineAction';\r\n\r\nfunction createParser(): DynamicCommandLineParser {\r\n  const commandLineParser: DynamicCommandLineParser = new DynamicCommandLineParser({\r\n    toolFilename: 'example',\r\n    toolDescription: 'An example project'\r\n  });\r\n  commandLineParser.defineFlagParameter({\r\n    parameterLongName: '--verbose',\r\n    description: 'A flag that affects all actions'\r\n  });\r\n\r\n  const action: DynamicCommandLineAction = new DynamicCommandLineAction({\r\n    actionName: 'run',\r\n    summary: 'does the job',\r\n    documentation: 'a longer description'\r\n  });\r\n  commandLineParser.addAction(action);\r\n\r\n  action.defineStringParameter({\r\n    parameterLongName: '--title',\r\n    description: 'A string',\r\n    argumentName: 'TEXT'\r\n  });\r\n\r\n  // Although this is defined BEFORE the parameter, but it should still capture the end\r\n  action.defineCommandLineRemainder({\r\n    description: 'The action remainder'\r\n  });\r\n\r\n  return commandLineParser;\r\n}\r\n\r\ndescribe('CommandLineRemainder', () => {\r\n  it('prints the global help', () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const helpText: string = colors.stripColors(commandLineParser.renderHelpText());\r\n    expect(helpText).toMatchSnapshot();\r\n  });\r\n\r\n  it('prints the action help', () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const helpText: string = colors.stripColors(commandLineParser.getAction('run').renderHelpText());\r\n    expect(helpText).toMatchSnapshot();\r\n  });\r\n\r\n  it('parses an action input with remainder', async () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const action: CommandLineAction = commandLineParser.getAction('run');\r\n    const args: string[] = ['run', '--title', 'The title', 'the', 'remaining', 'args'];\r\n\r\n    await commandLineParser.execute(args);\r\n\r\n    expect(commandLineParser.selectedAction).toBe(action);\r\n\r\n    const copiedArgs: string[] = [];\r\n    for (const parameter of action.parameters) {\r\n      copiedArgs.push(`### ${parameter.longName} output: ###`);\r\n      parameter.appendToArgList(copiedArgs);\r\n    }\r\n\r\n    copiedArgs.push(`### remainder output: ###`);\r\n    action.remainder!.appendToArgList(copiedArgs);\r\n\r\n    expect(copiedArgs).toMatchSnapshot();\r\n  });\r\n});\r\n"]}