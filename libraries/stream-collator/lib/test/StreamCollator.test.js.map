{"version":3,"file":"StreamCollator.test.js","sourceRoot":"","sources":["../../src/test/StreamCollator.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TerminalChunkKind, MockWritable } from '@rushstack/terminal';\r\n\r\nimport { StreamCollator } from '../StreamCollator';\r\nimport { CollatedWriter } from '../CollatedWriter';\r\n\r\nlet collator: StreamCollator;\r\nconst mockWritable: MockWritable = new MockWritable();\r\n\r\ndescribe('StreamCollator tests', () => {\r\n  // Reset task information before each test\r\n  beforeEach(() => {\r\n    mockWritable.reset();\r\n    collator = new StreamCollator({ destination: mockWritable });\r\n  });\r\n\r\n  describe('Testing register and close', () => {\r\n    it('can register a task', () => {\r\n      const helloWorldWriter: CollatedWriter = collator.registerTask('Hello World');\r\n      expect(helloWorldWriter.taskName).toEqual('Hello World');\r\n    });\r\n\r\n    it('should not let you register two tasks with the same name', () => {\r\n      const taskName: string = 'Hello World';\r\n      expect(() => {\r\n        collator.registerTask(taskName);\r\n      }).not.toThrow();\r\n      expect(() => {\r\n        collator.registerTask(taskName);\r\n      }).toThrow();\r\n    });\r\n\r\n    it('should not let you close a task twice', () => {\r\n      const taskName: string = 'Hello World';\r\n      const writer: CollatedWriter = collator.registerTask(taskName);\r\n      writer.close();\r\n      expect(writer.close).toThrow();\r\n    });\r\n\r\n    it('should not let you write to a closed task', () => {\r\n      const taskName: string = 'Hello World';\r\n      const writer: CollatedWriter = collator.registerTask(taskName);\r\n      writer.close();\r\n      expect(() => {\r\n        writer.terminal.writeChunk({ text: '1', kind: TerminalChunkKind.Stdout });\r\n      }).toThrow();\r\n    });\r\n  });\r\n\r\n  describe('Testing write functions', () => {\r\n    it('writeLine should add a newline', () => {\r\n      const taskA: CollatedWriter = collator.registerTask('A');\r\n      const text: string = 'Hello World';\r\n\r\n      taskA.terminal.writeChunk({ text, kind: TerminalChunkKind.Stdout });\r\n\r\n      expect(mockWritable.chunks).toEqual([{ text, kind: TerminalChunkKind.Stdout }]);\r\n    });\r\n\r\n    it('should write errors to stderr', () => {\r\n      const taskA: CollatedWriter = collator.registerTask('A');\r\n      const error: string = 'Critical error';\r\n\r\n      taskA.terminal.writeChunk({ text: error, kind: TerminalChunkKind.Stderr });\r\n\r\n      expect(mockWritable.chunks).toEqual([{ text: error, kind: TerminalChunkKind.Stderr }]);\r\n\r\n      taskA.close();\r\n\r\n      expect(taskA.bufferedChunks).toEqual([]);\r\n      expect(mockWritable.chunks).toEqual([{ text: error, kind: TerminalChunkKind.Stderr }]);\r\n    });\r\n  });\r\n\r\n  describe('Testing that output is interleaved', () => {\r\n    it('should not write non-active tasks to stdout', () => {\r\n      const taskA: CollatedWriter = collator.registerTask('A');\r\n      const taskB: CollatedWriter = collator.registerTask('B');\r\n\r\n      taskA.terminal.writeChunk({ text: '1', kind: TerminalChunkKind.Stdout });\r\n      expect(taskA.bufferedChunks).toEqual([]);\r\n      expect(mockWritable.chunks).toEqual([{ text: '1', kind: TerminalChunkKind.Stdout }]);\r\n\r\n      taskB.terminal.writeChunk({ text: '2', kind: TerminalChunkKind.Stdout });\r\n      expect(taskB.bufferedChunks).toEqual([{ text: '2', kind: TerminalChunkKind.Stdout }]);\r\n      expect(mockWritable.chunks).toEqual([{ text: '1', kind: TerminalChunkKind.Stdout }]);\r\n\r\n      taskA.terminal.writeChunk({ text: '3', kind: TerminalChunkKind.Stdout });\r\n      expect(mockWritable.chunks).toEqual([\r\n        { text: '1', kind: TerminalChunkKind.Stdout },\r\n        { text: '3', kind: TerminalChunkKind.Stdout }\r\n      ]);\r\n\r\n      taskA.close();\r\n      expect(mockWritable.chunks).toEqual([\r\n        { text: '1', kind: TerminalChunkKind.Stdout },\r\n        { text: '3', kind: TerminalChunkKind.Stdout },\r\n        { text: '2', kind: TerminalChunkKind.Stdout }\r\n      ]);\r\n\r\n      taskB.close();\r\n      expect(mockWritable.chunks).toEqual([\r\n        { text: '1', kind: TerminalChunkKind.Stdout },\r\n        { text: '3', kind: TerminalChunkKind.Stdout },\r\n        { text: '2', kind: TerminalChunkKind.Stdout }\r\n      ]);\r\n\r\n      expect(taskA.bufferedChunks).toEqual([]);\r\n      expect(taskB.bufferedChunks).toEqual([]);\r\n    });\r\n\r\n    it('should update the active task once the active task is closed', () => {\r\n      const taskA: CollatedWriter = collator.registerTask('A');\r\n      const taskB: CollatedWriter = collator.registerTask('B');\r\n\r\n      taskA.terminal.writeChunk({ text: '1', kind: TerminalChunkKind.Stdout });\r\n      expect(mockWritable.chunks).toEqual([{ text: '1', kind: TerminalChunkKind.Stdout }]);\r\n      taskA.close();\r\n\r\n      taskB.terminal.writeChunk({ text: '2', kind: TerminalChunkKind.Stdout });\r\n      expect(mockWritable.chunks).toEqual([\r\n        { text: '1', kind: TerminalChunkKind.Stdout },\r\n        { text: '2', kind: TerminalChunkKind.Stdout }\r\n      ]);\r\n      taskB.close();\r\n      expect(mockWritable.chunks).toEqual([\r\n        { text: '1', kind: TerminalChunkKind.Stdout },\r\n        { text: '2', kind: TerminalChunkKind.Stdout }\r\n      ]);\r\n    });\r\n\r\n    it('should write completed tasks after the active task is completed', () => {\r\n      const taskA: CollatedWriter = collator.registerTask('A');\r\n      const taskB: CollatedWriter = collator.registerTask('B');\r\n\r\n      taskA.terminal.writeChunk({ text: '1', kind: TerminalChunkKind.Stdout });\r\n      expect(mockWritable.chunks).toEqual([{ text: '1', kind: TerminalChunkKind.Stdout }]);\r\n\r\n      taskB.terminal.writeChunk({ text: '2', kind: TerminalChunkKind.Stdout });\r\n      expect(mockWritable.chunks).toEqual([{ text: '1', kind: TerminalChunkKind.Stdout }]);\r\n\r\n      taskB.close();\r\n      expect(mockWritable.chunks).toEqual([{ text: '1', kind: TerminalChunkKind.Stdout }]);\r\n\r\n      taskA.close();\r\n      expect(mockWritable.chunks).toEqual([\r\n        { text: '1', kind: TerminalChunkKind.Stdout },\r\n        { text: '2', kind: TerminalChunkKind.Stdout }\r\n      ]);\r\n    });\r\n  });\r\n});\r\n"]}