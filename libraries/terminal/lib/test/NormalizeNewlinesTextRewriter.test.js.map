{"version":3,"file":"NormalizeNewlinesTextRewriter.test.js","sourceRoot":"","sources":["../../src/test/NormalizeNewlinesTextRewriter.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,oEAAiE;AAEjE,oFAAiF;AAEjF,SAAS,QAAQ,CAAC,KAAa;IAC7B,MAAM,OAAO,GAAkC,IAAI,6DAA6B,CAAC;QAC/E,WAAW,eAAgB;KAC5B,CAAC,CAAC;IACH,MAAM,KAAK,GAAsB,OAAO,CAAC,UAAU,EAAE,CAAC;IACtD,IAAI,MAAM,GAAW,EAAE,CAAC;IAExB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACrC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC5C;IACD,MAAM,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAE/B,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,wBAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;AAClD,CAAC;AAED,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,QAAQ,CAAC,EAAE,CAAC,CAAC;QACb,QAAQ,CAAC,IAAI,CAAC,CAAC;QACf,QAAQ,CAAC,IAAI,CAAC,CAAC;QACf,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjB,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjB,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjB,QAAQ,CAAC,MAAM,CAAC,CAAC;QACjB,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAEnB,QAAQ,CAAC,SAAS,CAAC,CAAC;QACpB,QAAQ,CAAC,OAAO,CAAC,CAAC;QAClB,QAAQ,CAAC,OAAO,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Text, NewlineKind } from '@rushstack/node-core-library';\r\nimport { TextRewriterState } from '../TextRewriter';\r\nimport { NormalizeNewlinesTextRewriter } from '../NormalizeNewlinesTextRewriter';\r\n\r\nfunction testCase(input: string): void {\r\n  const matcher: NormalizeNewlinesTextRewriter = new NormalizeNewlinesTextRewriter({\r\n    newlineKind: NewlineKind.Lf\r\n  });\r\n  const state: TextRewriterState = matcher.initialize();\r\n  let result: string = '';\r\n\r\n  for (let i = 0; i < input.length; ++i) {\r\n    result += matcher.process(state, input[i]);\r\n  }\r\n  result += matcher.close(state);\r\n\r\n  expect(result).toEqual(Text.convertToLf(input));\r\n}\r\n\r\ndescribe('NormalizeNewlinesTextRewriter', () => {\r\n  it('should duplicate Text.convertToLf()', () => {\r\n    testCase('');\r\n    testCase('\\n');\r\n    testCase('\\r');\r\n    testCase('\\n\\n');\r\n    testCase('\\r\\n');\r\n    testCase('\\n\\r');\r\n    testCase('\\r\\r');\r\n    testCase('\\n\\n\\n');\r\n    testCase('\\r\\n\\n');\r\n    testCase('\\n\\r\\n');\r\n    testCase('\\r\\r\\n');\r\n    testCase('\\n\\n\\r');\r\n    testCase('\\r\\n\\r');\r\n    testCase('\\n\\r\\r');\r\n    testCase('\\r\\r\\r');\r\n\r\n    testCase('\\nX\\n\\r');\r\n    testCase('\\rX\\r');\r\n    testCase('\\r \\n');\r\n  });\r\n});\r\n"]}