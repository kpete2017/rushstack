{"version":3,"file":"RemoveColorsTextRewriter.test.js","sourceRoot":"","sources":["../../src/test/RemoveColorsTextRewriter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport colors from 'colors';\r\n\r\nimport { RemoveColorsTextRewriter } from '../RemoveColorsTextRewriter';\r\nimport { TextRewriterState } from '../TextRewriter';\r\nimport { AnsiEscape } from '@rushstack/node-core-library';\r\n\r\nfunction testCase(inputs: string[]): void {\r\n  const matcher: RemoveColorsTextRewriter = new RemoveColorsTextRewriter();\r\n  const state: TextRewriterState = matcher.initialize();\r\n  const outputs: string[] = inputs.map((x) => matcher.process(state, x));\r\n  const closeOutput: string = matcher.close(state);\r\n  if (closeOutput !== '') {\r\n    outputs.push('--close--');\r\n    outputs.push(closeOutput);\r\n  }\r\n\r\n  expect({\r\n    inputs: inputs.map((x) => AnsiEscape.formatForTests(x)),\r\n    outputs\r\n  }).toMatchSnapshot();\r\n}\r\n\r\ndescribe('RemoveColorsTextRewriter', () => {\r\n  let initialColorsEnabled: boolean;\r\n\r\n  beforeAll(() => {\r\n    initialColorsEnabled = colors.enabled;\r\n    colors.enable();\r\n  });\r\n\r\n  afterAll(() => {\r\n    if (!initialColorsEnabled) {\r\n      colors.disable();\r\n    }\r\n  });\r\n\r\n  it('01 should process empty inputs', () => {\r\n    testCase([]);\r\n    testCase(['']);\r\n    testCase(['', 'a', '']);\r\n  });\r\n\r\n  it('02 should remove colors from complete chunks', () => {\r\n    testCase([colors.red('1')]);\r\n    testCase([colors.red('1') + colors.green('2')]);\r\n    testCase([colors.red('1') + '2' + colors.green('3')]);\r\n  });\r\n\r\n  it('03 should remove colors from 1-character chunks', () => {\r\n    const source: string = '1' + colors.red('2');\r\n    const inputs: string[] = [];\r\n    for (let i: number = 0; i < source.length; ++i) {\r\n      inputs.push(source.substr(i, 1));\r\n    }\r\n    testCase(inputs);\r\n  });\r\n\r\n  it('04 should pass through incomplete partial matches', () => {\r\n    testCase(['\\x1b']);\r\n    testCase(['\\x1b[\\n']);\r\n    testCase(['\\x1b[1']);\r\n  });\r\n});\r\n"]}