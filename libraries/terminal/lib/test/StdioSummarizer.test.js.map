{"version":3,"file":"StdioSummarizer.test.js","sourceRoot":"","sources":["../../src/test/StdioSummarizer.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TerminalChunkKind } from '../ITerminalChunk';\r\nimport { StdioSummarizer } from '../StdioSummarizer';\r\nimport { StderrLineTransform } from '../StdioLineTransform';\r\nimport { TextRewriterTransform } from '../TextRewriterTransform';\r\nimport { NewlineKind } from '@rushstack/node-core-library';\r\n\r\ndescribe('StdioSummarizer', () => {\r\n  let summarizer: StdioSummarizer;\r\n  let stderrLineTransform: StderrLineTransform;\r\n  let transform: TextRewriterTransform;\r\n\r\n  beforeEach(() => {\r\n    summarizer = new StdioSummarizer();\r\n    stderrLineTransform = new StderrLineTransform({ destination: summarizer });\r\n    transform = new TextRewriterTransform({\r\n      destination: stderrLineTransform,\r\n      normalizeNewlines: NewlineKind.Lf\r\n    });\r\n  });\r\n\r\n  it('should report stdout if there is no stderr', () => {\r\n    transform.writeChunk({ text: 'stdout 1\\nstdout 2\\n', kind: TerminalChunkKind.Stdout });\r\n    transform.close();\r\n\r\n    expect(summarizer.isOpen).toBe(false);\r\n    expect(summarizer.getReport()).toMatchSnapshot();\r\n  });\r\n\r\n  it('should abridge extra lines', () => {\r\n    transform.writeChunk({ text: 'discarded stdout\\n', kind: TerminalChunkKind.Stdout });\r\n    for (let i: number = 0; i < 10; ++i) {\r\n      transform.writeChunk({ text: `leading ${i}\\n`, kind: TerminalChunkKind.Stderr });\r\n      transform.writeChunk({ text: 'discarded stdout\\n', kind: TerminalChunkKind.Stdout });\r\n    }\r\n\r\n    transform.writeChunk({ text: `discarded middle 1\\n`, kind: TerminalChunkKind.Stderr });\r\n    transform.writeChunk({ text: `discarded middle 2\\n`, kind: TerminalChunkKind.Stderr });\r\n\r\n    for (let i: number = 0; i < 10; ++i) {\r\n      transform.writeChunk({ text: `trailing ${i}\\n`, kind: TerminalChunkKind.Stderr });\r\n      transform.writeChunk({ text: 'discarded stdout\\n', kind: TerminalChunkKind.Stdout });\r\n    }\r\n\r\n    transform.close();\r\n\r\n    expect(summarizer.getReport()).toMatchSnapshot();\r\n  });\r\n\r\n  it('should concatenate partial lines', () => {\r\n    transform.writeChunk({ text: 'abc', kind: TerminalChunkKind.Stderr });\r\n    transform.writeChunk({ text: '', kind: TerminalChunkKind.Stderr });\r\n    transform.writeChunk({ text: 'de\\nf\\n\\ng', kind: TerminalChunkKind.Stderr });\r\n    transform.writeChunk({ text: '\\n', kind: TerminalChunkKind.Stderr });\r\n    transform.writeChunk({ text: 'h', kind: TerminalChunkKind.Stderr });\r\n    transform.close();\r\n\r\n    expect(summarizer.getReport()).toMatchSnapshot();\r\n  });\r\n});\r\n"]}