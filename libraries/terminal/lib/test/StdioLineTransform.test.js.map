{"version":3,"file":"StdioLineTransform.test.js","sourceRoot":"","sources":["../../src/test/StdioLineTransform.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,8DAA4D;AAC5D,kDAA+C;AAE/C,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,YAAY,GAAiB,IAAI,2BAAY,EAAE,CAAC;QACtD,MAAM,SAAS,GAAwB,IAAI,wCAAmB,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC,CAAC;QAE9F,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,sBAAsB,EAAE,IAAI,kBAA0B,EAAE,CAAC,CAAC;QACvF,SAAS,CAAC,KAAK,EAAE,CAAC;QAElB,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,eAAe,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TerminalChunkKind } from '../ITerminalChunk';\r\nimport { StderrLineTransform } from '../StdioLineTransform';\r\nimport { MockWritable } from '../MockWritable';\r\n\r\ndescribe('StderrLineTransform', () => {\r\n  it('should report stdout if there is no stderr', () => {\r\n    const mockWritable: MockWritable = new MockWritable();\r\n    const transform: StderrLineTransform = new StderrLineTransform({ destination: mockWritable });\r\n\r\n    transform.writeChunk({ text: 'stdout 1\\nstdout 2\\n', kind: TerminalChunkKind.Stdout });\r\n    transform.close();\r\n\r\n    expect(mockWritable.chunks).toMatchSnapshot();\r\n  });\r\n});\r\n"]}