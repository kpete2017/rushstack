{"version":3,"file":"ConfigurationFile.test.js","sourceRoot":"","sources":["../../src/test/ConfigurationFile.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as nodeJsPath from 'path';\r\n\r\nimport { ConfigurationFile, PathResolutionMethod, InheritanceType } from '../ConfigurationFile';\r\nimport {\r\n  FileSystem,\r\n  JsonFile,\r\n  Path,\r\n  StringBufferTerminalProvider,\r\n  Terminal\r\n} from '@rushstack/node-core-library';\r\nimport { RigConfig } from '@rushstack/rig-package';\r\n\r\ndescribe('ConfigurationFile', () => {\r\n  const projectRoot: string = nodeJsPath.resolve(__dirname, '..', '..');\r\n  let terminalProvider: StringBufferTerminalProvider;\r\n  let terminal: Terminal;\r\n\r\n  beforeEach(() => {\r\n    const projectRoot: string = nodeJsPath.resolve(__dirname, '..', '..');\r\n    const formatPathForLogging: (path: string) => string = (path: string) =>\r\n      `<project root>/${Path.convertToSlashes(nodeJsPath.relative(projectRoot, path))}`;\r\n    jest.spyOn(ConfigurationFile, '_formatPathForLogging').mockImplementation(formatPathForLogging);\r\n    jest.spyOn(JsonFile, '_formatPathForError').mockImplementation(formatPathForLogging);\r\n\r\n    terminalProvider = new StringBufferTerminalProvider(false);\r\n    terminal = new Terminal(terminalProvider);\r\n  });\r\n\r\n  afterEach(() => {\r\n    expect({\r\n      log: terminalProvider.getOutput(),\r\n      warning: terminalProvider.getWarningOutput(),\r\n      error: terminalProvider.getErrorOutput(),\r\n      verbose: terminalProvider.getVerbose()\r\n    }).toMatchSnapshot();\r\n  });\r\n\r\n  describe('A simple config file', () => {\r\n    const configFileFolderName: string = 'simplestConfigFile';\r\n    const projectRelativeFilePath: string = `${configFileFolderName}/simplestConfigFile.json`;\r\n    const schemaPath: string = nodeJsPath.resolve(\r\n      __dirname,\r\n      configFileFolderName,\r\n      'simplestConfigFile.schema.json'\r\n    );\r\n\r\n    interface ISimplestConfigFile {\r\n      thing: string;\r\n    }\r\n\r\n    it('Correctly loads the config file', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimplestConfigFile> =\r\n        new ConfigurationFile<ISimplestConfigFile>({\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath\r\n        });\r\n      const loadedConfigFile: ISimplestConfigFile =\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n      const expectedConfigFile: ISimplestConfigFile = { thing: 'A' };\r\n\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n      expect(configFileLoader.getObjectSourceFilePath(loadedConfigFile)).toEqual(\r\n        nodeJsPath.resolve(__dirname, projectRelativeFilePath)\r\n      );\r\n      expect(\r\n        configFileLoader.getPropertyOriginalValue({ parentObject: loadedConfigFile, propertyName: 'thing' })\r\n      ).toEqual('A');\r\n    });\r\n\r\n    it('Correctly resolves paths relative to the config file', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimplestConfigFile> =\r\n        new ConfigurationFile<ISimplestConfigFile>({\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath,\r\n          jsonPathMetadata: {\r\n            '$.thing': {\r\n              pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToConfigurationFile\r\n            }\r\n          }\r\n        });\r\n      const loadedConfigFile: ISimplestConfigFile =\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n      const expectedConfigFile: ISimplestConfigFile = {\r\n        thing: nodeJsPath.resolve(__dirname, configFileFolderName, 'A')\r\n      };\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n      expect(configFileLoader.getObjectSourceFilePath(loadedConfigFile)).toEqual(\r\n        nodeJsPath.resolve(__dirname, projectRelativeFilePath)\r\n      );\r\n      expect(\r\n        configFileLoader.getPropertyOriginalValue({ parentObject: loadedConfigFile, propertyName: 'thing' })\r\n      ).toEqual('A');\r\n    });\r\n\r\n    it('Correctly resolves paths relative to the project root', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimplestConfigFile> =\r\n        new ConfigurationFile<ISimplestConfigFile>({\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath,\r\n          jsonPathMetadata: {\r\n            '$.thing': {\r\n              pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToProjectRoot\r\n            }\r\n          }\r\n        });\r\n      const loadedConfigFile: ISimplestConfigFile =\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n      const expectedConfigFile: ISimplestConfigFile = {\r\n        thing: nodeJsPath.resolve(projectRoot, 'A')\r\n      };\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n      expect(configFileLoader.getObjectSourceFilePath(loadedConfigFile)).toEqual(\r\n        nodeJsPath.resolve(__dirname, projectRelativeFilePath)\r\n      );\r\n      expect(\r\n        configFileLoader.getPropertyOriginalValue({ parentObject: loadedConfigFile, propertyName: 'thing' })\r\n      ).toEqual('A');\r\n    });\r\n  });\r\n\r\n  describe('A simple config file containing an array', () => {\r\n    const configFileFolderName: string = 'simpleConfigFile';\r\n    const projectRelativeFilePath: string = `${configFileFolderName}/simpleConfigFile.json`;\r\n    const schemaPath: string = nodeJsPath.resolve(\r\n      __dirname,\r\n      configFileFolderName,\r\n      'simpleConfigFile.schema.json'\r\n    );\r\n\r\n    interface ISimpleConfigFile {\r\n      things: string[];\r\n    }\r\n\r\n    it('Correctly loads the config file', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimpleConfigFile> = new ConfigurationFile<ISimpleConfigFile>(\r\n        { projectRelativeFilePath: projectRelativeFilePath, jsonSchemaPath: schemaPath }\r\n      );\r\n      const loadedConfigFile: ISimpleConfigFile = await configFileLoader.loadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        __dirname\r\n      );\r\n      const expectedConfigFile: ISimpleConfigFile = { things: ['A', 'B', 'C'] };\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n    });\r\n\r\n    it('Correctly resolves paths relative to the config file', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimpleConfigFile> = new ConfigurationFile<ISimpleConfigFile>(\r\n        {\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath,\r\n          jsonPathMetadata: {\r\n            '$.things.*': {\r\n              pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToConfigurationFile\r\n            }\r\n          }\r\n        }\r\n      );\r\n      const loadedConfigFile: ISimpleConfigFile = await configFileLoader.loadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        __dirname\r\n      );\r\n      const expectedConfigFile: ISimpleConfigFile = {\r\n        things: [\r\n          nodeJsPath.resolve(__dirname, configFileFolderName, 'A'),\r\n          nodeJsPath.resolve(__dirname, configFileFolderName, 'B'),\r\n          nodeJsPath.resolve(__dirname, configFileFolderName, 'C')\r\n        ]\r\n      };\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n    });\r\n\r\n    it('Correctly resolves paths relative to the project root', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimpleConfigFile> = new ConfigurationFile<ISimpleConfigFile>(\r\n        {\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath,\r\n          jsonPathMetadata: {\r\n            '$.things.*': {\r\n              pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToProjectRoot\r\n            }\r\n          }\r\n        }\r\n      );\r\n      const loadedConfigFile: ISimpleConfigFile = await configFileLoader.loadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        __dirname\r\n      );\r\n      const expectedConfigFile: ISimpleConfigFile = {\r\n        things: [\r\n          nodeJsPath.resolve(projectRoot, 'A'),\r\n          nodeJsPath.resolve(projectRoot, 'B'),\r\n          nodeJsPath.resolve(projectRoot, 'C')\r\n        ]\r\n      };\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n    });\r\n  });\r\n\r\n  describe('A simple config file with \"extends\"', () => {\r\n    const configFileFolderName: string = 'simpleConfigFileWithExtends';\r\n    const projectRelativeFilePath: string = `${configFileFolderName}/simpleConfigFileWithExtends.json`;\r\n    const schemaPath: string = nodeJsPath.resolve(\r\n      __dirname,\r\n      configFileFolderName,\r\n      'simpleConfigFileWithExtends.schema.json'\r\n    );\r\n\r\n    interface ISimpleConfigFile {\r\n      things: string[];\r\n    }\r\n\r\n    it('Correctly loads the config file with default config meta', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimpleConfigFile> = new ConfigurationFile<ISimpleConfigFile>(\r\n        { projectRelativeFilePath: projectRelativeFilePath, jsonSchemaPath: schemaPath }\r\n      );\r\n      const loadedConfigFile: ISimpleConfigFile = await configFileLoader.loadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        __dirname\r\n      );\r\n      const expectedConfigFile: ISimpleConfigFile = { things: ['A', 'B', 'C', 'D', 'E'] };\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n    });\r\n\r\n    it('Correctly loads the config file with \"append\" in config meta', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimpleConfigFile> = new ConfigurationFile<ISimpleConfigFile>(\r\n        {\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath,\r\n          propertyInheritance: {\r\n            things: {\r\n              inheritanceType: InheritanceType.append\r\n            }\r\n          }\r\n        }\r\n      );\r\n      const loadedConfigFile: ISimpleConfigFile = await configFileLoader.loadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        __dirname\r\n      );\r\n      const expectedConfigFile: ISimpleConfigFile = { things: ['A', 'B', 'C', 'D', 'E'] };\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n    });\r\n\r\n    it('Correctly loads the config file with \"replace\" in config meta', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimpleConfigFile> = new ConfigurationFile<ISimpleConfigFile>(\r\n        {\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath,\r\n          propertyInheritance: {\r\n            things: {\r\n              inheritanceType: InheritanceType.replace\r\n            }\r\n          }\r\n        }\r\n      );\r\n      const loadedConfigFile: ISimpleConfigFile = await configFileLoader.loadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        __dirname\r\n      );\r\n      const expectedConfigFile: ISimpleConfigFile = { things: ['D', 'E'] };\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n    });\r\n\r\n    it('Correctly loads the config file with \"custom\" in config meta', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimpleConfigFile> = new ConfigurationFile<ISimpleConfigFile>(\r\n        {\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath,\r\n          propertyInheritance: {\r\n            things: {\r\n              inheritanceType: InheritanceType.custom,\r\n              inheritanceFunction: (current: string[], parent: string[]) => ['X', 'Y', 'Z']\r\n            }\r\n          }\r\n        }\r\n      );\r\n      const loadedConfigFile: ISimpleConfigFile = await configFileLoader.loadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        __dirname\r\n      );\r\n      const expectedConfigFile: ISimpleConfigFile = { things: ['X', 'Y', 'Z'] };\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n    });\r\n\r\n    it('Correctly resolves paths relative to the config file', async () => {\r\n      const configFileLoader: ConfigurationFile<ISimpleConfigFile> = new ConfigurationFile<ISimpleConfigFile>(\r\n        {\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath,\r\n          jsonPathMetadata: {\r\n            '$.things.*': {\r\n              pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToConfigurationFile\r\n            }\r\n          }\r\n        }\r\n      );\r\n      const loadedConfigFile: ISimpleConfigFile = await configFileLoader.loadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        __dirname\r\n      );\r\n      const parentConfigFileFolder: string = nodeJsPath.resolve(\r\n        __dirname,\r\n        configFileFolderName,\r\n        '..',\r\n        'simpleConfigFile'\r\n      );\r\n\r\n      const expectedConfigFile: ISimpleConfigFile = {\r\n        things: [\r\n          nodeJsPath.resolve(parentConfigFileFolder, 'A'),\r\n          nodeJsPath.resolve(parentConfigFileFolder, 'B'),\r\n          nodeJsPath.resolve(parentConfigFileFolder, 'C'),\r\n          nodeJsPath.resolve(__dirname, configFileFolderName, 'D'),\r\n          nodeJsPath.resolve(__dirname, configFileFolderName, 'E')\r\n        ]\r\n      };\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n    });\r\n  });\r\n\r\n  describe('A complex config file', () => {\r\n    interface IComplexConfigFile {\r\n      plugins: { plugin: string }[];\r\n    }\r\n\r\n    it('Correctly loads a complex config file', async () => {\r\n      const projectRelativeFilePath: string = 'complexConfigFile/pluginsD.json';\r\n      const rootConfigFilePath: string = nodeJsPath.resolve(__dirname, 'complexConfigFile', 'pluginsA.json');\r\n      const secondConfigFilePath: string = nodeJsPath.resolve(\r\n        __dirname,\r\n        'complexConfigFile',\r\n        'pluginsB.json'\r\n      );\r\n      const schemaPath: string = nodeJsPath.resolve(__dirname, 'complexConfigFile', 'plugins.schema.json');\r\n\r\n      const configFileLoader: ConfigurationFile<IComplexConfigFile> =\r\n        new ConfigurationFile<IComplexConfigFile>({\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath,\r\n          jsonPathMetadata: {\r\n            '$.plugins.*.plugin': {\r\n              pathResolutionMethod: PathResolutionMethod.NodeResolve\r\n            }\r\n          }\r\n        });\r\n      const loadedConfigFile: IComplexConfigFile =\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n      const expectedConfigFile: IComplexConfigFile = {\r\n        plugins: [\r\n          {\r\n            plugin: await FileSystem.getRealPathAsync(\r\n              nodeJsPath.resolve(\r\n                projectRoot,\r\n                'node_modules',\r\n                '@rushstack',\r\n                'node-core-library',\r\n                'lib',\r\n                'index.js'\r\n              )\r\n            )\r\n          },\r\n          {\r\n            plugin: await FileSystem.getRealPathAsync(\r\n              nodeJsPath.resolve(projectRoot, 'node_modules', '@rushstack', 'heft', 'lib', 'index.js')\r\n            )\r\n          },\r\n          {\r\n            plugin: await FileSystem.getRealPathAsync(\r\n              nodeJsPath.resolve(projectRoot, 'node_modules', '@rushstack', 'eslint-config', 'index.js')\r\n            )\r\n          }\r\n        ]\r\n      };\r\n\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n\r\n      expect(\r\n        configFileLoader.getPropertyOriginalValue({\r\n          parentObject: loadedConfigFile.plugins[0],\r\n          propertyName: 'plugin'\r\n        })\r\n      ).toEqual('@rushstack/node-core-library');\r\n      expect(\r\n        configFileLoader.getPropertyOriginalValue({\r\n          parentObject: loadedConfigFile.plugins[1],\r\n          propertyName: 'plugin'\r\n        })\r\n      ).toEqual('@rushstack/heft');\r\n      expect(\r\n        configFileLoader.getPropertyOriginalValue({\r\n          parentObject: loadedConfigFile.plugins[2],\r\n          propertyName: 'plugin'\r\n        })\r\n      ).toEqual('@rushstack/eslint-config');\r\n\r\n      expect(configFileLoader.getObjectSourceFilePath(loadedConfigFile.plugins[0])).toEqual(\r\n        rootConfigFilePath\r\n      );\r\n      expect(configFileLoader.getObjectSourceFilePath(loadedConfigFile.plugins[1])).toEqual(\r\n        nodeJsPath.resolve(__dirname, secondConfigFilePath)\r\n      );\r\n      expect(configFileLoader.getObjectSourceFilePath(loadedConfigFile.plugins[2])).toEqual(\r\n        nodeJsPath.resolve(__dirname, secondConfigFilePath)\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('loading a rig', () => {\r\n    const projectFolder: string = nodeJsPath.resolve(__dirname, 'project-referencing-rig');\r\n    const rigConfig: RigConfig = RigConfig.loadForProjectFolder({ projectFolderPath: projectFolder });\r\n\r\n    const schemaPath: string = nodeJsPath.resolve(\r\n      __dirname,\r\n      'simplestConfigFile',\r\n      'simplestConfigFile.schema.json'\r\n    );\r\n\r\n    interface ISimplestConfigFile {\r\n      thing: string;\r\n    }\r\n\r\n    it('correctly loads a config file inside a rig', async () => {\r\n      const projectRelativeFilePath: string = 'config/simplestConfigFile.json';\r\n      const configFileLoader: ConfigurationFile<ISimplestConfigFile> =\r\n        new ConfigurationFile<ISimplestConfigFile>({\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath\r\n        });\r\n      const loadedConfigFile: ISimplestConfigFile =\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, projectFolder, rigConfig);\r\n      const expectedConfigFile: ISimplestConfigFile = { thing: 'A' };\r\n\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n      expect(configFileLoader.getObjectSourceFilePath(loadedConfigFile)).toEqual(\r\n        nodeJsPath.resolve(\r\n          projectFolder,\r\n          'node_modules',\r\n          'test-rig',\r\n          'profiles',\r\n          'default',\r\n          projectRelativeFilePath\r\n        )\r\n      );\r\n      expect(\r\n        configFileLoader.getPropertyOriginalValue({ parentObject: loadedConfigFile, propertyName: 'thing' })\r\n      ).toEqual('A');\r\n    });\r\n\r\n    it('correctly loads a config file inside a rig via tryLoadConfigurationFileForProjectAsync', async () => {\r\n      const projectRelativeFilePath: string = 'config/simplestConfigFile.json';\r\n      const configFileLoader: ConfigurationFile<ISimplestConfigFile> =\r\n        new ConfigurationFile<ISimplestConfigFile>({\r\n          projectRelativeFilePath: projectRelativeFilePath,\r\n          jsonSchemaPath: schemaPath\r\n        });\r\n      const loadedConfigFile: ISimplestConfigFile | undefined =\r\n        await configFileLoader.tryLoadConfigurationFileForProjectAsync(terminal, projectFolder, rigConfig);\r\n      const expectedConfigFile: ISimplestConfigFile = { thing: 'A' };\r\n\r\n      expect(loadedConfigFile).not.toBeUndefined();\r\n      expect(JSON.stringify(loadedConfigFile)).toEqual(JSON.stringify(expectedConfigFile));\r\n      expect(configFileLoader.getObjectSourceFilePath(loadedConfigFile!)).toEqual(\r\n        nodeJsPath.resolve(\r\n          projectFolder,\r\n          'node_modules',\r\n          'test-rig',\r\n          'profiles',\r\n          'default',\r\n          projectRelativeFilePath\r\n        )\r\n      );\r\n      expect(\r\n        configFileLoader.getPropertyOriginalValue({ parentObject: loadedConfigFile!, propertyName: 'thing' })\r\n      ).toEqual('A');\r\n    });\r\n\r\n    it(\"throws an error when a config file doesn't exist in a project referencing a rig, which also doesn't have the file\", async () => {\r\n      const configFileLoader: ConfigurationFile<void> = new ConfigurationFile({\r\n        projectRelativeFilePath: 'config/notExist.json',\r\n        jsonSchemaPath: schemaPath\r\n      });\r\n      try {\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, projectFolder, rigConfig);\r\n        fail();\r\n      } catch (e) {\r\n        expect(e).toMatchSnapshot();\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('error cases', () => {\r\n    const errorCasesFolderName: string = 'errorCases';\r\n\r\n    it(\"throws an error when the file doesn't exist\", async () => {\r\n      const errorCaseFolderName: string = 'invalidType';\r\n      const configFileLoader: ConfigurationFile<void> = new ConfigurationFile({\r\n        projectRelativeFilePath: `${errorCasesFolderName}/${errorCaseFolderName}/notExist.json`,\r\n        jsonSchemaPath: nodeJsPath.resolve(\r\n          __dirname,\r\n          errorCasesFolderName,\r\n          errorCaseFolderName,\r\n          'config.schema.json'\r\n        )\r\n      });\r\n      try {\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n        fail();\r\n      } catch (e) {\r\n        expect(e).toMatchSnapshot();\r\n      }\r\n    });\r\n\r\n    it(\"returns undefined when the file doesn't exist for tryLoadConfigurationFileForProjectAsync\", async () => {\r\n      const errorCaseFolderName: string = 'invalidType';\r\n      const configFileLoader: ConfigurationFile<void> = new ConfigurationFile({\r\n        projectRelativeFilePath: `${errorCasesFolderName}/${errorCaseFolderName}/notExist.json`,\r\n        jsonSchemaPath: nodeJsPath.resolve(\r\n          __dirname,\r\n          errorCasesFolderName,\r\n          errorCaseFolderName,\r\n          'config.schema.json'\r\n        )\r\n      });\r\n      expect(\r\n        await configFileLoader.tryLoadConfigurationFileForProjectAsync(terminal, __dirname)\r\n      ).toBeUndefined();\r\n    });\r\n\r\n    it(\"Throws an error when the file isn't valid JSON\", async () => {\r\n      const errorCaseFolderName: string = 'invalidJson';\r\n      const configFileLoader: ConfigurationFile<void> = new ConfigurationFile({\r\n        projectRelativeFilePath: `${errorCasesFolderName}/${errorCaseFolderName}/config.json`,\r\n        jsonSchemaPath: nodeJsPath.resolve(\r\n          __dirname,\r\n          errorCasesFolderName,\r\n          errorCaseFolderName,\r\n          'config.schema.json'\r\n        )\r\n      });\r\n      try {\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n        fail();\r\n      } catch (e) {\r\n        expect(e).toMatchSnapshot();\r\n      }\r\n    });\r\n\r\n    it(\"Throws an error for a file that doesn't match its schema\", async () => {\r\n      const errorCaseFolderName: string = 'invalidType';\r\n      const configFileLoader: ConfigurationFile<void> = new ConfigurationFile({\r\n        projectRelativeFilePath: `${errorCasesFolderName}/${errorCaseFolderName}/config.json`,\r\n        jsonSchemaPath: nodeJsPath.resolve(\r\n          __dirname,\r\n          errorCasesFolderName,\r\n          errorCaseFolderName,\r\n          'config.schema.json'\r\n        )\r\n      });\r\n      try {\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n        fail();\r\n      } catch (e) {\r\n        expect(e).toMatchSnapshot();\r\n      }\r\n    });\r\n\r\n    it('Throws an error when there is a circular reference in \"extends\" properties', async () => {\r\n      const errorCaseFolderName: string = 'circularReference';\r\n      const configFileLoader: ConfigurationFile<void> = new ConfigurationFile({\r\n        projectRelativeFilePath: `${errorCasesFolderName}/${errorCaseFolderName}/config1.json`,\r\n        jsonSchemaPath: nodeJsPath.resolve(\r\n          __dirname,\r\n          errorCasesFolderName,\r\n          errorCaseFolderName,\r\n          'config.schema.json'\r\n        )\r\n      });\r\n      try {\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n        fail();\r\n      } catch (e) {\r\n        expect(e).toMatchSnapshot();\r\n      }\r\n    });\r\n\r\n    it('Throws an error when an \"extends\" property points to a file that cannot be resolved', async () => {\r\n      const errorCaseFolderName: string = 'extendsNotExist';\r\n      const configFileLoader: ConfigurationFile<void> = new ConfigurationFile({\r\n        projectRelativeFilePath: `${errorCasesFolderName}/${errorCaseFolderName}/config.json`,\r\n        jsonSchemaPath: nodeJsPath.resolve(\r\n          __dirname,\r\n          errorCasesFolderName,\r\n          errorCaseFolderName,\r\n          'config.schema.json'\r\n        )\r\n      });\r\n      try {\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n        fail();\r\n      } catch (e) {\r\n        expect(e).toMatchSnapshot();\r\n      }\r\n    });\r\n\r\n    it(\"Throws an error when a combined config file doesn't match the schema\", async () => {\r\n      const errorCaseFolderName: string = 'invalidCombinedFile';\r\n      const configFileLoader: ConfigurationFile<void> = new ConfigurationFile({\r\n        projectRelativeFilePath: `${errorCasesFolderName}/${errorCaseFolderName}/config1.json`,\r\n        jsonSchemaPath: nodeJsPath.resolve(\r\n          __dirname,\r\n          errorCasesFolderName,\r\n          errorCaseFolderName,\r\n          'config.schema.json'\r\n        )\r\n      });\r\n\r\n      try {\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n        fail();\r\n      } catch (e) {\r\n        expect(e).toMatchSnapshot();\r\n      }\r\n    });\r\n\r\n    it(\"Throws an error when a requested file doesn't exist\", async () => {\r\n      const configFileLoader: ConfigurationFile<void> = new ConfigurationFile({\r\n        projectRelativeFilePath: `${errorCasesFolderName}/folderThatDoesntExist/config.json`,\r\n        jsonSchemaPath: nodeJsPath.resolve(\r\n          __dirname,\r\n          errorCasesFolderName,\r\n          'invalidCombinedFile',\r\n          'config.schema.json'\r\n        )\r\n      });\r\n\r\n      try {\r\n        await configFileLoader.loadConfigurationFileForProjectAsync(terminal, __dirname);\r\n        fail();\r\n      } catch (e) {\r\n        expect(e).toMatchSnapshot();\r\n      }\r\n    });\r\n  });\r\n});\r\n"]}