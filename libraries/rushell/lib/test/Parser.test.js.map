{"version":3,"file":"Parser.test.js","sourceRoot":"","sources":["../../src/test/Parser.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,4CAAyC;AACzC,sCAAmC;AAGnC,SAAS,MAAM,CAAC,CAAS;IACvB,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACnG,CAAC;AAED,SAAS,aAAa,CAAC,KAAa;IAClC,MAAM,SAAS,GAAc,IAAI,qBAAS,CAAC,KAAK,CAAC,CAAC;IAClD,MAAM,MAAM,GAAW,IAAI,eAAM,CAAC,SAAS,CAAC,CAAC;IAC7C,MAAM,MAAM,GAAc,MAAM,CAAC,KAAK,EAAE,CAAC;IACzC,MAAM,CAAC;QACL,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACzC,IAAI,EAAE,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE;KAC9B,CAAC,CAAC,eAAe,EAAE,CAAC;AACvB,CAAC;AAED,SAAS,kBAAkB,CAAC,KAAa;IACvC,MAAM,SAAS,GAAc,IAAI,qBAAS,CAAC,KAAK,CAAC,CAAC;IAClD,MAAM,MAAM,GAAW,IAAI,eAAM,CAAC,SAAS,CAAC,CAAC;IAC7C,IAAI,KAAK,GAAsB,SAAS,CAAC;IACzC,IAAI;QACF,MAAM,CAAC,KAAK,EAAE,CAAC;KAChB;IAAC,OAAO,CAAC,EAAE;QACV,KAAK,GAAG,CAAC,CAAC;KACX;IACD,MAAM,CAAC;QACL,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACzC,aAAa,EAAE,KAAK;KACrB,CAAC,CAAC,eAAe,EAAE,CAAC;AACvB,CAAC;AAED,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC5B,aAAa,CAAC,mBAAmB,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC5B,kBAAkB,CAAC,MAAM,CAAC,CAAC;IAC3B,kBAAkB,CAAC,cAAc,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Tokenizer } from '../Tokenizer';\r\nimport { Parser } from '../Parser';\r\nimport { AstScript } from '../AstNode';\r\n\r\nfunction escape(s: string): string {\r\n  return s.replace(/\\n/g, '[n]').replace(/\\r/g, '[r]').replace(/\\t/g, '[t]').replace(/\\\\/g, '[b]');\r\n}\r\n\r\nfunction matchSnapshot(input: string): void {\r\n  const tokenizer: Tokenizer = new Tokenizer(input);\r\n  const parser: Parser = new Parser(tokenizer);\r\n  const result: AstScript = parser.parse();\r\n  expect({\r\n    input: escape(tokenizer.input.toString()),\r\n    tree: '\\n' + result.getDump()\r\n  }).toMatchSnapshot();\r\n}\r\n\r\nfunction matchErrorSnapshot(input: string): void {\r\n  const tokenizer: Tokenizer = new Tokenizer(input);\r\n  const parser: Parser = new Parser(tokenizer);\r\n  let error: Error | undefined = undefined;\r\n  try {\r\n    parser.parse();\r\n  } catch (e) {\r\n    error = e;\r\n  }\r\n  expect({\r\n    input: escape(tokenizer.input.toString()),\r\n    reportedError: error\r\n  }).toMatchSnapshot();\r\n}\r\n\r\ntest('00: basic inputs', () => {\r\n  matchSnapshot('command arg1 arg2');\r\n});\r\n\r\ntest('01: basic errors', () => {\r\n  matchErrorSnapshot('@bad');\r\n  matchErrorSnapshot('command @bad');\r\n});\r\n"]}