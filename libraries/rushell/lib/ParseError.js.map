{"version":3,"file":"ParseError.js","sourceRoot":"","sources":["../src/ParseError.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D;;GAEG;AACH,MAAa,UAAW,SAAQ,KAAK;IAiBnC,YAAmB,OAAe,EAAE,KAAgB,EAAE,UAAkB;QACtE,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAEjD,2CAA2C;QAC3C,EAAE;QACF,+IAA+I;QAC/I,EAAE;QACF,iFAAiF;QAChF,IAAY,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,yDAAyD;QAEzG,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC;QAElC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED;;;;;;OAMG;IACK,MAAM,CAAC,cAAc,CAAC,OAAe,EAAE,KAAgB;QAC7D,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,2BAA2B,CAAC;SACvC;QAED,IAAI,KAAK,CAAC,GAAG,KAAK,CAAC,IAAI,KAAK,CAAC,GAAG,KAAK,CAAC,EAAE;YACtC,MAAM,QAAQ,GAAkB,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7D,IAAI,QAAQ,CAAC,IAAI,EAAE;gBACjB,OAAO,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,OAAO,CAAC;aAC5D;SACF;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AArDD,gCAqDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TextRange, ITextLocation } from './TextRange';\r\n\r\n/**\r\n * An Error subclass used to report errors that occur while parsing an input.\r\n */\r\nexport class ParseError extends Error {\r\n  /**\r\n   * The text range where the error occurred.\r\n   */\r\n  public readonly range: TextRange;\r\n\r\n  /**\r\n   * The message string passed to the constructor, before the line/column\r\n   * numbering information was added.\r\n   */\r\n  public readonly unformattedMessage: string;\r\n\r\n  /**\r\n   * The underlying error, if this error is resulted from an earlier error.\r\n   */\r\n  public readonly innerError: Error | undefined;\r\n\r\n  public constructor(message: string, range: TextRange, innerError?: Error) {\r\n    super(ParseError._formatMessage(message, range));\r\n\r\n    // Boilerplate for extending a system class\r\n    //\r\n    // https://github.com/microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n    //\r\n    // IMPORTANT: The prototype must also be set on any classes which extend this one\r\n    (this as any).__proto__ = ParseError.prototype; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\n    this.unformattedMessage = message;\r\n\r\n    this.range = range;\r\n    this.innerError = innerError;\r\n  }\r\n\r\n  /**\r\n   * Generates a line/column prefix.  Example with line=2 and column=5\r\n   * and message=\"An error occurred\":\r\n   * ```\r\n   * \"(2,5): An error occurred\"\r\n   * ```\r\n   */\r\n  private static _formatMessage(message: string, range: TextRange): string {\r\n    if (!message) {\r\n      message = 'An unknown error occurred';\r\n    }\r\n\r\n    if (range.pos !== 0 || range.end !== 0) {\r\n      const location: ITextLocation = range.getLocation(range.pos);\r\n      if (location.line) {\r\n        return `(${location.line},${location.column}): ` + message;\r\n      }\r\n    }\r\n    return message;\r\n  }\r\n}\r\n"]}