{"version":3,"file":"AstNode.js","sourceRoot":"","sources":["../src/AstNode.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { Token } from './Tokenizer';\r\nimport { TextRange } from './TextRange';\r\n\r\nexport const enum AstKind {\r\n  None = 'None',\r\n  Script = 'Script',\r\n  AndIf = 'AndIf',\r\n  Command = 'Command',\r\n  CompoundWord = 'CompoundWord',\r\n  VariableExpansion = 'VariableExpansion',\r\n  Text = 'Text'\r\n}\r\n\r\n/**\r\n * Base class for all AST nodes.\r\n */\r\nexport abstract class AstBaseNode {\r\n  public readonly kind: AstKind = AstKind.None;\r\n  public range: TextRange | undefined;\r\n\r\n  /**\r\n   * Returns a diagnostic dump of the tree, showing the prefix/suffix/separator for\r\n   * each node.\r\n   */\r\n  public getDump(indent: string = ''): string {\r\n    const nestedIndent: string = indent + '  ';\r\n    let result: string = indent + `- ${this.kind}:\\n`;\r\n\r\n    const dumpText: string | undefined = this.getDumpText();\r\n    if (dumpText) {\r\n      result += nestedIndent + 'Value=' + JSON.stringify(dumpText) + '\\n';\r\n    }\r\n\r\n    const fullRange: TextRange = this.getFullRange();\r\n    if (!fullRange.isEmpty()) {\r\n      result += nestedIndent + 'Range=' + JSON.stringify(fullRange.toString()) + '\\n';\r\n    }\r\n\r\n    const childNodes: AstNode[] = this.getChildNodes();\r\n    for (const child of childNodes) {\r\n      result += child.getDump(nestedIndent);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public getChildNodes(): AstNode[] {\r\n    const nodes: AstNode[] = [];\r\n    this.collectChildNodesInto(nodes);\r\n    return nodes;\r\n  }\r\n\r\n  public getFullRange(): TextRange {\r\n    if (this.range) {\r\n      return this.range;\r\n    }\r\n\r\n    let encompassingRange: TextRange = TextRange.empty;\r\n\r\n    for (const child of this.getChildNodes()) {\r\n      encompassingRange = encompassingRange.getEncompassingRange(child.getFullRange());\r\n    }\r\n\r\n    return encompassingRange;\r\n  }\r\n\r\n  protected abstract collectChildNodesInto(nodes: AstNode[]): void;\r\n\r\n  protected getDumpText(): string | undefined {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a complete script that can be executed.\r\n */\r\nexport class AstScript extends AstBaseNode {\r\n  public readonly kind: AstKind.Script = AstKind.Script;\r\n\r\n  public body: AstNode | undefined;\r\n\r\n  /** @override */\r\n  protected collectChildNodesInto(nodes: AstNode[]): void {\r\n    if (this.body) {\r\n      nodes.push(this.body);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Represents the \"&&\" operator, which is used to join two individual commands.\r\n */\r\nexport class AstAndIf extends AstBaseNode {\r\n  public readonly kind: AstKind.AndIf = AstKind.AndIf;\r\n\r\n  /**\r\n   * The command that executes first, and always.\r\n   */\r\n  public firstCommand: AstCommand | undefined;\r\n\r\n  /**\r\n   * The command that executes second, and only if the first one succeeds.\r\n   */\r\n  public secondCommand: AstCommand | undefined;\r\n\r\n  /** @override */\r\n  protected collectChildNodesInto(nodes: AstNode[]): void {\r\n    if (this.firstCommand) {\r\n      nodes.push(this.firstCommand);\r\n    }\r\n    if (this.secondCommand) {\r\n      nodes.push(this.secondCommand);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a command.  For example, the name of an executable to be started.\r\n */\r\nexport class AstCommand extends AstBaseNode {\r\n  public readonly kind: AstKind.Command = AstKind.Command;\r\n\r\n  public commandPath: AstCompoundWord | undefined;\r\n  public arguments: AstCompoundWord[] = [];\r\n\r\n  /** @override */\r\n  protected collectChildNodesInto(nodes: AstNode[]): void {\r\n    if (this.commandPath) {\r\n      nodes.push(this.commandPath);\r\n    }\r\n    nodes.push(...this.arguments);\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a compound word, e.g. \"--the-thing\" or \"./the/thing\".\r\n */\r\nexport class AstCompoundWord extends AstBaseNode {\r\n  public readonly kind: AstKind.CompoundWord = AstKind.CompoundWord;\r\n\r\n  public readonly parts: AstNode[] = [];\r\n\r\n  /** @override */\r\n  protected collectChildNodesInto(nodes: AstNode[]): void {\r\n    nodes.push(...this.parts);\r\n  }\r\n}\r\n\r\n/**\r\n * Represents an environment variable expansion expression, e.g. \"${VARIABLE}\"\r\n */\r\nexport class AstVariableExpansion extends AstBaseNode {\r\n  public readonly kind: AstKind.VariableExpansion = AstKind.VariableExpansion;\r\n\r\n  /** @override */\r\n  protected collectChildNodesInto(nodes: AstNode[]): void {\r\n    // no children\r\n  }\r\n}\r\n\r\n/**\r\n * Represents some plain text.\r\n */\r\nexport class AstText extends AstBaseNode {\r\n  public readonly kind: AstKind.Text = AstKind.Text;\r\n\r\n  public token: Token | undefined;\r\n\r\n  /** @override */\r\n  protected collectChildNodesInto(nodes: AstNode[]): void {\r\n    // no children\r\n  }\r\n\r\n  /** @override */\r\n  protected getDumpText(): string | undefined {\r\n    if (this.token) {\r\n      return this.token.text;\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport type AstNode = AstScript | AstAndIf | AstCommand | AstCompoundWord | AstVariableExpansion | AstText;\r\n"]}