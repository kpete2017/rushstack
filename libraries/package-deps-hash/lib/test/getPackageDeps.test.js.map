{"version":3,"file":"getPackageDeps.test.js","sourceRoot":"","sources":["../../src/test/getPackageDeps.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { execSync } from 'child_process';\r\n\r\nimport { getPackageDeps, parseGitLsTree, parseGitFilename } from '../getPackageDeps';\r\n\r\nimport { FileSystem, FileConstants } from '@rushstack/node-core-library';\r\n\r\nconst SOURCE_PATH: string = path.join(__dirname).replace(path.join('lib', 'test'), path.join('src', 'test'));\r\n\r\nconst TEST_PROJECT_PATH: string = path.join(SOURCE_PATH, 'testProject');\r\nconst NESTED_TEST_PROJECT_PATH: string = path.join(SOURCE_PATH, 'nestedTestProject');\r\n\r\ndescribe('parseGitFilename', () => {\r\n  it('can parse backslash-escaped filenames', (done) => {\r\n    expect(parseGitFilename('some/path/to/a/file name')).toEqual('some/path/to/a/file name');\r\n    expect(parseGitFilename('\"some/path/to/a/file?name\"')).toEqual('some/path/to/a/file?name');\r\n    expect(parseGitFilename('\"some/path/to/a/file\\\\\\\\name\"')).toEqual('some/path/to/a/file\\\\name');\r\n    expect(parseGitFilename('\"some/path/to/a/file\\\\\"name\"')).toEqual('some/path/to/a/file\"name');\r\n    expect(parseGitFilename('\"some/path/to/a/file\\\\\"name\"')).toEqual('some/path/to/a/file\"name');\r\n    expect(parseGitFilename('\"some/path/to/a/file\\\\347\\\\275\\\\221\\\\347\\\\275\\\\221name\"')).toEqual(\r\n      'some/path/to/a/file网网name'\r\n    );\r\n    expect(parseGitFilename('\"some/path/to/a/file\\\\\\\\347\\\\\\\\\\\\347\\\\275\\\\221name\"')).toEqual(\r\n      'some/path/to/a/file\\\\347\\\\网name'\r\n    );\r\n    expect(parseGitFilename('\"some/path/to/a/file\\\\\\\\\\\\347\\\\275\\\\221\\\\347\\\\275\\\\221name\"')).toEqual(\r\n      'some/path/to/a/file\\\\网网name'\r\n    );\r\n    done();\r\n  });\r\n});\r\n\r\ndescribe('parseGitLsTree', () => {\r\n  it('can handle a blob', (done) => {\r\n    const filename: string = 'src/typings/tsd.d.ts';\r\n    const hash: string = '3451bccdc831cb43d7a70ed8e628dcf9c7f888c8';\r\n\r\n    const output: string = `100644 blob ${hash}\\t${filename}`;\r\n    const changes: Map<string, string> = parseGitLsTree(output);\r\n\r\n    expect(changes.size).toEqual(1); // Expect there to be exactly 1 change\r\n    expect(changes.get(filename)).toEqual(hash); // Expect the hash to be ${hash}\r\n    done();\r\n  });\r\n\r\n  it('can handle a submodule', (done) => {\r\n    const filename: string = 'rushstack';\r\n    const hash: string = 'c5880bf5b0c6c1f2e2c43c95beeb8f0a808e8bac';\r\n\r\n    const output: string = `160000 commit ${hash}\\t${filename}`;\r\n    const changes: Map<string, string> = parseGitLsTree(output);\r\n\r\n    expect(changes.size).toEqual(1); // Expect there to be exactly 1 change\r\n    expect(changes.get(filename)).toEqual(hash); // Expect the hash to be ${hash}\r\n    done();\r\n  });\r\n\r\n  it('can handle multiple lines', (done) => {\r\n    const filename1: string = 'src/typings/tsd.d.ts';\r\n    const hash1: string = '3451bccdc831cb43d7a70ed8e628dcf9c7f888c8';\r\n\r\n    const filename2: string = 'src/foo bar/tsd.d.ts';\r\n    const hash2: string = '0123456789abcdef1234567890abcdef01234567';\r\n\r\n    const output: string = `100644 blob ${hash1}\\t${filename1}\\n100666 blob ${hash2}\\t${filename2}`;\r\n    const changes: Map<string, string> = parseGitLsTree(output);\r\n\r\n    expect(changes.size).toEqual(2); // Expect there to be exactly 2 changes\r\n    expect(changes.get(filename1)).toEqual(hash1); // Expect the hash to be ${hash1}\r\n    expect(changes.get(filename2)).toEqual(hash2); // Expect the hash to be ${hash2}\r\n    done();\r\n  });\r\n\r\n  it('throws with malformed input', (done) => {\r\n    expect(parseGitLsTree.bind(undefined, 'some super malformed input')).toThrow();\r\n    done();\r\n  });\r\n});\r\n\r\ndescribe('getPackageDeps', () => {\r\n  it('can parse committed file', (done) => {\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'file  2.txt': 'a385f754ec4fede884a4864d090064d9aeef8ccb',\r\n        'file蝴蝶.txt': 'ae814af81e16cb2ae8c57503c77e2cab6b5462ba',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return done(e);\r\n    }\r\n\r\n    done();\r\n  });\r\n\r\n  it('can handle files in subfolders', (done) => {\r\n    const results: Map<string, string> = getPackageDeps(NESTED_TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'src/file 1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return done(e);\r\n    }\r\n\r\n    done();\r\n  });\r\n\r\n  it('can handle adding one file', (done) => {\r\n    const tempFilePath: string = path.join(TEST_PROJECT_PATH, 'a.txt');\r\n\r\n    FileSystem.writeFile(tempFilePath, 'a');\r\n\r\n    function _done(e?: Error): void {\r\n      FileSystem.deleteFile(tempFilePath);\r\n      done(e);\r\n    }\r\n\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'a.txt': '2e65efe2a145dda7ee51d1741299f848e5bf752e',\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'file  2.txt': 'a385f754ec4fede884a4864d090064d9aeef8ccb',\r\n        'file蝴蝶.txt': 'ae814af81e16cb2ae8c57503c77e2cab6b5462ba',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can handle adding two files', (done) => {\r\n    const tempFilePath1: string = path.join(TEST_PROJECT_PATH, 'a.txt');\r\n    const tempFilePath2: string = path.join(TEST_PROJECT_PATH, 'b.txt');\r\n\r\n    FileSystem.writeFile(tempFilePath1, 'a');\r\n    FileSystem.writeFile(tempFilePath2, 'a');\r\n\r\n    function _done(e?: Error): void {\r\n      FileSystem.deleteFile(tempFilePath1);\r\n      FileSystem.deleteFile(tempFilePath2);\r\n      done(e);\r\n    }\r\n\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'a.txt': '2e65efe2a145dda7ee51d1741299f848e5bf752e',\r\n        'b.txt': '2e65efe2a145dda7ee51d1741299f848e5bf752e',\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'file  2.txt': 'a385f754ec4fede884a4864d090064d9aeef8ccb',\r\n        'file蝴蝶.txt': 'ae814af81e16cb2ae8c57503c77e2cab6b5462ba',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can handle removing one file', (done) => {\r\n    const testFilePath: string = path.join(TEST_PROJECT_PATH, 'file1.txt');\r\n\r\n    FileSystem.deleteFile(testFilePath);\r\n\r\n    function _done(e?: Error): void {\r\n      execSync(`git checkout ${testFilePath}`, { stdio: 'ignore' });\r\n      done(e);\r\n    }\r\n\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file  2.txt': 'a385f754ec4fede884a4864d090064d9aeef8ccb',\r\n        'file蝴蝶.txt': 'ae814af81e16cb2ae8c57503c77e2cab6b5462ba',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can handle changing one file', (done) => {\r\n    const testFilePath: string = path.join(TEST_PROJECT_PATH, 'file1.txt');\r\n\r\n    FileSystem.writeFile(testFilePath, 'abc');\r\n\r\n    function _done(e?: Error): void {\r\n      execSync(`git checkout ${testFilePath}`, { stdio: 'ignore' });\r\n      done(e);\r\n    }\r\n\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file1.txt': 'f2ba8f84ab5c1bce84a7b441cb1959cfc7093b7f',\r\n        'file  2.txt': 'a385f754ec4fede884a4864d090064d9aeef8ccb',\r\n        'file蝴蝶.txt': 'ae814af81e16cb2ae8c57503c77e2cab6b5462ba',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can exclude a committed file', (done) => {\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH, [\r\n      'file1.txt',\r\n      'file  2.txt',\r\n      'file蝴蝶.txt'\r\n    ]);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return done(e);\r\n    }\r\n\r\n    done();\r\n  });\r\n\r\n  it('can exclude an added file', (done) => {\r\n    const tempFilePath: string = path.join(TEST_PROJECT_PATH, 'a.txt');\r\n\r\n    FileSystem.writeFile(tempFilePath, 'a');\r\n\r\n    function _done(e?: Error): void {\r\n      FileSystem.deleteFile(tempFilePath);\r\n      done(e);\r\n    }\r\n\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH, ['a.txt']);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'file  2.txt': 'a385f754ec4fede884a4864d090064d9aeef8ccb',\r\n        'file蝴蝶.txt': 'ae814af81e16cb2ae8c57503c77e2cab6b5462ba',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      expect(filePaths).toHaveLength(Object.keys(expectedFiles).length);\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can handle a filename with spaces', (done) => {\r\n    const tempFilePath: string = path.join(TEST_PROJECT_PATH, 'a file.txt');\r\n\r\n    FileSystem.writeFile(tempFilePath, 'a');\r\n\r\n    function _done(e?: Error): void {\r\n      FileSystem.deleteFile(tempFilePath);\r\n      done(e);\r\n    }\r\n\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'file  2.txt': 'a385f754ec4fede884a4864d090064d9aeef8ccb',\r\n        'file蝴蝶.txt': 'ae814af81e16cb2ae8c57503c77e2cab6b5462ba',\r\n        'a file.txt': '2e65efe2a145dda7ee51d1741299f848e5bf752e',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      expect(filePaths).toHaveLength(Object.keys(expectedFiles).length);\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can handle a filename with multiple spaces', (done) => {\r\n    const tempFilePath: string = path.join(TEST_PROJECT_PATH, 'a  file name.txt');\r\n\r\n    FileSystem.writeFile(tempFilePath, 'a');\r\n\r\n    function _done(e?: Error): void {\r\n      FileSystem.deleteFile(tempFilePath);\r\n      done(e);\r\n    }\r\n\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'file  2.txt': 'a385f754ec4fede884a4864d090064d9aeef8ccb',\r\n        'file蝴蝶.txt': 'ae814af81e16cb2ae8c57503c77e2cab6b5462ba',\r\n        'a  file name.txt': '2e65efe2a145dda7ee51d1741299f848e5bf752e',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      expect(filePaths).toHaveLength(Object.keys(expectedFiles).length);\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can handle a filename with non-standard characters', (done) => {\r\n    const tempFilePath: string = path.join(TEST_PROJECT_PATH, 'newFile批把.txt');\r\n\r\n    FileSystem.writeFile(tempFilePath, 'a');\r\n\r\n    function _done(e?: Error): void {\r\n      FileSystem.deleteFile(tempFilePath);\r\n      done(e);\r\n    }\r\n\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'file  2.txt': 'a385f754ec4fede884a4864d090064d9aeef8ccb',\r\n        'file蝴蝶.txt': 'ae814af81e16cb2ae8c57503c77e2cab6b5462ba',\r\n        'newFile批把.txt': '2e65efe2a145dda7ee51d1741299f848e5bf752e',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      expect(filePaths).toHaveLength(Object.keys(expectedFiles).length);\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n\r\n  it('can handle a filename with non-standard characters', (done) => {\r\n    const tempFilePath: string = path.join(TEST_PROJECT_PATH, 'newFile批把.txt');\r\n\r\n    FileSystem.writeFile(tempFilePath, 'a');\r\n\r\n    function _done(e?: Error): void {\r\n      FileSystem.deleteFile(tempFilePath);\r\n      done(e);\r\n    }\r\n\r\n    const results: Map<string, string> = getPackageDeps(TEST_PROJECT_PATH);\r\n    try {\r\n      const expectedFiles: { [key: string]: string } = {\r\n        'file1.txt': 'c7b2f707ac99ca522f965210a7b6b0b109863f34',\r\n        'file  2.txt': 'a385f754ec4fede884a4864d090064d9aeef8ccb',\r\n        'file蝴蝶.txt': 'ae814af81e16cb2ae8c57503c77e2cab6b5462ba',\r\n        'newFile批把.txt': '2e65efe2a145dda7ee51d1741299f848e5bf752e',\r\n        [FileConstants.PackageJson]: '18a1e415e56220fa5122428a4ef8eb8874756576'\r\n      };\r\n      const filePaths: string[] = Array.from(results.keys()).sort();\r\n\r\n      expect(filePaths).toHaveLength(Object.keys(expectedFiles).length);\r\n\r\n      filePaths.forEach((filePath) => expect(results.get(filePath)).toEqual(expectedFiles[filePath]));\r\n    } catch (e) {\r\n      return _done(e);\r\n    }\r\n\r\n    _done();\r\n  });\r\n});\r\n"]}