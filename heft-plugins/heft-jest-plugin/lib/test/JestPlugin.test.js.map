{"version":3,"file":"JestPlugin.test.js","sourceRoot":"","sources":["../../src/test/JestPlugin.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport type { Config } from '@jest/types';\r\nimport { ConfigurationFile } from '@rushstack/heft-config-file';\r\nimport { Import, StringBufferTerminalProvider, Terminal } from '@rushstack/node-core-library';\r\n\r\nimport { IHeftJestConfiguration, JestPlugin } from '../JestPlugin';\r\n\r\ndescribe('JestConfigLoader', () => {\r\n  let terminalProvider: StringBufferTerminalProvider;\r\n  let terminal: Terminal;\r\n\r\n  beforeEach(() => {\r\n    terminalProvider = new StringBufferTerminalProvider(false);\r\n    terminal = new Terminal(terminalProvider);\r\n  });\r\n\r\n  it('resolves extended config modules', async () => {\r\n    // Because we require the built modules, we need to set our rootDir to be in the 'lib' folder, since transpilation\r\n    // means that we don't run on the built test assets directly\r\n    const rootDir: string = path.resolve(__dirname, '..', '..', 'lib', 'test', 'project1');\r\n    const loader: ConfigurationFile<IHeftJestConfiguration> = JestPlugin._getJestConfigurationLoader(\r\n      rootDir,\r\n      'config/jest.config.json'\r\n    );\r\n    const loadedConfig: IHeftJestConfiguration = await loader.loadConfigurationFileForProjectAsync(\r\n      terminal,\r\n      path.join(__dirname, '..', '..', 'lib', 'test', 'project1')\r\n    );\r\n\r\n    expect(loadedConfig.preset).toBe(undefined);\r\n    expect(loadedConfig.globalSetup).toBe(path.join(rootDir, 'a', 'b', 'globalSetupFile1.js'));\r\n\r\n    // Validate string[]\r\n    expect(loadedConfig.setupFiles?.length).toBe(2);\r\n    expect(loadedConfig.setupFiles![0]).toBe(path.join(rootDir, 'a', 'b', 'setupFile2.js'));\r\n    expect(loadedConfig.setupFiles![1]).toBe(path.join(rootDir, 'a', 'b', 'setupFile1.js'));\r\n\r\n    // Validate testEnvironment\r\n    expect(loadedConfig.testEnvironment).toBe(require.resolve('jest-environment-node'));\r\n\r\n    // Validate reporters\r\n    expect(loadedConfig.reporters?.length).toBe(3);\r\n    expect(loadedConfig.reporters![0]).toBe('default');\r\n    expect(loadedConfig.reporters![1]).toBe(path.join(rootDir, 'a', 'c', 'mockReporter1.js'));\r\n    expect((loadedConfig.reporters![2] as Config.ReporterConfig)[0]).toBe(\r\n      path.join(rootDir, 'a', 'c', 'd', 'mockReporter2.js')\r\n    );\r\n\r\n    // Validate transformers\r\n    expect(Object.keys(loadedConfig.transform || {}).length).toBe(2);\r\n    expect(loadedConfig.transform!['\\\\.(xxx)$']).toBe(\r\n      path.join(rootDir, 'a', 'b', 'mockTransformModule2.js')\r\n    );\r\n    expect((loadedConfig.transform!['\\\\.(yyy)$'] as Config.TransformerConfig)[0]).toBe(\r\n      path.join(rootDir, 'a', 'c', 'mockTransformModule3.js')\r\n    );\r\n\r\n    // Validate moduleNameMapper\r\n    expect(Object.keys(loadedConfig.moduleNameMapper || {}).length).toBe(4);\r\n    expect(loadedConfig.moduleNameMapper!['\\\\.resx$']).toBe(\r\n      // Test overrides\r\n      path.join(rootDir, 'a', 'some', 'path', 'to', 'overridden', 'module.js')\r\n    );\r\n    expect(loadedConfig.moduleNameMapper!['\\\\.jpg$']).toBe(\r\n      // Test <configDir>\r\n      path.join(rootDir, 'a', 'c', 'some', 'path', 'to', 'module.js')\r\n    );\r\n    expect(loadedConfig.moduleNameMapper!['^!!file-loader']).toBe(\r\n      // Test <packageDir:...>\r\n      path.join(\r\n        Import.resolvePackage({ packageName: '@rushstack/heft', baseFolderPath: __dirname }),\r\n        'some',\r\n        'path',\r\n        'to',\r\n        'module.js'\r\n      )\r\n    );\r\n    expect(loadedConfig.moduleNameMapper!['^@1js/search-dispatcher/lib/(.+)']).toBe(\r\n      // Test unmodified\r\n      '@1js/search-dispatcher/lib-commonjs/$1'\r\n    );\r\n\r\n    // Validate globals\r\n    expect(Object.keys(loadedConfig.globals || {}).length).toBe(4);\r\n    expect(loadedConfig.globals!.key1).toBe('value5');\r\n    expect((loadedConfig.globals!.key2 as string[]).length).toBe(4);\r\n    expect((loadedConfig.globals!.key2 as string[])[0]).toBe('value2');\r\n    expect((loadedConfig.globals!.key2 as string[])[1]).toContain('value3');\r\n    expect((loadedConfig.globals!.key2 as string[])[2]).toContain('value2');\r\n    expect((loadedConfig.globals!.key2 as string[])[3]).toContain('value6');\r\n    const key3Obj: any = (loadedConfig.globals as any).key3; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    expect(Object.keys(key3Obj).length).toBe(3);\r\n    expect(key3Obj.key4).toBe('value7');\r\n    expect(key3Obj.key5).toBe('value5');\r\n    expect(key3Obj.key6).toBe('value8');\r\n    expect(loadedConfig.globals!.key7).toBe('value9');\r\n  });\r\n\r\n  it('resolves extended package modules', async () => {\r\n    // Because we require the built modules, we need to set our rootDir to be in the 'lib' folder, since transpilation\r\n    // means that we don't run on the built test assets directly\r\n    const rootDir: string = path.resolve(__dirname, '..', '..', 'lib', 'test', 'project1');\r\n    const loader: ConfigurationFile<IHeftJestConfiguration> = JestPlugin._getJestConfigurationLoader(\r\n      rootDir,\r\n      'config/jest.config.json'\r\n    );\r\n    const loadedConfig: IHeftJestConfiguration = await loader.loadConfigurationFileForProjectAsync(\r\n      terminal,\r\n      path.resolve(__dirname, '..', '..', 'lib', 'test', 'project2')\r\n    );\r\n\r\n    expect(loadedConfig.setupFiles?.length).toBe(1);\r\n    expect(loadedConfig.setupFiles![0]).toBe(require.resolve('@jest/core'));\r\n\r\n    // Also validate that a test environment that we specified as 'jsdom' (but have not added as a dependency)\r\n    // is resolved, implying it came from Jest directly\r\n    expect(loadedConfig.testEnvironment).toContain('jest-environment-jsdom');\r\n    expect(loadedConfig.testEnvironment).toMatch(/index.js$/);\r\n  });\r\n});\r\n"]}