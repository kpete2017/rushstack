{"version":3,"file":"HeftJestDataFile.js","sourceRoot":"","sources":["../src/HeftJestDataFile.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,oEAAoE;AA8BpE;;;;GAIG;AACH,MAAa,gBAAgB;IAC3B;;OAEG;IACI,MAAM,CAAC,KAAK,CAAC,mBAAmB,CACrC,aAAqB,EACrB,IAA4B;QAE5B,MAAM,YAAY,GAAW,gBAAgB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;QAC/E,MAAM,4BAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,YAAY,EAAE;YAC3C,kBAAkB,EAAE,IAAI;YACxB,aAAa,EAAE,IAAI;YACnB,aAAa,EAAE,iFAAiF;SACjG,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,aAAqB;QACtE,MAAM,YAAY,GAAW,gBAAgB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;QAC/E,IAAI,QAA+B,CAAC;QACpC,IAAI;YACF,QAAQ,GAAG,MAAM,4BAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;SACnD;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,8BAAU,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;gBACzC,MAAM,IAAI,KAAK,CACb,oDAAoD,YAAY,8BAA8B,CAC/F,CAAC;aACH;YACD,MAAM,CAAC,CAAC;SACT;QACD,MAAM,gBAAgB,CAAC,8BAA8B,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QAC/E,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;OAGG;IACI,MAAM,CAAC,cAAc,CAAC,aAAqB;QAChD,MAAM,YAAY,GAAW,gBAAgB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;QAC/E,OAAO,4BAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,iBAAiB,CAAC,aAAqB;QACnD,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,aAAa,EAAE,qBAAqB,CAAC,CAAC;IACjF,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,8BAA8B,CACjD,gBAAuC,EACvC,aAAqB;QAErB,4CAA4C;QAC5C,IAAI,gBAAgB,CAAC,mBAAmB,EAAE;YACxC,MAAM,qBAAqB,GAAW,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YACxG,IAAI,CAAC,CAAC,MAAM,8BAAU,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC,EAAE;gBAC1D,MAAM,IAAI,KAAK,CACb,kDAAkD;oBAChD,qBAAqB;oBACrB,+EAA+E;oBAC/E,yCAAyC,CAC5C,CAAC;aACH;SACF;IACH,CAAC;CACF;AArED,4CAqEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { FileSystem, JsonFile } from '@rushstack/node-core-library';\r\n\r\n/**\r\n * Schema for heft-jest-data.json\r\n */\r\nexport interface IHeftJestDataFileJson {\r\n  /**\r\n   * The \"emitFolderNameForTests\" from config/typescript.json\r\n   */\r\n  emitFolderNameForTests: string;\r\n\r\n  /**\r\n   * The file extension attached to compiled test files.\r\n   */\r\n  extensionForTests: '.js' | '.cjs' | '.mjs';\r\n\r\n  /**\r\n   * Normally the jest-build-transform compares the timestamps of the .js output file and .ts source file\r\n   * to determine whether the TypeScript compiler has completed.  However this heuristic is only necessary\r\n   * in the interactive \"--watch\" mode, since otherwise Heft doesn't invoke Jest until after the compiler\r\n   * has finished.  Heft improves reliability for a non-watch build by setting skipTimestampCheck=true.\r\n   */\r\n  skipTimestampCheck: boolean;\r\n\r\n  /**\r\n   * Whether or not the project being tested is a TypeScript project.\r\n   */\r\n  isTypeScriptProject: boolean;\r\n}\r\n\r\n/**\r\n * Manages loading/saving the \"heft-jest-data.json\" data file.  This file communicates\r\n * configuration information from Heft to jest-build-transform.js.  The jest-build-transform.js script gets\r\n * loaded dynamically by the Jest engine, so it does not have access to the normal HeftConfiguration objects.\r\n */\r\nexport class HeftJestDataFile {\r\n  /**\r\n   * Called by JestPlugin to write the file.\r\n   */\r\n  public static async saveForProjectAsync(\r\n    projectFolder: string,\r\n    json?: IHeftJestDataFileJson\r\n  ): Promise<void> {\r\n    const jsonFilePath: string = HeftJestDataFile.getConfigFilePath(projectFolder);\r\n    await JsonFile.saveAsync(json, jsonFilePath, {\r\n      ensureFolderExists: true,\r\n      onlyIfChanged: true,\r\n      headerComment: '// THIS DATA FILE IS INTERNAL TO HEFT; DO NOT MODIFY IT OR RELY ON ITS CONTENTS'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called by JestPlugin to load and validate the Heft data file before running Jest.\r\n   */\r\n  public static async loadAndValidateForProjectAsync(projectFolder: string): Promise<IHeftJestDataFileJson> {\r\n    const jsonFilePath: string = HeftJestDataFile.getConfigFilePath(projectFolder);\r\n    let dataFile: IHeftJestDataFileJson;\r\n    try {\r\n      dataFile = await JsonFile.loadAsync(jsonFilePath);\r\n    } catch (e) {\r\n      if (FileSystem.isFileDoesNotExistError(e)) {\r\n        throw new Error(\r\n          `Could not find the Jest TypeScript data file at \"${jsonFilePath}\". Was the compiler invoked?`\r\n        );\r\n      }\r\n      throw e;\r\n    }\r\n    await HeftJestDataFile._validateHeftJestDataFileAsync(dataFile, projectFolder);\r\n    return dataFile;\r\n  }\r\n\r\n  /**\r\n   * Called by jest-build-transform.js to read the file. No validation is performed because validation\r\n   * should be performed asynchronously in the JestPlugin.\r\n   */\r\n  public static loadForProject(projectFolder: string): IHeftJestDataFileJson {\r\n    const jsonFilePath: string = HeftJestDataFile.getConfigFilePath(projectFolder);\r\n    return JsonFile.load(jsonFilePath);\r\n  }\r\n\r\n  /**\r\n   * Get the absolute path to the heft-jest-data.json file\r\n   */\r\n  public static getConfigFilePath(projectFolder: string): string {\r\n    return path.join(projectFolder, '.heft', 'build-cache', 'heft-jest-data.json');\r\n  }\r\n\r\n  private static async _validateHeftJestDataFileAsync(\r\n    heftJestDataFile: IHeftJestDataFileJson,\r\n    projectFolder: string\r\n  ): Promise<void> {\r\n    // Only need to validate if using TypeScript\r\n    if (heftJestDataFile.isTypeScriptProject) {\r\n      const emitFolderPathForJest: string = path.join(projectFolder, heftJestDataFile.emitFolderNameForTests);\r\n      if (!(await FileSystem.existsAsync(emitFolderPathForJest))) {\r\n        throw new Error(\r\n          'The transpiler output folder does not exist:\\n  ' +\r\n            emitFolderPathForJest +\r\n            '\\nWas the compiler invoked? Is the \"emitFolderNameForTests\" setting correctly' +\r\n            ' specified in config/typescript.json?\\n'\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}