{"version":3,"file":"HeftJestReporter.js","sourceRoot":"","sources":["../src/HeftJestReporter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Terminal, Colors, InternalError, Text, IColorableSequence } from '@rushstack/node-core-library';\r\nimport {\r\n  Reporter,\r\n  Test,\r\n  TestResult,\r\n  AggregatedResult,\r\n  Context,\r\n  ReporterOnStartOptions,\r\n  Config\r\n} from '@jest/reporters';\r\n\r\nimport type { HeftConfiguration } from '@rushstack/heft';\r\n\r\nexport interface IHeftJestReporterOptions {\r\n  heftConfiguration: HeftConfiguration;\r\n  debugMode: boolean;\r\n}\r\n\r\n/**\r\n * This custom reporter presents Jest test results using Heft's logging system.\r\n *\r\n * @privateRemarks\r\n * After making changes to this code, it's recommended to use `--debug-heft-reporter` to compare\r\n * with the output from Jest's default reporter, to check our output is consistent with typical\r\n * Jest behavior.\r\n *\r\n * For reference, Jest's default implementation is here:\r\n * https://github.com/facebook/jest/blob/master/packages/jest-reporters/src/default_reporter.ts\r\n */\r\nexport default class HeftJestReporter implements Reporter {\r\n  private _terminal: Terminal;\r\n  private _buildFolder: string;\r\n  private _debugMode: boolean;\r\n\r\n  public constructor(jestConfig: Config.GlobalConfig, options: IHeftJestReporterOptions) {\r\n    this._terminal = options.heftConfiguration.globalTerminal;\r\n    this._buildFolder = options.heftConfiguration.buildFolder;\r\n    this._debugMode = options.debugMode;\r\n  }\r\n\r\n  public async onTestStart(test: Test): Promise<void> {\r\n    this._terminal.writeLine(\r\n      Colors.whiteBackground(Colors.black('START')),\r\n      ` ${this._getTestPath(test.path)}`\r\n    );\r\n  }\r\n\r\n  public async onTestResult(\r\n    test: Test,\r\n    testResult: TestResult,\r\n    aggregatedResult: AggregatedResult\r\n  ): Promise<void> {\r\n    this._writeConsoleOutput(testResult);\r\n    const { numPassingTests, numFailingTests, failureMessage, testExecError } = testResult;\r\n\r\n    if (numFailingTests > 0) {\r\n      this._terminal.write(Colors.redBackground(Colors.black('FAIL')));\r\n    } else if (testExecError) {\r\n      this._terminal.write(Colors.redBackground(Colors.black(`FAIL (${testExecError.type})`)));\r\n    } else {\r\n      this._terminal.write(Colors.greenBackground(Colors.black('PASS')));\r\n    }\r\n\r\n    const duration: string = test.duration ? `${test.duration / 1000}s` : '?';\r\n    this._terminal.writeLine(\r\n      ` ${this._getTestPath(\r\n        test.path\r\n      )} (duration: ${duration}, ${numPassingTests} passed, ${numFailingTests} failed)`\r\n    );\r\n\r\n    if (failureMessage) {\r\n      this._terminal.writeErrorLine(failureMessage);\r\n    }\r\n\r\n    if (testResult.snapshot.updated) {\r\n      this._terminal.writeErrorLine(\r\n        `Updated ${this._formatWithPlural(testResult.snapshot.updated, 'snapshot', 'snapshots')}`\r\n      );\r\n    }\r\n\r\n    if (testResult.snapshot.added) {\r\n      this._terminal.writeErrorLine(\r\n        `Added ${this._formatWithPlural(testResult.snapshot.added, 'snapshot', 'snapshots')}`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Tests often write messy console output.  For example, it may contain messages such as\r\n  // \"ERROR: Test successfully threw an exception!\", which may confuse someone who is investigating\r\n  // a build failure and searching its log output for errors.  To reduce confusion, we add a prefix\r\n  // like \"|console.error|\" to each output line, to clearly distinguish test logging from regular\r\n  // task output.  You can suppress test logging entirely using the \"--silent\" CLI parameter.\r\n  private _writeConsoleOutput(testResult: TestResult): void {\r\n    if (testResult.console) {\r\n      for (const logEntry of testResult.console) {\r\n        switch (logEntry.type) {\r\n          case 'debug':\r\n            this._writeConsoleOutputWithLabel('console.debug', logEntry.message);\r\n            break;\r\n          case 'log':\r\n            this._writeConsoleOutputWithLabel('console.log', logEntry.message);\r\n            break;\r\n          case 'warn':\r\n            this._writeConsoleOutputWithLabel('console.warn', logEntry.message);\r\n            break;\r\n          case 'error':\r\n            this._writeConsoleOutputWithLabel('console.error', logEntry.message);\r\n            break;\r\n          case 'info':\r\n            this._writeConsoleOutputWithLabel('console.info', logEntry.message);\r\n            break;\r\n\r\n          case 'groupCollapsed':\r\n            if (this._debugMode) {\r\n              // The \"groupCollapsed\" name is too long\r\n              this._writeConsoleOutputWithLabel('collapsed', logEntry.message);\r\n            }\r\n            break;\r\n\r\n          case 'assert':\r\n          case 'count':\r\n          case 'dir':\r\n          case 'dirxml':\r\n          case 'group':\r\n          case 'time':\r\n            if (this._debugMode) {\r\n              this._writeConsoleOutputWithLabel(\r\n                logEntry.type,\r\n                `(${logEntry.type}) ${logEntry.message}`,\r\n                true\r\n              );\r\n            }\r\n            break;\r\n          default:\r\n            // Let's trap any new log types that get introduced in the future to make sure we handle\r\n            // them correctly.\r\n            throw new InternalError('Unimplemented Jest console log entry type: ' + logEntry.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _writeConsoleOutputWithLabel(label: string, message: string, debug?: boolean): void {\r\n    if (message === '') {\r\n      return;\r\n    }\r\n    const scrubbedMessage: string = Text.ensureTrailingNewline(Text.convertToLf(message));\r\n    const lines: string[] = scrubbedMessage.split('\\n').slice(0, -1);\r\n\r\n    const PAD_LENGTH: number = 13; // \"console.error\" is the longest label\r\n\r\n    const paddedLabel: string = '|' + label.padStart(PAD_LENGTH) + '|';\r\n    const prefix: IColorableSequence = debug ? Colors.yellow(paddedLabel) : Colors.cyan(paddedLabel);\r\n\r\n    for (const line of lines) {\r\n      this._terminal.writeLine(prefix, ' ' + line);\r\n    }\r\n  }\r\n\r\n  public async onRunStart(\r\n    aggregatedResult: AggregatedResult,\r\n    options: ReporterOnStartOptions\r\n  ): Promise<void> {\r\n    // Jest prints some text that changes the console's color without a newline, so we reset the console's color here\r\n    // and print a newline.\r\n    this._terminal.writeLine('\\u001b[0m');\r\n    this._terminal.writeLine(\r\n      `Run start. ${this._formatWithPlural(aggregatedResult.numTotalTestSuites, 'test suite', 'test suites')}`\r\n    );\r\n  }\r\n\r\n  public async onRunComplete(contexts: Set<Context>, results: AggregatedResult): Promise<void> {\r\n    const { numPassedTests, numFailedTests, numTotalTests, numRuntimeErrorTestSuites } = results;\r\n\r\n    this._terminal.writeLine();\r\n    this._terminal.writeLine('Tests finished:');\r\n\r\n    const successesText: string = `  Successes: ${numPassedTests}`;\r\n    this._terminal.writeLine(numPassedTests > 0 ? Colors.green(successesText) : successesText);\r\n\r\n    const failText: string = `  Failures: ${numFailedTests}`;\r\n    this._terminal.writeLine(numFailedTests > 0 ? Colors.red(failText) : failText);\r\n\r\n    if (numRuntimeErrorTestSuites) {\r\n      this._terminal.writeLine(Colors.red(`  Failed test suites: ${numRuntimeErrorTestSuites}`));\r\n    }\r\n\r\n    this._terminal.writeLine(`  Total: ${numTotalTests}`);\r\n  }\r\n\r\n  public getLastError(): void {\r\n    // This reporter doesn't have any errors to throw\r\n  }\r\n\r\n  private _getTestPath(fullTestPath: string): string {\r\n    return path.relative(this._buildFolder, fullTestPath);\r\n  }\r\n\r\n  private _formatWithPlural(num: number, singular: string, plural: string): string {\r\n    return `${num} ${num === 1 ? singular : plural}`;\r\n  }\r\n}\r\n"]}