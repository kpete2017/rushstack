{"version":3,"file":"jest-identity-mock-transform.js","sourceRoot":"","sources":["../src/jest-identity-mock-transform.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAE7B,oEAA0D;AAE1D,iDAAiD;AACjD,MAAM,SAAS,GAAW,8BAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;AAElG;;;;;;;;;;;GAWG;AACH,SAAgB,OAAO,CAAC,GAAW,EAAE,QAAgB,EAAE,WAAsC;IAC3F,OAAO,SAAS,CAAC;AACnB,CAAC;AAFD,0BAEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { InitialOptionsWithRootDir } from '@jest/types/build/Config';\r\nimport { FileSystem } from '@rushstack/node-core-library';\r\n\r\n// The transpiled output for IdentityMockProxy.ts\r\nconst proxyCode: string = FileSystem.readFile(path.join(__dirname, 'identityMock.js')).toString();\r\n\r\n/**\r\n * This Jest transform handles imports of files like CSS that would normally be\r\n * processed by a Webpack loader.  Instead of actually loading the resource, we return a mock object.\r\n * The mock simply returns the imported name as a text string.  For example, `mock.xyz` would evaluate to `\"xyz\"`.\r\n * This technique is based on \"identity-obj-proxy\":\r\n *\r\n *   https://www.npmjs.com/package/identity-obj-proxy\r\n *\r\n * @privateRemarks\r\n * (We don't import the actual \"identity-obj-proxy\" package because transform output gets resolved with respect\r\n * to the target project folder, not Heft's folder.)\r\n */\r\nexport function process(src: string, filename: string, jestOptions: InitialOptionsWithRootDir): string {\r\n  return proxyCode;\r\n}\r\n"]}