{"version":3,"file":"JestPlugin.js","sourceRoot":"","sources":["../src/JestPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAE3D,sBAAsB;AACtB,6BAA2B;AAE3B,2CAA6B;AAC7B,mDAA6G;AAC7G,mCAA6C;AAa7C,qCAAgD;AAEhD,kEAKqC;AACrC,oEAOsC;AAGtC,yDAAsD;AAqCtD,MAAM,WAAW,GAAW,YAAY,CAAC;AACzC,MAAM,mBAAmB,GAAW,6BAA6B,CAAC;AAClE,MAAM,qBAAqB,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACpE,MAAM,kBAAkB,GAAW,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,EAAE,8BAA8B,CAAC,CAAC;AACtG,MAAM,2BAA2B,GAAW,yBAAyB,CAAC;AAEtE,MAAM,aAAa,GAAW,WAAW,CAAC;AAC1C,MAAM,eAAe,GAAW,aAAa,CAAC;AAC9C,MAAM,oBAAoB,GAAW,SAAS,CAAC;AAC/C,MAAM,gBAAgB,GAAW,IAAI,MAAM,CAAC,yCAAyC,CAAC,CAAC;AAEvF;;GAEG;AACH,MAAa,UAAU;IAAvB;QACkB,eAAU,GAAW,WAAW,CAAC;QACjC,kBAAa,GAAe,8BAAU,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;IA0gBtF,CAAC;IAxgBC;;OAEG;IACI,MAAM,CAAC,KAAK,CAAC,eAAe,CACjC,YAA0B,EAC1B,iBAAoC,EACpC,SAAkB,EAClB,oBAA2C,EAC3C,OAA4B;QAE5B,mDAAmD;QACnD,MAAM,mCAAgB,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,WAAW,EAAE;YACxE,sBAAsB,EAAE,oBAAoB,CAAC,sBAAsB,IAAI,KAAK;YAC5E,iBAAiB,EAAE,oBAAoB,CAAC,qBAAqB,IAAI,KAAK;YACtE,kBAAkB,EAAE,CAAC,oBAAoB,CAAC,SAAS;YACnD,mFAAmF;YACnF,2EAA2E;YAC3E,mBAAmB,EAAE,CAAC,CAAC,oBAAoB,CAAC,mBAAmB;SAChE,CAAC,CAAC;QACH,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gCAAgC,CAAC,CAAC;IAC3E,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,KAAK,CAAC,aAAa,CAC/B,YAA0B,EAC1B,iBAAoC,EACpC,SAAkB,EAClB,mBAAyC,EACzC,OAA4B;;QAE5B,MAAM,QAAQ,GAAa,YAAY,CAAC,QAAQ,CAAC;QACjD,QAAQ,CAAC,SAAS,CAAC,sBAAsB,iBAAU,EAAE,EAAE,CAAC,CAAC;QAEzD,MAAM,WAAW,GAAW,iBAAiB,CAAC,WAAW,CAAC;QAC1D,MAAM,uBAAuB,SAAW,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,iBAAiB,mCAAI,2BAA2B,CAAC;QAClG,MAAM,mCAAgB,CAAC,8BAA8B,CAAC,WAAW,CAAC,CAAC;QAEnE,IAAI,UAAkC,CAAC;QACvC,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,oCAAoC,EAAE;YACjD,8DAA8D;YAC9D,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,uBAAuB,CAAC,CAAC;YAC/E,IAAI,CAAC,CAAC,MAAM,8BAAU,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,EAAE;gBACnD,YAAY,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,yCAAyC,cAAc,IAAI,CAAC,CAAC,CAAC;gBAC/F,OAAO;aACR;YACD,UAAU,GAAG,MAAM,4BAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;SACvD;aAAM;YACL,gEAAgE;YAChE,UAAU,GAAG,MAAM,UAAU,CAAC,2BAA2B,CACvD,WAAW,EACX,uBAAuB,CACxB,CAAC,oCAAoC,CACpC,QAAQ,EACR,iBAAiB,CAAC,WAAW,EAC7B,iBAAiB,CAAC,SAAS,CAC5B,CAAC;YACF,IAAI,UAAU,CAAC,MAAM,EAAE;gBACrB,MAAM,IAAI,KAAK,CACb,4FAA4F;oBAC1F,6FAA6F;oBAC7F,2FAA2F;oBAC3F,qBAAqB,CACxB,CAAC;aACH;SACF;QAED,MAAM,QAAQ,GAAgB;YAC5B,KAAK,EAAE,mBAAmB,CAAC,SAAS;YAEpC,8EAA8E;YAC9E,SAAS,EAAE,SAAS;YACpB,KAAK,EAAE,SAAS;YAChB,iBAAiB,EAAE,CAAC,CAAC,mBAAmB,CAAC,iBAAiB;YAE1D,cAAc,EAAE,UAAU,CAAC,mBAAmB,CAAC,iBAAiB,CAAC;YACjE,cAAc,EAAE,mBAAmB,CAAC,eAAe;YAEnD,SAAS,EAAE,KAAK;YAChB,OAAO,EAAE,WAAW;YAEpB,MAAM,EAAE,mBAAmB,CAAC,MAAM;YAClC,eAAe,EAAE,mBAAmB,CAAC,eAAe;YACpD,eAAe,EAAE,mBAAmB,CAAC,eAAe;gBAClD,CAAC,CAAC,CAAC,GAAG,mBAAmB,CAAC,eAAe,CAAC;gBAC1C,CAAC,CAAC,SAAS;YACb,WAAW,EAAE,mBAAmB,CAAC,WAAW;YAC5C,UAAU,EAAE,mBAAmB,CAAC,UAAU;YAE1C,eAAe,EAAE,mBAAmB,CAAC,eAAe;YAEpD,EAAE,EAAE,OAAO,CAAC,KAAK;YACjB,CAAC,EAAE,EAAE;SACN,CAAC;QAEF,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE;YAC1C,8EAA8E;YAC9E,QAAQ,CAAC,SAAS,GAAG,UAAU,CAAC,yBAAyB,CACvD,YAAY,EACZ,iBAAiB,EACjB,SAAS,EACT,UAAU,EACV,uBAAuB,CACxB,CAAC;SACH;aAAM;YACL,YAAY,CAAC,WAAW,CACtB,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAC7F,CAAC;SACH;QAED,IAAI,mBAAmB,CAAC,gBAAgB,IAAI,mBAAmB,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3F,gDAAgD;YAChD,QAAQ,CAAC,gBAAgB,GAAG,IAAI,CAAC;YACjC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;SACxD;QAED,sDAAsD;QACtD,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAE7C,MAAM;QACJ,+GAA+G;QAC/G,+EAA+E;QAC/E,6DAA6D;QAC7D,YAAY,EACZ,OAAO,EAAE,WAAW,EACrB,GAAG,MAAM,aAAM,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;QAE1C,IAAI,WAAW,CAAC,cAAc,GAAG,CAAC,EAAE;YAClC,YAAY,CAAC,SAAS,CACpB,IAAI,KAAK,CACP,GAAG,WAAW,CAAC,cAAc,aAAa,WAAW,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,SAAS,CAC7F,CACF,CAAC;SACH;aAAM,IAAI,WAAW,CAAC,mBAAmB,GAAG,CAAC,EAAE;YAC9C,YAAY,CAAC,SAAS,CACpB,IAAI,KAAK,CACP,GAAG,WAAW,CAAC,mBAAmB,mBAChC,WAAW,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAC9C,SAAS,CACV,CACF,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,2BAA2B,CACvC,WAAmB,EACnB,uBAA+B;QAE/B,uCAAuC;QACvC,MAAM,UAAU,GAAW,GAAG,SAAS,+BAA+B,CAAC;QAEvE,0GAA0G;QAC1G,MAAM,4BAA4B,GAIzB,CAAmC,aAAgB,EAAE,YAAe,EAAK,EAAE;YAClF,yGAAyG;YACzG,qGAAqG;YACrG,yGAAyG;YACzG,yGAAyG;YACzG,gDAAgD;YAChD,IAAI;YACJ,wBAAwB;YACxB,iCAAiC;YACjC,IAAI;YACJ,4HAA4H;YAC5H,qDAAY,CAAC,aAAa,IAAI,EAAE,CAAC,GAAK,CAAC,YAAY,IAAI,EAAE,CAAC,GAAK,CAAC,aAAa,IAAI,EAAE,CAAC,EAAG;QACzF,CAAC,CAAC;QACF,MAAM,yBAAyB,GAItB,CAAmC,aAAgB,EAAE,YAAe,EAAK,EAAE;YAClF,8DAA8D;YAC9D,OAAO,kBAAS,CAAC,YAAY,IAAI,EAAE,EAAE,aAAa,IAAI,EAAE,EAAE,CAAC,KAAU,EAAE,MAAW,EAAE,EAAE;gBACpF,IAAI,CAAC,iBAAQ,CAAC,MAAM,CAAC,EAAE;oBACrB,OAAO,MAAM,CAAC;iBACf;gBACD,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,iCAAM,KAAK,GAAK,MAAM,CAAE,CAAC;YAChF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,MAAM,oBAAoB,GAAsB,UAAU,CAAC,oBAAoB,CAAC;YAC9E,OAAO,EAAE,WAAW;SACrB,CAAC,CAAC;QACH,MAAM,mBAAmB,GAAsB,UAAU,CAAC,oBAAoB,CAAC;YAC7E,OAAO,EAAE,WAAW;YACpB,eAAe,EAAE,IAAI;SACtB,CAAC,CAAC;QACH,MAAM,+BAA+B,GAAsB,UAAU,CAAC,oBAAoB,CAAC;YACzF,OAAO,EAAE,WAAW;YACpB,eAAe,EAAE,IAAI;YACrB,2GAA2G;YAC3G,yHAAyH;YACzH,YAAY,EAAE,aAAa;YAC3B,mBAAmB,EAAE,IAAI;SAC1B,CAAC,CAAC;QAEH,OAAO,IAAI,oCAAiB,CAAyB;YACnD,uBAAuB,EAAE,uBAAuB;YAChD,cAAc,EAAE,UAAU;YAC1B,mBAAmB,EAAE;gBACnB,gBAAgB,EAAE;oBAChB,eAAe,EAAE,kCAAe,CAAC,MAAM;oBACvC,mBAAmB,EAAE,4BAA4B;iBAClD;gBACD,SAAS,EAAE;oBACT,eAAe,EAAE,kCAAe,CAAC,MAAM;oBACvC,mBAAmB,EAAE,4BAA4B;iBAClD;gBACD,OAAO,EAAE;oBACP,eAAe,EAAE,kCAAe,CAAC,MAAM;oBACvC,mBAAmB,EAAE,yBAAyB;iBAC/C;aACF;YACD,gBAAgB,EAAE;gBAChB,SAAS;gBACT,kBAAkB,EAAE,oBAAoB;gBACxC,qBAAqB,EAAE,oBAAoB;gBAC3C,uBAAuB,EAAE,mBAAmB;gBAC5C,UAAU,EAAE,mBAAmB;gBAC/B,eAAe,EAAE,mBAAmB;gBACpC,kBAAkB,EAAE,mBAAmB;gBACvC,gBAAgB,EAAE,mBAAmB;gBACrC,gBAAgB,EAAE,mBAAmB;gBACrC,YAAY,EAAE,mBAAmB;gBACjC,UAAU,EAAE,UAAU,CAAC,oBAAoB,CAAC;oBAC1C,OAAO,EAAE,WAAW;oBACpB,eAAe,EAAE,IAAI;oBACrB,6GAA6G;oBAC7G,yHAAyH;oBACzH,YAAY,EAAE,cAAc;oBAC5B,mBAAmB,EAAE,IAAI;iBAC1B,CAAC;gBACF,oBAAoB,EAAE,mBAAmB;gBACzC,iGAAiG;gBACjG,mBAAmB,EAAE,UAAU,CAAC,oBAAoB,CAAC;oBACnD,OAAO,EAAE,WAAW;oBACpB,eAAe,EAAE,IAAI;oBACrB,uHAAuH;oBACvH,yHAAyH;oBACzH,YAAY,EAAE,mBAAmB;oBACjC,mBAAmB,EAAE,IAAI;iBAC1B,CAAC;gBACF,wBAAwB,EAAE,mBAAmB;gBAC7C,cAAc,EAAE,mBAAmB;gBACnC,iBAAiB,EAAE,UAAU,CAAC,oBAAoB,CAAC;oBACjD,OAAO,EAAE,WAAW;oBACpB,eAAe,EAAE,IAAI;oBACrB,mHAAmH;oBACnH,yHAAyH;oBACzH,YAAY,EAAE,iBAAiB;oBAC/B,mBAAmB,EAAE,IAAI;iBAC1B,CAAC;gBACF,WAAW;gBACX,iBAAiB,EAAE,oBAAoB;gBACvC,WAAW,EAAE,oBAAoB;gBACjC,gBAAgB,EAAE,mBAAmB;gBACrC,wBAAwB,EAAE,mBAAmB;gBAC7C,yBAAyB,EAAE,mBAAmB;gBAC9C,qDAAqD;gBACrD,+BAA+B,EAAE,oBAAoB;gBACrD,wBAAwB,EAAE,oBAAoB;gBAC9C,0CAA0C;gBAC1C,2CAA2C,EAAE,mBAAmB;gBAChE,qDAAqD,EAAE,mBAAmB;gBAC1E,mDAAmD;gBACnD,wBAAwB,EAAE,mBAAmB;gBAC7C,kCAAkC,EAAE,mBAAmB;gBACvD,6CAA6C;gBAC7C,2BAA2B,EAAE,+BAA+B;gBAC5D,qCAAqC,EAAE,+BAA+B,CAAC,mCAAmC;aAC3G;SACF,CAAC,CAAC;IACL,CAAC;IAEO,MAAM,CAAC,yBAAyB,CACtC,YAA0B,EAC1B,iBAAoC,EACpC,SAAkB,EAClB,MAA8B,EAC9B,uBAA+B;QAE/B,IAAI,mBAAmB,GAAY,KAAK,CAAC;QAEzC,MAAM,eAAe,GAA6B;YAChD,iBAAiB;YACjB,SAAS;SACV,CAAC;QACF,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;YACnC,gFAAgF;YAChF,MAAM,mBAAmB,GAAa,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YAE3F,oDAAoD;YACpD,6CAA6C;YAC7C,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClC,MAAM,YAAY,GAA0B,UAAU,CAAC,0BAA0B,CAAC,eAAe,CAAC,CAAC;gBACnG,KAAK,MAAM,KAAK,IAAI,mBAAmB,EAAE;oBACvC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;iBACxC;gBACD,mBAAmB,GAAG,IAAI,CAAC;aAC5B;SACF;aAAM,IAAI,OAAO,MAAM,CAAC,SAAS,KAAK,WAAW,IAAI,MAAM,CAAC,SAAS,KAAK,IAAI,EAAE;YAC/E,yEAAyE;YACzE,MAAM,CAAC,SAAS,GAAG,CAAC,UAAU,CAAC,0BAA0B,CAAC,eAAe,CAAC,CAAC,CAAC;YAC5E,mBAAmB,GAAG,IAAI,CAAC;SAC5B;aAAM;YACL,4EAA4E;YAC5E,iGAAiG;YACjG,gHAAgH;YAChH,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CACpC,yCAAyC,uBAAuB,oCAAoC;gBAClG,iCAAiC,CACpC,CAAC;SACH;QAED,IAAI,CAAC,mBAAmB,EAAE;YACxB,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CACpC,sDAAsD,uBAAuB,uBAAuB;gBAClG,yCAAyC,CAC5C,CAAC;SACH;QAED,iHAAiH;QACjH,MAAM,SAAS,GAAyB,MAAM,CAAC,SAAS,CAAC;QACzD,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;QAC7B,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,0BAA0B,CACvC,eAAyC;QAEzC,OAAO;YACL,GAAG,SAAS,sBAAsB;YAClC,eAAkE;SACnE,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACK,MAAM,CAAC,oBAAoB,CAAC,OAA+B;QACjE,OAAO;YACL,cAAc,EAAE,CAAC,qBAA6B,EAAE,YAAoB,EAAE,aAAqB,EAAE,EAAE;;gBAC7F,MAAM,SAAS,GAAW,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;gBAE9D,iDAAiD;gBACjD,uHAAuH;gBACvH,IAAI,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;oBAC3C,sCAAsC;oBACtC,MAAM,UAAU,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC7F,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;iBAC3D;qBAAM,IAAI,aAAa,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;oBACpD,wCAAwC;oBACxC,MAAM,UAAU,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC/F,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;iBACrD;qBAAM;oBACL,qDAAqD;oBACrD,MAAM,iBAAiB,GAA2B,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBACvF,IAAI,iBAAiB,KAAK,IAAI,EAAE;wBAC9B,MAAM,WAAW,SAAuB,iBAAiB,CAAC,MAAM,0CAAG,oBAAoB,CAAC,CAAC;wBACzF,IAAI,CAAC,WAAW,EAAE;4BAChB,MAAM,IAAI,KAAK,CACb,uDAAuD;gCACrD,CAAC,YAAY,CAAC,CAAC,CAAC,gBAAgB,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;gCACtD,OAAO,SAAS,IAAI,CACvB,CAAC;yBACH;wBAED,IAAI,CAAC,+BAAW,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE;4BACzC,MAAM,IAAI,KAAK,CACb,mEAAmE;gCACjE,CAAC,YAAY,CAAC,CAAC,CAAC,gBAAgB,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;gCACtD,OAAO,SAAS,oCAAoC,CACvD,CAAC;yBACH;wBAED,qGAAqG;wBACrG,+FAA+F;wBAC/F,qGAAqG;wBACrG,QAAQ;wBACR,MAAM,mBAAmB,GACvB,WAAW,KAAK,mBAAmB;4BACjC,CAAC,CAAC,qBAAqB;4BACvB,CAAC,CAAC,0BAAM,CAAC,cAAc,CAAC;gCACpB,cAAc,EAAE,SAAS;gCACzB,WAAW;6BACZ,CAAC,CAAC;wBACT,kCAAkC;wBAClC,MAAM,UAAU,GAAW,IAAI,CAAC,SAAS,CACvC,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CACzD,CAAC;wBACF,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;qBAC/D;iBACF;gBAED,qFAAqF;gBACrF,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;oBAC5B,OAAO,aAAa,CAAC;iBACtB;gBAED,wCAAwC;gBACxC,IAAI,aAAa,KAAK,mBAAmB,EAAE;oBACzC,OAAO,qBAAqB,CAAC;iBAC9B;gBAED,wDAAwD;gBACxD,IAAI,aAAa,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE;oBACjD,MAAM,UAAU,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;oBACnG,OAAO,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;iBACrD;gBAED,OAAO,OAAO,CAAC,YAAY;oBACzB,CAAC,CAAC,yBAAqB,CAAC,aAAa,CAAC,SAAS,EAAE;wBAC7C,OAAO,EAAE,SAAS;wBAClB,QAAQ,EAAE,aAAa;wBACvB,MAAM,EAAE,OAAO,CAAC,YAAY;wBAC5B,eAAe,EAAE,YAAY;wBAC7B,UAAU,EAAE,YAAY;qBACzB,CAAC;oBACJ,CAAC,CAAC,eAAW,CAAC,aAAa,CAAC,SAAS,EAAE;wBACnC,OAAO,EAAE,SAAS;wBAClB,QAAQ,EAAE,aAAa;wBACvB,GAAG,EAAE,YAAY;qBAClB,CAAC,CAAC;YACT,CAAC;YACD,oBAAoB,EAAE,uCAAoB,CAAC,MAAM;SAClD,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,YAAY,CAAC,KAA2B,EAAE,MAAc;QACrE,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,KAAK,IAAI,KAAK,GAAW,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACzD,MAAM,IAAI,GAAuB,KAAK,CAAC,KAAK,CAAC,CAAC;YAE9C,iFAAiF;YACjF,IAAI,IAAI,KAAK,MAAM,EAAE;gBACnB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACpB;iBAAM,IAAI,OAAO,IAAI,KAAK,WAAW,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;gBAC7E,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACpB;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,6BAA6B,CAC1C,iBAAoC,EACpC,KAAyB;QAEzB,gGAAgG;QAChG,gGAAgG;QAChG,oFAAoF;QACpF,MAAM,WAAW,GAAW,UAAU,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;QAC9E,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,mBAAmB,CAAC,iBAAoC;QACrE,OAAO,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;IACrE,CAAC;IAEM,KAAK,CACV,WAAwB,EACxB,iBAAoC,EACpC,OAA4B;QAE5B,MAAM,YAAY,GAAiB,WAAW,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAE3E,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,KAAyB,EAAE,EAAE;YACrE,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,SAA6B,EAAE,EAAE;gBACvE,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,UAAU,CAAC,eAAe,CAC9B,YAAY,EACZ,iBAAiB,EACjB,WAAW,CAAC,SAAS,EACrB,KAAK,CAAC,UAAU,EAChB,OAAO,CACR,CAAC;gBACJ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,IAAuB,EAAE,EAAE;YAClE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;gBAChD,MAAM,UAAU,CAAC,aAAa,CAC5B,YAAY,EACZ,iBAAiB,EACjB,WAAW,CAAC,SAAS,EACrB,IAAI,CAAC,UAAU,EACf,OAAO,CACR,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,KAAyB,EAAE,EAAE;YACrE,UAAU,CAAC,6BAA6B,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA5gBD,gCA4gBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n// Load the Jest patch\r\nimport './jestWorkerPatch';\r\n\r\nimport * as path from 'path';\r\nimport { resolve as jestResolve, resolveWithPrefix as jestResolveWithPrefix } from 'jest-config/build/utils';\r\nimport { mergeWith, isObject } from 'lodash';\r\nimport type {\r\n  ICleanStageContext,\r\n  IBuildStageContext,\r\n  IBuildStageProperties,\r\n  IPostBuildSubstage,\r\n  ITestStageContext,\r\n  ITestStageProperties,\r\n  IHeftPlugin,\r\n  HeftConfiguration,\r\n  HeftSession,\r\n  ScopedLogger\r\n} from '@rushstack/heft';\r\nimport { getVersion, runCLI } from '@jest/core';\r\nimport { Config } from '@jest/types';\r\nimport {\r\n  ConfigurationFile,\r\n  IJsonPathMetadata,\r\n  InheritanceType,\r\n  PathResolutionMethod\r\n} from '@rushstack/heft-config-file';\r\nimport {\r\n  FileSystem,\r\n  Import,\r\n  JsonFile,\r\n  JsonSchema,\r\n  PackageName,\r\n  Terminal\r\n} from '@rushstack/node-core-library';\r\n\r\nimport { IHeftJestReporterOptions } from './HeftJestReporter';\r\nimport { HeftJestDataFile } from './HeftJestDataFile';\r\n\r\ntype JestReporterConfig = string | Config.ReporterConfig;\r\n\r\n/**\r\n * Options to use when performing resolution for paths and modules specified in the Jest\r\n * configuration.\r\n */\r\ninterface IJestResolutionOptions {\r\n  /**\r\n   * The value that will be substituted for <rootDir> tokens.\r\n   */\r\n  rootDir: string;\r\n  /**\r\n   * Whether the value should be resolved as a module relative to the configuration file after\r\n   * substituting special tokens.\r\n   */\r\n  resolveAsModule?: boolean;\r\n  /**\r\n   * The prefix that should initially be used when attempting to resolve the value. Only used if\r\n   * `IJestResolutionOptions.resolveAsModule` is true.\r\n   */\r\n  modulePrefix?: string;\r\n  /**\r\n   * Whether resolution should silently fail in the case of failed module resolution. Only used if\r\n   * `IJestResolutionOptions.resolveAsModule` is true.\r\n   */\r\n  ignoreMissingModule?: boolean;\r\n}\r\n\r\nexport interface IJestPluginOptions {\r\n  disableConfigurationModuleResolution?: boolean;\r\n  configurationPath?: string;\r\n}\r\n\r\nexport interface IHeftJestConfiguration extends Config.InitialOptions {}\r\n\r\nconst PLUGIN_NAME: string = 'JestPlugin';\r\nconst PLUGIN_PACKAGE_NAME: string = '@rushstack/heft-jest-plugin';\r\nconst PLUGIN_PACKAGE_FOLDER: string = path.resolve(__dirname, '..');\r\nconst PLUGIN_SCHEMA_PATH: string = path.resolve(__dirname, 'schemas', 'heft-jest-plugin.schema.json');\r\nconst JEST_CONFIGURATION_LOCATION: string = `config/jest.config.json`;\r\n\r\nconst ROOTDIR_TOKEN: string = '<rootDir>';\r\nconst CONFIGDIR_TOKEN: string = '<configDir>';\r\nconst PACKAGE_CAPTUREGROUP: string = 'package';\r\nconst PACKAGEDIR_REGEX: RegExp = new RegExp(/^<packageDir:\\s*(?<package>[^\\s>]+)\\s*>/);\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class JestPlugin implements IHeftPlugin<IJestPluginOptions> {\r\n  public readonly pluginName: string = PLUGIN_NAME;\r\n  public readonly optionsSchema: JsonSchema = JsonSchema.fromFile(PLUGIN_SCHEMA_PATH);\r\n\r\n  /**\r\n   * Runs required setup before running Jest through the JestPlugin.\r\n   */\r\n  public static async _setupJestAsync(\r\n    scopedLogger: ScopedLogger,\r\n    heftConfiguration: HeftConfiguration,\r\n    debugMode: boolean,\r\n    buildStageProperties: IBuildStageProperties,\r\n    options?: IJestPluginOptions\r\n  ): Promise<void> {\r\n    // Write the data file used by jest-build-transform\r\n    await HeftJestDataFile.saveForProjectAsync(heftConfiguration.buildFolder, {\r\n      emitFolderNameForTests: buildStageProperties.emitFolderNameForTests || 'lib',\r\n      extensionForTests: buildStageProperties.emitExtensionForTests || '.js',\r\n      skipTimestampCheck: !buildStageProperties.watchMode,\r\n      // If the property isn't defined, assume it's a not a TypeScript project since this\r\n      // value should be set by the Heft TypeScriptPlugin during the compile hook\r\n      isTypeScriptProject: !!buildStageProperties.isTypeScriptProject\r\n    });\r\n    scopedLogger.terminal.writeVerboseLine('Wrote heft-jest-data.json file');\r\n  }\r\n\r\n  /**\r\n   * Runs Jest using the provided options.\r\n   */\r\n  public static async _runJestAsync(\r\n    scopedLogger: ScopedLogger,\r\n    heftConfiguration: HeftConfiguration,\r\n    debugMode: boolean,\r\n    testStageProperties: ITestStageProperties,\r\n    options?: IJestPluginOptions\r\n  ): Promise<void> {\r\n    const terminal: Terminal = scopedLogger.terminal;\r\n    terminal.writeLine(`Using Jest version ${getVersion()}`);\r\n\r\n    const buildFolder: string = heftConfiguration.buildFolder;\r\n    const projectRelativeFilePath: string = options?.configurationPath ?? JEST_CONFIGURATION_LOCATION;\r\n    await HeftJestDataFile.loadAndValidateForProjectAsync(buildFolder);\r\n\r\n    let jestConfig: IHeftJestConfiguration;\r\n    if (options?.disableConfigurationModuleResolution) {\r\n      // Module resolution explicitly disabled, use the config as-is\r\n      const jestConfigPath: string = path.join(buildFolder, projectRelativeFilePath);\r\n      if (!(await FileSystem.existsAsync(jestConfigPath))) {\r\n        scopedLogger.emitError(new Error(`Expected to find jest config file at \"${jestConfigPath}\".`));\r\n        return;\r\n      }\r\n      jestConfig = await JsonFile.loadAsync(jestConfigPath);\r\n    } else {\r\n      // Load in and resolve the config file using the \"extends\" field\r\n      jestConfig = await JestPlugin._getJestConfigurationLoader(\r\n        buildFolder,\r\n        projectRelativeFilePath\r\n      ).loadConfigurationFileForProjectAsync(\r\n        terminal,\r\n        heftConfiguration.buildFolder,\r\n        heftConfiguration.rigConfig\r\n      );\r\n      if (jestConfig.preset) {\r\n        throw new Error(\r\n          'The provided jest.config.json specifies a \"preset\" property while using resolved modules. ' +\r\n            'You must either remove all \"preset\" values from your Jest configuration, use the \"extends\" ' +\r\n            'property, or set the \"disableConfigurationModuleResolution\" option to \"true\" on the Jest ' +\r\n            'plugin in heft.json'\r\n        );\r\n      }\r\n    }\r\n\r\n    const jestArgv: Config.Argv = {\r\n      watch: testStageProperties.watchMode,\r\n\r\n      // In debug mode, avoid forking separate processes that are difficult to debug\r\n      runInBand: debugMode,\r\n      debug: debugMode,\r\n      detectOpenHandles: !!testStageProperties.detectOpenHandles,\r\n\r\n      cacheDirectory: JestPlugin._getJestCacheFolder(heftConfiguration),\r\n      updateSnapshot: testStageProperties.updateSnapshots,\r\n\r\n      listTests: false,\r\n      rootDir: buildFolder,\r\n\r\n      silent: testStageProperties.silent,\r\n      testNamePattern: testStageProperties.testNamePattern,\r\n      testPathPattern: testStageProperties.testPathPattern\r\n        ? [...testStageProperties.testPathPattern]\r\n        : undefined,\r\n      testTimeout: testStageProperties.testTimeout,\r\n      maxWorkers: testStageProperties.maxWorkers,\r\n\r\n      passWithNoTests: testStageProperties.passWithNoTests,\r\n\r\n      $0: process.argv0,\r\n      _: []\r\n    };\r\n\r\n    if (!testStageProperties.debugHeftReporter) {\r\n      // Extract the reporters and transform to include the Heft reporter by default\r\n      jestArgv.reporters = JestPlugin._extractHeftJestReporters(\r\n        scopedLogger,\r\n        heftConfiguration,\r\n        debugMode,\r\n        jestConfig,\r\n        projectRelativeFilePath\r\n      );\r\n    } else {\r\n      scopedLogger.emitWarning(\r\n        new Error('The \"--debug-heft-reporter\" parameter was specified; disabling HeftJestReporter')\r\n      );\r\n    }\r\n\r\n    if (testStageProperties.findRelatedTests && testStageProperties.findRelatedTests.length > 0) {\r\n      // Pass test names as the command line remainder\r\n      jestArgv.findRelatedTests = true;\r\n      jestArgv._ = [...testStageProperties.findRelatedTests];\r\n    }\r\n\r\n    // Stringify the config and pass it into Jest directly\r\n    jestArgv.config = JSON.stringify(jestConfig);\r\n\r\n    const {\r\n      // Config.Argv is weakly typed.  After updating the jestArgv object, it's a good idea to inspect \"globalConfig\"\r\n      // in the debugger to validate that your changes are being applied as expected.\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      globalConfig,\r\n      results: jestResults\r\n    } = await runCLI(jestArgv, [buildFolder]);\r\n\r\n    if (jestResults.numFailedTests > 0) {\r\n      scopedLogger.emitError(\r\n        new Error(\r\n          `${jestResults.numFailedTests} Jest test${jestResults.numFailedTests > 1 ? 's' : ''} failed`\r\n        )\r\n      );\r\n    } else if (jestResults.numFailedTestSuites > 0) {\r\n      scopedLogger.emitError(\r\n        new Error(\r\n          `${jestResults.numFailedTestSuites} Jest test suite${\r\n            jestResults.numFailedTestSuites > 1 ? 's' : ''\r\n          } failed`\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the loader for the `config/api-extractor-task.json` config file.\r\n   */\r\n  public static _getJestConfigurationLoader(\r\n    buildFolder: string,\r\n    projectRelativeFilePath: string\r\n  ): ConfigurationFile<IHeftJestConfiguration> {\r\n    // Bypass Jest configuration validation\r\n    const schemaPath: string = `${__dirname}/schemas/anything.schema.json`;\r\n\r\n    // By default, ConfigurationFile will replace all objects, so we need to provide merge functions for these\r\n    const shallowObjectInheritanceFunc: <T>(\r\n      currentObject: T,\r\n      parentObject: T\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ) => T = <T extends { [key: string]: any }>(currentObject: T, parentObject: T): T => {\r\n      // Merged in this order to ensure that the currentObject properties take priority in order-of-definition,\r\n      // since Jest executes them in this order. For example, if the extended Jest configuration contains a\r\n      // \"\\\\.(css|sass|scss)$\" transform but the extending Jest configuration contains a \"\\\\.(css)$\" transform,\r\n      // merging like this will ensure that the returned transforms are executed in the correct order, stopping\r\n      // after hitting the first pattern that applies:\r\n      // {\r\n      //   \"\\\\.(css)$\": \"...\",\r\n      //   \"\\\\.(css|sass|scss)$\": \"...\"\r\n      // }\r\n      // https://github.com/facebook/jest/blob/0a902e10e0a5550b114340b87bd31764a7638729/packages/jest-config/src/normalize.ts#L102\r\n      return { ...(currentObject || {}), ...(parentObject || {}), ...(currentObject || {}) };\r\n    };\r\n    const deepObjectInheritanceFunc: <T>(\r\n      currentObject: T,\r\n      parentObject: T\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ) => T = <T extends { [key: string]: any }>(currentObject: T, parentObject: T): T => {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return mergeWith(parentObject || {}, currentObject || {}, (value: any, source: any) => {\r\n        if (!isObject(source)) {\r\n          return source;\r\n        }\r\n        return Array.isArray(value) ? [...value, ...source] : { ...value, ...source };\r\n      });\r\n    };\r\n\r\n    const tokenResolveMetadata: IJsonPathMetadata = JestPlugin._getJsonPathMetadata({\r\n      rootDir: buildFolder\r\n    });\r\n    const jestResolveMetadata: IJsonPathMetadata = JestPlugin._getJsonPathMetadata({\r\n      rootDir: buildFolder,\r\n      resolveAsModule: true\r\n    });\r\n    const watchPluginsJestResolveMetadata: IJsonPathMetadata = JestPlugin._getJsonPathMetadata({\r\n      rootDir: buildFolder,\r\n      resolveAsModule: true,\r\n      // Calls Jest's 'resolveWithPrefix()' using the 'jest-watch-' prefix to match 'jest-watch-<value>' packages\r\n      // https://github.com/facebook/jest/blob/d6fb0d8fb0d43a17f90c7a5a6590257df2f2f6f5/packages/jest-resolve/src/utils.ts#L140\r\n      modulePrefix: 'jest-watch-',\r\n      ignoreMissingModule: true\r\n    });\r\n\r\n    return new ConfigurationFile<IHeftJestConfiguration>({\r\n      projectRelativeFilePath: projectRelativeFilePath,\r\n      jsonSchemaPath: schemaPath,\r\n      propertyInheritance: {\r\n        moduleNameMapper: {\r\n          inheritanceType: InheritanceType.custom,\r\n          inheritanceFunction: shallowObjectInheritanceFunc\r\n        },\r\n        transform: {\r\n          inheritanceType: InheritanceType.custom,\r\n          inheritanceFunction: shallowObjectInheritanceFunc\r\n        },\r\n        globals: {\r\n          inheritanceType: InheritanceType.custom,\r\n          inheritanceFunction: deepObjectInheritanceFunc\r\n        }\r\n      },\r\n      jsonPathMetadata: {\r\n        // string\r\n        '$.cacheDirectory': tokenResolveMetadata,\r\n        '$.coverageDirectory': tokenResolveMetadata,\r\n        '$.dependencyExtractor': jestResolveMetadata,\r\n        '$.filter': jestResolveMetadata,\r\n        '$.globalSetup': jestResolveMetadata,\r\n        '$.globalTeardown': jestResolveMetadata,\r\n        '$.moduleLoader': jestResolveMetadata,\r\n        '$.prettierPath': jestResolveMetadata,\r\n        '$.resolver': jestResolveMetadata,\r\n        '$.runner': JestPlugin._getJsonPathMetadata({\r\n          rootDir: buildFolder,\r\n          resolveAsModule: true,\r\n          // Calls Jest's 'resolveWithPrefix()' using the 'jest-runner-' prefix to match 'jest-runner-<value>' packages\r\n          // https://github.com/facebook/jest/blob/d6fb0d8fb0d43a17f90c7a5a6590257df2f2f6f5/packages/jest-resolve/src/utils.ts#L170\r\n          modulePrefix: 'jest-runner-',\r\n          ignoreMissingModule: true\r\n        }),\r\n        '$.snapshotResolver': jestResolveMetadata,\r\n        // This is a name like \"jsdom\" that gets mapped into a package name like \"jest-environment-jsdom\"\r\n        '$.testEnvironment': JestPlugin._getJsonPathMetadata({\r\n          rootDir: buildFolder,\r\n          resolveAsModule: true,\r\n          // Calls Jest's 'resolveWithPrefix()' using the 'jest-environment-' prefix to match 'jest-environment-<value>' packages\r\n          // https://github.com/facebook/jest/blob/d6fb0d8fb0d43a17f90c7a5a6590257df2f2f6f5/packages/jest-resolve/src/utils.ts#L110\r\n          modulePrefix: 'jest-environment-',\r\n          ignoreMissingModule: true\r\n        }),\r\n        '$.testResultsProcessor': jestResolveMetadata,\r\n        '$.testRunner': jestResolveMetadata,\r\n        '$.testSequencer': JestPlugin._getJsonPathMetadata({\r\n          rootDir: buildFolder,\r\n          resolveAsModule: true,\r\n          // Calls Jest's 'resolveWithPrefix()' using the 'jest-sequencer-' prefix to match 'jest-sequencer-<value>' packages\r\n          // https://github.com/facebook/jest/blob/d6fb0d8fb0d43a17f90c7a5a6590257df2f2f6f5/packages/jest-resolve/src/utils.ts#L192\r\n          modulePrefix: 'jest-sequencer-',\r\n          ignoreMissingModule: true\r\n        }),\r\n        // string[]\r\n        '$.modulePaths.*': tokenResolveMetadata,\r\n        '$.roots.*': tokenResolveMetadata,\r\n        '$.setupFiles.*': jestResolveMetadata,\r\n        '$.setupFilesAfterEnv.*': jestResolveMetadata,\r\n        '$.snapshotSerializers.*': jestResolveMetadata,\r\n        // moduleNameMapper: { [regex]: path | [ ...paths ] }\r\n        '$.moduleNameMapper.*@string()': tokenResolveMetadata, // string path\r\n        '$.moduleNameMapper.*.*': tokenResolveMetadata, // array of paths\r\n        // reporters: (path | [ path, options ])[]\r\n        '$.reporters[?(@ !== \"default\")]*@string()': jestResolveMetadata, // string path, excluding \"default\"\r\n        '$.reporters.*[?(@property == 0 && @ !== \"default\")]': jestResolveMetadata, // First entry in [ path, options ], excluding \"default\"\r\n        // transform: { [regex]: path | [ path, options ] }\r\n        '$.transform.*@string()': jestResolveMetadata, // string path\r\n        '$.transform.*[?(@property == 0)]': jestResolveMetadata, // First entry in [ path, options ]\r\n        // watchPlugins: (path | [ path, options ])[]\r\n        '$.watchPlugins.*@string()': watchPluginsJestResolveMetadata, // string path\r\n        '$.watchPlugins.*[?(@property == 0)]': watchPluginsJestResolveMetadata // First entry in [ path, options ]\r\n      }\r\n    });\r\n  }\r\n\r\n  private static _extractHeftJestReporters(\r\n    scopedLogger: ScopedLogger,\r\n    heftConfiguration: HeftConfiguration,\r\n    debugMode: boolean,\r\n    config: IHeftJestConfiguration,\r\n    projectRelativeFilePath: string\r\n  ): JestReporterConfig[] {\r\n    let isUsingHeftReporter: boolean = false;\r\n\r\n    const reporterOptions: IHeftJestReporterOptions = {\r\n      heftConfiguration,\r\n      debugMode\r\n    };\r\n    if (Array.isArray(config.reporters)) {\r\n      // Harvest all the array indices that need to modified before altering the array\r\n      const heftReporterIndices: number[] = JestPlugin._findIndexes(config.reporters, 'default');\r\n\r\n      // Replace 'default' reporter with the heft reporter\r\n      // This may clobber default reporters options\r\n      if (heftReporterIndices.length > 0) {\r\n        const heftReporter: Config.ReporterConfig = JestPlugin._getHeftJestReporterConfig(reporterOptions);\r\n        for (const index of heftReporterIndices) {\r\n          config.reporters[index] = heftReporter;\r\n        }\r\n        isUsingHeftReporter = true;\r\n      }\r\n    } else if (typeof config.reporters === 'undefined' || config.reporters === null) {\r\n      // Otherwise if no reporters are specified install only the heft reporter\r\n      config.reporters = [JestPlugin._getHeftJestReporterConfig(reporterOptions)];\r\n      isUsingHeftReporter = true;\r\n    } else {\r\n      // Making a note if Heft cannot understand the reporter entry in Jest config\r\n      // Not making this an error or warning because it does not warrant blocking a dev or CI test pass\r\n      // If the Jest config is truly wrong Jest itself is in a better position to report what is wrong with the config\r\n      scopedLogger.terminal.writeVerboseLine(\r\n        `The 'reporters' entry in Jest config '${projectRelativeFilePath}' is in an unexpected format. Was ` +\r\n          'expecting an array of reporters'\r\n      );\r\n    }\r\n\r\n    if (!isUsingHeftReporter) {\r\n      scopedLogger.terminal.writeVerboseLine(\r\n        `HeftJestReporter was not specified in Jest config '${projectRelativeFilePath}'. Consider adding a ` +\r\n          \"'default' entry in the reporters array.\"\r\n      );\r\n    }\r\n\r\n    // Since we're injecting the HeftConfiguration, we need to pass these args directly and not through serialization\r\n    const reporters: JestReporterConfig[] = config.reporters;\r\n    config.reporters = undefined;\r\n    return reporters;\r\n  }\r\n\r\n  /**\r\n   * Returns the reporter config using the HeftJestReporter and the provided options.\r\n   */\r\n  private static _getHeftJestReporterConfig(\r\n    reporterOptions: IHeftJestReporterOptions\r\n  ): Config.ReporterConfig {\r\n    return [\r\n      `${__dirname}/HeftJestReporter.js`,\r\n      reporterOptions as Record<keyof IHeftJestReporterOptions, unknown>\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Resolve all specified properties to an absolute path using Jest resolution. In addition, the following\r\n   * transforms will be applied to the provided propertyValue before resolution:\r\n   *   - replace <rootDir> with the same rootDir\r\n   *   - replace <configDir> with the directory containing the current configuration file\r\n   *   - replace <packageDir:...> with the path to the resolved package (NOT module)\r\n   */\r\n  private static _getJsonPathMetadata(options: IJestResolutionOptions): IJsonPathMetadata {\r\n    return {\r\n      customResolver: (configurationFilePath: string, propertyName: string, propertyValue: string) => {\r\n        const configDir: string = path.dirname(configurationFilePath);\r\n\r\n        // Compare with replaceRootDirInPath() from here:\r\n        // https://github.com/facebook/jest/blob/5f4dd187d89070d07617444186684c20d9213031/packages/jest-config/src/utils.ts#L58\r\n        if (propertyValue.startsWith(ROOTDIR_TOKEN)) {\r\n          // Example:  <rootDir>/path/to/file.js\r\n          const restOfPath: string = path.normalize('./' + propertyValue.substr(ROOTDIR_TOKEN.length));\r\n          propertyValue = path.resolve(options.rootDir, restOfPath);\r\n        } else if (propertyValue.startsWith(CONFIGDIR_TOKEN)) {\r\n          // Example:  <configDir>/path/to/file.js\r\n          const restOfPath: string = path.normalize('./' + propertyValue.substr(CONFIGDIR_TOKEN.length));\r\n          propertyValue = path.resolve(configDir, restOfPath);\r\n        } else {\r\n          // Example:  <packageDir:@my/package>/path/to/file.js\r\n          const packageDirMatches: RegExpExecArray | null = PACKAGEDIR_REGEX.exec(propertyValue);\r\n          if (packageDirMatches !== null) {\r\n            const packageName: string | undefined = packageDirMatches.groups?.[PACKAGE_CAPTUREGROUP];\r\n            if (!packageName) {\r\n              throw new Error(\r\n                `Could not parse package name from \"packageDir\" token ` +\r\n                  (propertyName ? `of property \"${propertyName}\" ` : '') +\r\n                  `in \"${configDir}\".`\r\n              );\r\n            }\r\n\r\n            if (!PackageName.isValidName(packageName)) {\r\n              throw new Error(\r\n                `Module paths are not supported when using the \"packageDir\" token ` +\r\n                  (propertyName ? `of property \"${propertyName}\" ` : '') +\r\n                  `in \"${configDir}\". Only a package name is allowed.`\r\n              );\r\n            }\r\n\r\n            // Resolve to the package directory (not the module referenced by the package). The normal resolution\r\n            // method will generally not be able to find @rushstack/heft-jest-plugin from a project that is\r\n            // using a rig. Since it is important, and it is our own package, we resolve it manually as a special\r\n            // case.\r\n            const resolvedPackagePath: string =\r\n              packageName === PLUGIN_PACKAGE_NAME\r\n                ? PLUGIN_PACKAGE_FOLDER\r\n                : Import.resolvePackage({\r\n                    baseFolderPath: configDir,\r\n                    packageName\r\n                  });\r\n            // First entry is the entire match\r\n            const restOfPath: string = path.normalize(\r\n              './' + propertyValue.substr(packageDirMatches[0].length)\r\n            );\r\n            propertyValue = path.resolve(resolvedPackagePath, restOfPath);\r\n          }\r\n        }\r\n\r\n        // Return early, since the remainder of this function is used to resolve module paths\r\n        if (!options.resolveAsModule) {\r\n          return propertyValue;\r\n        }\r\n\r\n        // Example:  @rushstack/heft-jest-plugin\r\n        if (propertyValue === PLUGIN_PACKAGE_NAME) {\r\n          return PLUGIN_PACKAGE_FOLDER;\r\n        }\r\n\r\n        // Example:  @rushstack/heft-jest-plugin/path/to/file.js\r\n        if (propertyValue.startsWith(PLUGIN_PACKAGE_NAME)) {\r\n          const restOfPath: string = path.normalize('./' + propertyValue.substr(PLUGIN_PACKAGE_NAME.length));\r\n          return path.join(PLUGIN_PACKAGE_FOLDER, restOfPath);\r\n        }\r\n\r\n        return options.modulePrefix\r\n          ? jestResolveWithPrefix(/*resolver:*/ undefined, {\r\n              rootDir: configDir,\r\n              filePath: propertyValue,\r\n              prefix: options.modulePrefix,\r\n              humanOptionName: propertyName,\r\n              optionName: propertyName\r\n            })\r\n          : jestResolve(/*resolver:*/ undefined, {\r\n              rootDir: configDir,\r\n              filePath: propertyValue,\r\n              key: propertyName\r\n            });\r\n      },\r\n      pathResolutionMethod: PathResolutionMethod.custom\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Finds the indices of jest reporters with a given name\r\n   */\r\n  private static _findIndexes(items: JestReporterConfig[], search: string): number[] {\r\n    const result: number[] = [];\r\n\r\n    for (let index: number = 0; index < items.length; index++) {\r\n      const item: JestReporterConfig = items[index];\r\n\r\n      // Item is either a string or a tuple of [reporterName: string, options: unknown]\r\n      if (item === search) {\r\n        result.push(index);\r\n      } else if (typeof item !== 'undefined' && item !== null && item[0] === search) {\r\n        result.push(index);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Add the jest-cache folder to the list of paths to delete when running the \"clean\" stage.\r\n   */\r\n  private static _includeJestCacheWhenCleaning(\r\n    heftConfiguration: HeftConfiguration,\r\n    clean: ICleanStageContext\r\n  ): void {\r\n    // Jest's cache is not reliable.  For example, if a Jest configuration change causes files to be\r\n    // transformed differently, the cache will continue to return the old results unless we manually\r\n    // clean it.  Thus we need to ensure that \"heft clean\" always cleans the Jest cache.\r\n    const cacheFolder: string = JestPlugin._getJestCacheFolder(heftConfiguration);\r\n    clean.properties.pathsToDelete.add(cacheFolder);\r\n  }\r\n\r\n  /**\r\n   * Returns the absolute path to the jest-cache directory.\r\n   */\r\n  private static _getJestCacheFolder(heftConfiguration: HeftConfiguration): string {\r\n    return path.join(heftConfiguration.buildCacheFolder, 'jest-cache');\r\n  }\r\n\r\n  public apply(\r\n    heftSession: HeftSession,\r\n    heftConfiguration: HeftConfiguration,\r\n    options?: IJestPluginOptions\r\n  ): void {\r\n    const scopedLogger: ScopedLogger = heftSession.requestScopedLogger('jest');\r\n\r\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\r\n      build.hooks.postBuild.tap(PLUGIN_NAME, (postBuild: IPostBuildSubstage) => {\r\n        postBuild.hooks.run.tapPromise(PLUGIN_NAME, async () => {\r\n          await JestPlugin._setupJestAsync(\r\n            scopedLogger,\r\n            heftConfiguration,\r\n            heftSession.debugMode,\r\n            build.properties,\r\n            options\r\n          );\r\n        });\r\n      });\r\n    });\r\n\r\n    heftSession.hooks.test.tap(PLUGIN_NAME, (test: ITestStageContext) => {\r\n      test.hooks.run.tapPromise(PLUGIN_NAME, async () => {\r\n        await JestPlugin._runJestAsync(\r\n          scopedLogger,\r\n          heftConfiguration,\r\n          heftSession.debugMode,\r\n          test.properties,\r\n          options\r\n        );\r\n      });\r\n    });\r\n\r\n    heftSession.hooks.clean.tap(PLUGIN_NAME, (clean: ICleanStageContext) => {\r\n      JestPlugin._includeJestCacheWhenCleaning(heftConfiguration, clean);\r\n    });\r\n  }\r\n}\r\n"]}