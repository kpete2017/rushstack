{"version":3,"file":"jestWorkerPatch.js","sourceRoot":"","sources":["../src/jestWorkerPatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Import, FileSystem } from '@rushstack/node-core-library';\r\n\r\n// This patch is a fix for a problem where Jest reports this error spuriously on a machine that is under heavy load:\r\n//\r\n// \"A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests\r\n// leaking due to improper teardown. Try running with --runInBand --detectOpenHandles to find leaks.\"\r\n//\r\n// The upstream issue is here: https://github.com/facebook/jest/issues/11354\r\n//\r\n// The relevant code is in jest-worker/src/base/BaseWorkerPool.ts:\r\n// https://github.com/facebook/jest/blob/64d5983d20a628d68644a3a4cd0f510dc304805a/packages/jest-worker/src/base/BaseWorkerPool.ts#L110\r\n//\r\n//      // Schedule a force exit in case worker fails to exit gracefully so\r\n//      // await worker.waitForExit() never takes longer than FORCE_EXIT_DELAY\r\n//      let forceExited = false;\r\n//      const forceExitTimeout = setTimeout(() => {\r\n//        worker.forceExit();\r\n//        forceExited = true;\r\n//      }, FORCE_EXIT_DELAY);\r\n//\r\n// The problem is that Jest hardwires FORCE_EXIT_DELAY to be 500 ms.  On a machine that is under heavy load,\r\n// the IPC message is not received from the child process before the timeout elapses.  The mitigation is to\r\n// increase the delay.  (Jest itself seems to be a significant contributor to machine load, so perhaps reducing\r\n// Jest's parallelism could also help.)\r\n\r\ninterface IBaseWorkerPoolModule {\r\n  default: unknown;\r\n}\r\n\r\n// Follow the NPM dependency chain to find the module path for BaseWorkerPool.js\r\n// heft --> @jest/core --> @jest/reporters --> jest-worker\r\n\r\nconst PATCHED_FORCE_EXIT_DELAY: number = 7000; // 7 seconds\r\nconst patchName: string = path.basename(__filename);\r\n\r\nfunction applyPatch(): void {\r\n  try {\r\n    let contextFolder: string = __dirname;\r\n    // Resolve the \"@jest/core\" package relative to Heft\r\n    contextFolder = Import.resolvePackage({ packageName: '@jest/core', baseFolderPath: contextFolder });\r\n    // Resolve the \"@jest/reporters\" package relative to \"@jest/core\"\r\n    contextFolder = Import.resolvePackage({ packageName: '@jest/reporters', baseFolderPath: contextFolder });\r\n    // Resolve the \"jest-worker\" package relative to \"@jest/reporters\"\r\n    const jestWorkerFolder: string = Import.resolvePackage({\r\n      packageName: 'jest-worker',\r\n      baseFolderPath: contextFolder\r\n    });\r\n\r\n    const baseWorkerPoolPath: string = path.join(jestWorkerFolder, 'build/base/BaseWorkerPool.js');\r\n    const baseWorkerPoolFilename: string = path.basename(baseWorkerPoolPath); // BaseWorkerPool.js\r\n\r\n    if (!FileSystem.exists(baseWorkerPoolPath)) {\r\n      throw new Error(\r\n        'The BaseWorkerPool.js file was not found in the expected location:\\n' + baseWorkerPoolPath\r\n      );\r\n    }\r\n\r\n    // Load the module\r\n    const baseWorkerPoolModule: IBaseWorkerPoolModule = require(baseWorkerPoolPath);\r\n\r\n    // Obtain the metadata for the module\r\n    let baseWorkerPoolModuleMetadata: NodeModule | undefined = undefined;\r\n    for (const childModule of module.children) {\r\n      if (path.basename(childModule.filename || '').toUpperCase() === baseWorkerPoolFilename.toUpperCase()) {\r\n        if (baseWorkerPoolModuleMetadata) {\r\n          throw new Error('More than one child module matched while detecting Node.js module metadata');\r\n        }\r\n        baseWorkerPoolModuleMetadata = childModule;\r\n      }\r\n    }\r\n\r\n    if (!baseWorkerPoolModuleMetadata) {\r\n      throw new Error('Failed to detect the Node.js module metadata for BaseWorkerPool.js');\r\n    }\r\n\r\n    // Load the original file contents\r\n    const originalFileContent: string = FileSystem.readFile(baseWorkerPoolPath);\r\n\r\n    // Add boilerplate so that eval() will return the exports\r\n    let patchedCode: string =\r\n      '// PATCHED BY HEFT USING eval()\\n\\nexports = {}\\n' +\r\n      originalFileContent +\r\n      '\\n// return value:\\nexports';\r\n\r\n    // Apply the patch.  We will replace this:\r\n    //\r\n    //    const FORCE_EXIT_DELAY = 500;\r\n    //\r\n    // with this:\r\n    //\r\n    //    const FORCE_EXIT_DELAY = 7000;\r\n    let matched: boolean = false;\r\n    patchedCode = patchedCode.replace(\r\n      /(const\\s+FORCE_EXIT_DELAY\\s*=\\s*)(\\d+)(\\s*\\;)/,\r\n      (matchedString: string, leftPart: string, middlePart: string, rightPart: string): string => {\r\n        matched = true;\r\n        return leftPart + PATCHED_FORCE_EXIT_DELAY.toString() + rightPart;\r\n      }\r\n    );\r\n\r\n    if (!matched) {\r\n      throw new Error('The expected pattern was not found in the file:\\n' + baseWorkerPoolPath);\r\n    }\r\n\r\n    function evalInContext(): IBaseWorkerPoolModule {\r\n      // Remap the require() function for the eval() context\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      function require(modulePath: string): void {\r\n        return baseWorkerPoolModuleMetadata!.require(modulePath);\r\n      }\r\n\r\n      // eslint-disable-next-line no-eval\r\n      return eval(patchedCode);\r\n    }\r\n\r\n    const patchedModule: IBaseWorkerPoolModule = evalInContext();\r\n\r\n    baseWorkerPoolModule.default = patchedModule.default;\r\n  } catch (e) {\r\n    console.error();\r\n    console.error(`ERROR: ${patchName} failed to patch the \"jest-worker\" package:`);\r\n    console.error(e.toString());\r\n    console.error();\r\n\r\n    throw e;\r\n  }\r\n}\r\n\r\nif (typeof jest !== 'undefined' || process.env.JEST_WORKER_ID) {\r\n  // This patch is incompatible with Jest's proprietary require() implementation\r\n  console.log(`\\nJEST ENVIRONMENT DETECTED - Skipping Heft's ${patchName}\\n`);\r\n} else {\r\n  applyPatch();\r\n}\r\n"]}