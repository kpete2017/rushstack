{"version":3,"file":"jest-string-mock-transform.js","sourceRoot":"","sources":["../src/jest-string-mock-transform.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D;;;;;GAKG;AACH,SAAgB,OAAO,CAAC,GAAW,EAAE,QAAgB,EAAE,WAAsC;IAC3F,8FAA8F;IAC9F,6DAA6D;IAC7D,MAAM,eAAe,GAAW,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAEtF,gHAAgH;IAChH,OAAO,qBAAqB,eAAe,IAAI,CAAC;AAClD,CAAC;AAPD,0BAOC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { InitialOptionsWithRootDir } from '@jest/types/build/Config';\r\n\r\n/**\r\n * This Jest transform handles imports of data files (e.g. .png, .jpg) that would normally be\r\n * processed by a Webpack's file-loader. Instead of actually loading the resource, we return the file's name.\r\n * Webpack's file-loader normally returns the resource's URL, and the filename is an equivalent for a Node\r\n * environment.\r\n */\r\nexport function process(src: string, filename: string, jestOptions: InitialOptionsWithRootDir): string {\r\n  // Double-escape \"'\" and \"\\\" characters in the filename because this is going to be serialized\r\n  // in a string in generated JS code, bounded by single quotes\r\n  const escapedFilename: string = filename.replace(/\\'/g, \"\\\\'\").replace(/\\\\/g, '\\\\\\\\');\r\n\r\n  // For a file called \"myImage.png\", this will generate a JS module that exports the literal string \"myImage.png\"\r\n  return `module.exports = '${escapedFilename}';`;\r\n}\r\n"]}