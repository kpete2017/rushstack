{"version":3,"file":"jest-build-transform.js","sourceRoot":"","sources":["../src/jest-build-transform.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { Path, FileSystem, FileSystemStats, JsonObject } from '@rushstack/node-core-library';\r\nimport { InitialOptionsWithRootDir } from '@jest/types/build/Config';\r\nimport { TransformedSource } from '@jest/transform';\r\n\r\nimport { HeftJestDataFile, IHeftJestDataFileJson } from './HeftJestDataFile';\r\n\r\n// This caches heft-jest-data.json file contents.\r\n// Map from jestOptions.rootDir --> IHeftJestDataFileJson\r\nconst dataFileJsonCache: Map<string, IHeftJestDataFileJson> = new Map();\r\n\r\n// Synchronous delay that doesn't burn CPU cycles\r\nfunction delayMs(milliseconds: number): void {\r\n  Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, milliseconds);\r\n}\r\n\r\nconst DEBUG_TRANSFORM: boolean = false;\r\n\r\n// Tolerate this much inaccuracy in the filesystem time stamps\r\nconst TIMESTAMP_TOLERANCE_MS: number = 15;\r\n\r\n// Wait this long after a .js file's timestamp changes before starting to read it; this gives time\r\n// for the contents to get flushed to disk.\r\nconst FLUSH_TIME_MS: number = 500;\r\n\r\n// Wait this long for the .js file to be written before giving up.\r\nconst MAX_WAIT_MS: number = 7000;\r\n\r\n// Shamefully sleep this long to avoid consuming CPU cycles\r\nconst POLLING_INTERVAL_MS: number = 50;\r\n\r\n/**\r\n * This Jest transformer maps TS files under a 'src' folder to their compiled equivalent under 'lib'\r\n */\r\nexport function process(\r\n  srcCode: string,\r\n  srcFilePath: string,\r\n  jestOptions: InitialOptionsWithRootDir\r\n): TransformedSource {\r\n  let heftJestDataFile: IHeftJestDataFileJson | undefined = dataFileJsonCache.get(jestOptions.rootDir);\r\n  if (heftJestDataFile === undefined) {\r\n    // Read heft-jest-data.json, which is created by the JestPlugin.  It tells us\r\n    // which emitted output folder to use for Jest.\r\n    heftJestDataFile = HeftJestDataFile.loadForProject(jestOptions.rootDir);\r\n    dataFileJsonCache.set(jestOptions.rootDir, heftJestDataFile);\r\n  }\r\n\r\n  // Is the input file under the \"src\" folder?\r\n  const srcFolder: string = path.join(jestOptions.rootDir, 'src');\r\n\r\n  if (Path.isUnder(srcFilePath, srcFolder)) {\r\n    // Example: /path/to/project/src/folder1/folder2/Example.ts\r\n    const parsedFilename: path.ParsedPath = path.parse(srcFilePath);\r\n\r\n    // Example: folder1/folder2\r\n    const srcRelativeFolderPath: string = path.relative(srcFolder, parsedFilename.dir);\r\n\r\n    // Example: /path/to/project/lib/folder1/folder2/Example.js\r\n    const libFilePath: string = path.join(\r\n      jestOptions.rootDir,\r\n      heftJestDataFile.emitFolderNameForTests,\r\n      srcRelativeFolderPath,\r\n      `${parsedFilename.name}${heftJestDataFile.extensionForTests}`\r\n    );\r\n\r\n    const startOfLoopMs: number = new Date().getTime();\r\n    let stalled: boolean = false;\r\n\r\n    if (!heftJestDataFile.skipTimestampCheck) {\r\n      for (;;) {\r\n        let srcFileStatistics: FileSystemStats;\r\n        try {\r\n          srcFileStatistics = FileSystem.getStatistics(srcFilePath);\r\n        } catch {\r\n          // If the source file was deleted, then fall through and allow readFile() to fail\r\n          break;\r\n        }\r\n        let libFileStatistics: FileSystemStats | undefined = undefined;\r\n        try {\r\n          libFileStatistics = FileSystem.getStatistics(libFilePath);\r\n        } catch {\r\n          // ignore errors\r\n        }\r\n\r\n        const nowMs: number = new Date().getTime();\r\n        if (libFileStatistics) {\r\n          // The lib/*.js timestamp must not be older than the src/*.ts timestamp, otherwise the transpiler\r\n          // is not done writing its outputs.\r\n          if (libFileStatistics.ctimeMs + TIMESTAMP_TOLERANCE_MS > srcFileStatistics.ctimeMs) {\r\n            // Also, the lib/*.js timestamp must not be too recent, otherwise the transpiler may not have\r\n            // finished flushing its output to disk.\r\n            if (nowMs > libFileStatistics.ctimeMs + FLUSH_TIME_MS) {\r\n              // The .js file is newer than the .ts file, and is old enough to have been flushed\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (nowMs - startOfLoopMs > MAX_WAIT_MS) {\r\n          // Something is wrong -- why hasn't the compiler updated the .js file?\r\n          if (libFileStatistics) {\r\n            throw new Error(\r\n              'jest-build-transform: Gave up waiting for the transpiler to update its output file:\\n' +\r\n                libFilePath\r\n            );\r\n          } else {\r\n            throw new Error(\r\n              'jest-build-transform: Gave up waiting for the transpiler to write its output file:\\n' +\r\n                libFilePath\r\n            );\r\n          }\r\n        }\r\n\r\n        // Jest's transforms are synchronous, so our only option here is to sleep synchronously. Bad Jest. :-(\r\n        // TODO: The better solution is to change how Jest's watch loop is notified.\r\n        stalled = true;\r\n        delayMs(POLLING_INTERVAL_MS);\r\n      }\r\n    }\r\n\r\n    if (stalled && DEBUG_TRANSFORM) {\r\n      const nowMs: number = new Date().getTime();\r\n      console.log(`Waited ${nowMs - startOfLoopMs} ms for .js file`);\r\n      delayMs(2000);\r\n    }\r\n\r\n    let libCode: string;\r\n    try {\r\n      libCode = FileSystem.readFile(libFilePath);\r\n    } catch (error) {\r\n      if (FileSystem.isNotExistError(error)) {\r\n        throw new Error(\r\n          'jest-build-transform: The expected transpiler output file does not exist:\\n' + libFilePath\r\n        );\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    const sourceMapFilePath: string = libFilePath + '.map';\r\n\r\n    let originalSourceMap: string;\r\n    try {\r\n      originalSourceMap = FileSystem.readFile(sourceMapFilePath);\r\n    } catch (error) {\r\n      if (FileSystem.isNotExistError(error)) {\r\n        throw new Error(\r\n          'jest-build-transform: The source map file is missing -- check your tsconfig.json settings:\\n' +\r\n            sourceMapFilePath\r\n        );\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    // Fix up the source map, since Jest will present the .ts file path to VS Code as the executing script\r\n    const parsedSourceMap: JsonObject = JSON.parse(originalSourceMap);\r\n    if (parsedSourceMap.version !== 3) {\r\n      throw new Error('jest-build-transform: Unsupported source map file version: ' + sourceMapFilePath);\r\n    }\r\n    parsedSourceMap.file = srcFilePath;\r\n    parsedSourceMap.sources = [srcFilePath];\r\n    parsedSourceMap.sourcesContent = [srcCode];\r\n    delete parsedSourceMap.sourceRoot;\r\n    const correctedSourceMap: string = JSON.stringify(parsedSourceMap);\r\n\r\n    // Embed the source map, since if we return the { code, map } object, then the debugger does not believe\r\n    // it is the same file, and will show a separate view with the same file path.\r\n    //\r\n    // Note that if the Jest testEnvironment does not support vm.compileFunction (introduced with Node.js 10),\r\n    // then the Jest module wrapper will inject text below the \"//# sourceMappingURL=\" line which breaks source maps.\r\n    // See this PR for details: https://github.com/facebook/jest/pull/9252\r\n    const encodedSourceMap: string =\r\n      'data:application/json;charset=utf-8;base64,' +\r\n      Buffer.from(correctedSourceMap, 'utf8').toString('base64');\r\n\r\n    const sourceMappingUrlToken: string = 'sourceMappingURL=';\r\n    const sourceMappingCommentIndex: number = libCode.lastIndexOf(sourceMappingUrlToken);\r\n    let libCodeWithSourceMap: string;\r\n    if (sourceMappingCommentIndex !== -1) {\r\n      libCodeWithSourceMap =\r\n        libCode.slice(0, sourceMappingCommentIndex + sourceMappingUrlToken.length) + encodedSourceMap;\r\n    } else {\r\n      // If there isn't a sourceMappingURL comment, inject one\r\n      const sourceMapComment: string =\r\n        (libCode.endsWith('\\n') ? '' : '\\n') + `//# ${sourceMappingUrlToken}${encodedSourceMap}`;\r\n      libCodeWithSourceMap = libCode + sourceMapComment;\r\n    }\r\n\r\n    return libCodeWithSourceMap;\r\n  } else {\r\n    throw new Error('jest-build-transform: The input path is not under the \"src\" folder:\\n' + srcFilePath);\r\n  }\r\n}\r\n"]}